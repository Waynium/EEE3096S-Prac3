
EEE3096S_2022_Prac_3_ADCs_Interrupts_and_PWM_Student_Version.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e28  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004ee8  08004ee8  00014ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f5c  08004f5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004f5c  08004f5c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f5c  08004f5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f5c  08004f5c  00014f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f60  08004f60  00014f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000070  08004fd4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08004fd4  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0a4  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002040  00000000  00000000  0002f13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00031180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00031ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001237e  00000000  00000000  00032b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbb2  00000000  00000000  00044ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071dfc  00000000  00000000  00054a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c6874  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033a4  00000000  00000000  000c68c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004ed0 	.word	0x08004ed0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004ed0 	.word	0x08004ed0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fcc1 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f83b 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f9bb 	bl	80005bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000246:	f000 f993 	bl	8000570 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800024a:	f000 f961 	bl	8000510 <MX_USART2_UART_Init>
  MX_ADC_Init();
 800024e:	f000 f883 	bl	8000358 <MX_ADC_Init>
  MX_TIM3_Init();
 8000252:	f000 f8dd 	bl	8000410 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //TO DO:
  //Create variables needed in while loop

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); //Start the PWM on TIM3 Channel 4 (Green LED)
 8000256:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <main+0x70>)
 8000258:	210c      	movs	r1, #12
 800025a:	0018      	movs	r0, r3
 800025c:	f002 fc14 	bl	8002a88 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8); // Toggle blue LED
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	005b      	lsls	r3, r3, #1
 8000264:	4a10      	ldr	r2, [pc, #64]	; (80002a8 <main+0x74>)
 8000266:	0019      	movs	r1, r3
 8000268:	0010      	movs	r0, r2
 800026a:	f001 feb8 	bl	8001fde <HAL_GPIO_TogglePin>
	  //TO DO:
	  //TASK 2
	  //Test your pollADC function and display via UART
	  uint32_t result = pollADC();
 800026e:	f000 fa5b 	bl	8000728 <pollADC>
 8000272:	0003      	movs	r3, r0
 8000274:	607b      	str	r3, [r7, #4]
	  sprintf(buffer, "%d \r\n", result);
 8000276:	687a      	ldr	r2, [r7, #4]
 8000278:	490c      	ldr	r1, [pc, #48]	; (80002ac <main+0x78>)
 800027a:	4b0d      	ldr	r3, [pc, #52]	; (80002b0 <main+0x7c>)
 800027c:	0018      	movs	r0, r3
 800027e:	f004 f9bd 	bl	80045fc <siprintf>
	  if (HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000) != HAL_OK)
 8000282:	23fa      	movs	r3, #250	; 0xfa
 8000284:	009b      	lsls	r3, r3, #2
 8000286:	490a      	ldr	r1, [pc, #40]	; (80002b0 <main+0x7c>)
 8000288:	480a      	ldr	r0, [pc, #40]	; (80002b4 <main+0x80>)
 800028a:	220a      	movs	r2, #10
 800028c:	f003 fa3a 	bl	8003704 <HAL_UART_Transmit>
 8000290:	1e03      	subs	r3, r0, #0
 8000292:	d001      	beq.n	8000298 <main+0x64>
		  Error_Handler();
 8000294:	f000 fa66 	bl	8000764 <Error_Handler>


	  //TASK 4
	  //Complete rest of implementation

	  HAL_Delay (500); // wait for 500 ms
 8000298:	23fa      	movs	r3, #250	; 0xfa
 800029a:	005b      	lsls	r3, r3, #1
 800029c:	0018      	movs	r0, r3
 800029e:	f000 fcf3 	bl	8000c88 <HAL_Delay>
  {
 80002a2:	e7dd      	b.n	8000260 <main+0x2c>
 80002a4:	20000110 	.word	0x20000110
 80002a8:	48000800 	.word	0x48000800
 80002ac:	08004ee8 	.word	0x08004ee8
 80002b0:	20000220 	.word	0x20000220
 80002b4:	20000158 	.word	0x20000158

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b091      	sub	sp, #68	; 0x44
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	2410      	movs	r4, #16
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	0018      	movs	r0, r3
 80002c4:	2330      	movs	r3, #48	; 0x30
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f004 f98f 	bl	80045ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ce:	003b      	movs	r3, r7
 80002d0:	0018      	movs	r0, r3
 80002d2:	2310      	movs	r3, #16
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f004 f988 	bl	80045ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002dc:	0021      	movs	r1, r4
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2212      	movs	r2, #18
 80002e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2201      	movs	r2, #1
 80002e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2201      	movs	r2, #1
 80002ee:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2210      	movs	r2, #16
 80002f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2210      	movs	r2, #16
 80002fa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2202      	movs	r2, #2
 8000300:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2200      	movs	r2, #0
 8000306:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	22a0      	movs	r2, #160	; 0xa0
 800030c:	0392      	lsls	r2, r2, #14
 800030e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2200      	movs	r2, #0
 8000314:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	187b      	adds	r3, r7, r1
 8000318:	0018      	movs	r0, r3
 800031a:	f001 fea1 	bl	8002060 <HAL_RCC_OscConfig>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000322:	f000 fa1f 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	003b      	movs	r3, r7
 8000328:	2207      	movs	r2, #7
 800032a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032c:	003b      	movs	r3, r7
 800032e:	2202      	movs	r2, #2
 8000330:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	003b      	movs	r3, r7
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000338:	003b      	movs	r3, r7
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800033e:	003b      	movs	r3, r7
 8000340:	2101      	movs	r1, #1
 8000342:	0018      	movs	r0, r3
 8000344:	f002 f9a6 	bl	8002694 <HAL_RCC_ClockConfig>
 8000348:	1e03      	subs	r3, r0, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800034c:	f000 fa0a 	bl	8000764 <Error_Handler>
  }
}
 8000350:	46c0      	nop			; (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	b011      	add	sp, #68	; 0x44
 8000356:	bd90      	pop	{r4, r7, pc}

08000358 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	0018      	movs	r0, r3
 8000362:	230c      	movs	r3, #12
 8000364:	001a      	movs	r2, r3
 8000366:	2100      	movs	r1, #0
 8000368:	f004 f940 	bl	80045ec <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800036c:	4b26      	ldr	r3, [pc, #152]	; (8000408 <MX_ADC_Init+0xb0>)
 800036e:	4a27      	ldr	r2, [pc, #156]	; (800040c <MX_ADC_Init+0xb4>)
 8000370:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000372:	4b25      	ldr	r3, [pc, #148]	; (8000408 <MX_ADC_Init+0xb0>)
 8000374:	2200      	movs	r2, #0
 8000376:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000378:	4b23      	ldr	r3, [pc, #140]	; (8000408 <MX_ADC_Init+0xb0>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800037e:	4b22      	ldr	r3, [pc, #136]	; (8000408 <MX_ADC_Init+0xb0>)
 8000380:	2200      	movs	r2, #0
 8000382:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000384:	4b20      	ldr	r3, [pc, #128]	; (8000408 <MX_ADC_Init+0xb0>)
 8000386:	2201      	movs	r2, #1
 8000388:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800038a:	4b1f      	ldr	r3, [pc, #124]	; (8000408 <MX_ADC_Init+0xb0>)
 800038c:	2204      	movs	r2, #4
 800038e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000390:	4b1d      	ldr	r3, [pc, #116]	; (8000408 <MX_ADC_Init+0xb0>)
 8000392:	2200      	movs	r2, #0
 8000394:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000396:	4b1c      	ldr	r3, [pc, #112]	; (8000408 <MX_ADC_Init+0xb0>)
 8000398:	2200      	movs	r2, #0
 800039a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800039c:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <MX_ADC_Init+0xb0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003a2:	4b19      	ldr	r3, [pc, #100]	; (8000408 <MX_ADC_Init+0xb0>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003a8:	4b17      	ldr	r3, [pc, #92]	; (8000408 <MX_ADC_Init+0xb0>)
 80003aa:	22c2      	movs	r2, #194	; 0xc2
 80003ac:	32ff      	adds	r2, #255	; 0xff
 80003ae:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003b0:	4b15      	ldr	r3, [pc, #84]	; (8000408 <MX_ADC_Init+0xb0>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003b6:	4b14      	ldr	r3, [pc, #80]	; (8000408 <MX_ADC_Init+0xb0>)
 80003b8:	2224      	movs	r2, #36	; 0x24
 80003ba:	2100      	movs	r1, #0
 80003bc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003be:	4b12      	ldr	r3, [pc, #72]	; (8000408 <MX_ADC_Init+0xb0>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003c4:	4b10      	ldr	r3, [pc, #64]	; (8000408 <MX_ADC_Init+0xb0>)
 80003c6:	0018      	movs	r0, r3
 80003c8:	f000 fc82 	bl	8000cd0 <HAL_ADC_Init>
 80003cc:	1e03      	subs	r3, r0, #0
 80003ce:	d001      	beq.n	80003d4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003d0:	f000 f9c8 	bl	8000764 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2207      	movs	r2, #7
 80003d8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2280      	movs	r2, #128	; 0x80
 80003de:	0152      	lsls	r2, r2, #5
 80003e0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2280      	movs	r2, #128	; 0x80
 80003e6:	0552      	lsls	r2, r2, #21
 80003e8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003ea:	1d3a      	adds	r2, r7, #4
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <MX_ADC_Init+0xb0>)
 80003ee:	0011      	movs	r1, r2
 80003f0:	0018      	movs	r0, r3
 80003f2:	f000 ffb5 	bl	8001360 <HAL_ADC_ConfigChannel>
 80003f6:	1e03      	subs	r3, r0, #0
 80003f8:	d001      	beq.n	80003fe <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003fa:	f000 f9b3 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	b004      	add	sp, #16
 8000404:	bd80      	pop	{r7, pc}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	2000008c 	.word	0x2000008c
 800040c:	40012400 	.word	0x40012400

08000410 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b08e      	sub	sp, #56	; 0x38
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000416:	2328      	movs	r3, #40	; 0x28
 8000418:	18fb      	adds	r3, r7, r3
 800041a:	0018      	movs	r0, r3
 800041c:	2310      	movs	r3, #16
 800041e:	001a      	movs	r2, r3
 8000420:	2100      	movs	r1, #0
 8000422:	f004 f8e3 	bl	80045ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000426:	2320      	movs	r3, #32
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	0018      	movs	r0, r3
 800042c:	2308      	movs	r3, #8
 800042e:	001a      	movs	r2, r3
 8000430:	2100      	movs	r1, #0
 8000432:	f004 f8db 	bl	80045ec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	0018      	movs	r0, r3
 800043a:	231c      	movs	r3, #28
 800043c:	001a      	movs	r2, r3
 800043e:	2100      	movs	r1, #0
 8000440:	f004 f8d4 	bl	80045ec <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000444:	4b2f      	ldr	r3, [pc, #188]	; (8000504 <MX_TIM3_Init+0xf4>)
 8000446:	4a30      	ldr	r2, [pc, #192]	; (8000508 <MX_TIM3_Init+0xf8>)
 8000448:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800044a:	4b2e      	ldr	r3, [pc, #184]	; (8000504 <MX_TIM3_Init+0xf4>)
 800044c:	2200      	movs	r2, #0
 800044e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000450:	4b2c      	ldr	r3, [pc, #176]	; (8000504 <MX_TIM3_Init+0xf4>)
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 47999;
 8000456:	4b2b      	ldr	r3, [pc, #172]	; (8000504 <MX_TIM3_Init+0xf4>)
 8000458:	4a2c      	ldr	r2, [pc, #176]	; (800050c <MX_TIM3_Init+0xfc>)
 800045a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800045c:	4b29      	ldr	r3, [pc, #164]	; (8000504 <MX_TIM3_Init+0xf4>)
 800045e:	2200      	movs	r2, #0
 8000460:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000462:	4b28      	ldr	r3, [pc, #160]	; (8000504 <MX_TIM3_Init+0xf4>)
 8000464:	2280      	movs	r2, #128	; 0x80
 8000466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000468:	4b26      	ldr	r3, [pc, #152]	; (8000504 <MX_TIM3_Init+0xf4>)
 800046a:	0018      	movs	r0, r3
 800046c:	f002 fa64 	bl	8002938 <HAL_TIM_Base_Init>
 8000470:	1e03      	subs	r3, r0, #0
 8000472:	d001      	beq.n	8000478 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000474:	f000 f976 	bl	8000764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000478:	2128      	movs	r1, #40	; 0x28
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2280      	movs	r2, #128	; 0x80
 800047e:	0152      	lsls	r2, r2, #5
 8000480:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000482:	187a      	adds	r2, r7, r1
 8000484:	4b1f      	ldr	r3, [pc, #124]	; (8000504 <MX_TIM3_Init+0xf4>)
 8000486:	0011      	movs	r1, r2
 8000488:	0018      	movs	r0, r3
 800048a:	f002 fc7b 	bl	8002d84 <HAL_TIM_ConfigClockSource>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000492:	f000 f967 	bl	8000764 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000496:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <MX_TIM3_Init+0xf4>)
 8000498:	0018      	movs	r0, r3
 800049a:	f002 fa9d 	bl	80029d8 <HAL_TIM_PWM_Init>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80004a2:	f000 f95f 	bl	8000764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a6:	2120      	movs	r1, #32
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	2200      	movs	r2, #0
 80004b2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004b4:	187a      	adds	r2, r7, r1
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <MX_TIM3_Init+0xf4>)
 80004b8:	0011      	movs	r1, r2
 80004ba:	0018      	movs	r0, r3
 80004bc:	f003 f870 	bl	80035a0 <HAL_TIMEx_MasterConfigSynchronization>
 80004c0:	1e03      	subs	r3, r0, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80004c4:	f000 f94e 	bl	8000764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2260      	movs	r2, #96	; 0x60
 80004cc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2200      	movs	r2, #0
 80004d2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004e0:	1d39      	adds	r1, r7, #4
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <MX_TIM3_Init+0xf4>)
 80004e4:	220c      	movs	r2, #12
 80004e6:	0018      	movs	r0, r3
 80004e8:	f002 fb86 	bl	8002bf8 <HAL_TIM_PWM_ConfigChannel>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80004f0:	f000 f938 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004f4:	4b03      	ldr	r3, [pc, #12]	; (8000504 <MX_TIM3_Init+0xf4>)
 80004f6:	0018      	movs	r0, r3
 80004f8:	f000 f9f6 	bl	80008e8 <HAL_TIM_MspPostInit>

}
 80004fc:	46c0      	nop			; (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b00e      	add	sp, #56	; 0x38
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000110 	.word	0x20000110
 8000508:	40000400 	.word	0x40000400
 800050c:	0000bb7f 	.word	0x0000bb7f

08000510 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000516:	4a15      	ldr	r2, [pc, #84]	; (800056c <MX_USART2_UART_Init+0x5c>)
 8000518:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800051a:	4b13      	ldr	r3, [pc, #76]	; (8000568 <MX_USART2_UART_Init+0x58>)
 800051c:	2296      	movs	r2, #150	; 0x96
 800051e:	0192      	lsls	r2, r2, #6
 8000520:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_USART2_UART_Init+0x58>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000536:	220c      	movs	r2, #12
 8000538:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <MX_USART2_UART_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_USART2_UART_Init+0x58>)
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000552:	4b05      	ldr	r3, [pc, #20]	; (8000568 <MX_USART2_UART_Init+0x58>)
 8000554:	0018      	movs	r0, r3
 8000556:	f003 f881 	bl	800365c <HAL_UART_Init>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800055e:	f000 f901 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000158 	.word	0x20000158
 800056c:	40004400 	.word	0x40004400

08000570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000576:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <MX_DMA_Init+0x48>)
 8000578:	695a      	ldr	r2, [r3, #20]
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_DMA_Init+0x48>)
 800057c:	2101      	movs	r1, #1
 800057e:	430a      	orrs	r2, r1
 8000580:	615a      	str	r2, [r3, #20]
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <MX_DMA_Init+0x48>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	2201      	movs	r2, #1
 8000588:	4013      	ands	r3, r2
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2100      	movs	r1, #0
 8000592:	2009      	movs	r0, #9
 8000594:	f001 f9e0 	bl	8001958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000598:	2009      	movs	r0, #9
 800059a:	f001 f9f2 	bl	8001982 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	200b      	movs	r0, #11
 80005a4:	f001 f9d8 	bl	8001958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80005a8:	200b      	movs	r0, #11
 80005aa:	f001 f9ea 	bl	8001982 <HAL_NVIC_EnableIRQ>

}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b002      	add	sp, #8
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	40021000 	.word	0x40021000

080005bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b08b      	sub	sp, #44	; 0x2c
 80005c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	2414      	movs	r4, #20
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	0018      	movs	r0, r3
 80005c8:	2314      	movs	r3, #20
 80005ca:	001a      	movs	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	f004 f80d 	bl	80045ec <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d2:	4b43      	ldr	r3, [pc, #268]	; (80006e0 <MX_GPIO_Init+0x124>)
 80005d4:	695a      	ldr	r2, [r3, #20]
 80005d6:	4b42      	ldr	r3, [pc, #264]	; (80006e0 <MX_GPIO_Init+0x124>)
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	03c9      	lsls	r1, r1, #15
 80005dc:	430a      	orrs	r2, r1
 80005de:	615a      	str	r2, [r3, #20]
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <MX_GPIO_Init+0x124>)
 80005e2:	695a      	ldr	r2, [r3, #20]
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	03db      	lsls	r3, r3, #15
 80005e8:	4013      	ands	r3, r2
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <MX_GPIO_Init+0x124>)
 80005f0:	695a      	ldr	r2, [r3, #20]
 80005f2:	4b3b      	ldr	r3, [pc, #236]	; (80006e0 <MX_GPIO_Init+0x124>)
 80005f4:	2180      	movs	r1, #128	; 0x80
 80005f6:	0289      	lsls	r1, r1, #10
 80005f8:	430a      	orrs	r2, r1
 80005fa:	615a      	str	r2, [r3, #20]
 80005fc:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <MX_GPIO_Init+0x124>)
 80005fe:	695a      	ldr	r2, [r3, #20]
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	029b      	lsls	r3, r3, #10
 8000604:	4013      	ands	r3, r2
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	4b35      	ldr	r3, [pc, #212]	; (80006e0 <MX_GPIO_Init+0x124>)
 800060c:	695a      	ldr	r2, [r3, #20]
 800060e:	4b34      	ldr	r3, [pc, #208]	; (80006e0 <MX_GPIO_Init+0x124>)
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	0309      	lsls	r1, r1, #12
 8000614:	430a      	orrs	r2, r1
 8000616:	615a      	str	r2, [r3, #20]
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <MX_GPIO_Init+0x124>)
 800061a:	695a      	ldr	r2, [r3, #20]
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	031b      	lsls	r3, r3, #12
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <MX_GPIO_Init+0x124>)
 8000628:	695a      	ldr	r2, [r3, #20]
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <MX_GPIO_Init+0x124>)
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	02c9      	lsls	r1, r1, #11
 8000630:	430a      	orrs	r2, r1
 8000632:	615a      	str	r2, [r3, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <MX_GPIO_Init+0x124>)
 8000636:	695a      	ldr	r2, [r3, #20]
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	02db      	lsls	r3, r3, #11
 800063c:	4013      	ands	r3, r2
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000642:	2380      	movs	r3, #128	; 0x80
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	4827      	ldr	r0, [pc, #156]	; (80006e4 <MX_GPIO_Init+0x128>)
 8000648:	2200      	movs	r2, #0
 800064a:	0019      	movs	r1, r3
 800064c:	f001 fcaa 	bl	8001fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000650:	193b      	adds	r3, r7, r4
 8000652:	2201      	movs	r2, #1
 8000654:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000656:	193b      	adds	r3, r7, r4
 8000658:	2284      	movs	r2, #132	; 0x84
 800065a:	0392      	lsls	r2, r2, #14
 800065c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	193b      	adds	r3, r7, r4
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000664:	193a      	adds	r2, r7, r4
 8000666:	2390      	movs	r3, #144	; 0x90
 8000668:	05db      	lsls	r3, r3, #23
 800066a:	0011      	movs	r1, r2
 800066c:	0018      	movs	r0, r3
 800066e:	f001 fb29 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000672:	0021      	movs	r1, r4
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2280      	movs	r2, #128	; 0x80
 8000678:	0052      	lsls	r2, r2, #1
 800067a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	000c      	movs	r4, r1
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2201      	movs	r2, #1
 8000682:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	193b      	adds	r3, r7, r4
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000690:	193b      	adds	r3, r7, r4
 8000692:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <MX_GPIO_Init+0x128>)
 8000694:	0019      	movs	r1, r3
 8000696:	0010      	movs	r0, r2
 8000698:	f001 fb14 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800069c:	0021      	movs	r1, r4
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	22c0      	movs	r2, #192	; 0xc0
 80006a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2212      	movs	r2, #18
 80006a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2203      	movs	r2, #3
 80006b4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2201      	movs	r2, #1
 80006ba:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <MX_GPIO_Init+0x12c>)
 80006c0:	0019      	movs	r1, r3
 80006c2:	0010      	movs	r0, r2
 80006c4:	f001 fafe 	bl	8001cc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2100      	movs	r1, #0
 80006cc:	2005      	movs	r0, #5
 80006ce:	f001 f943 	bl	8001958 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80006d2:	2005      	movs	r0, #5
 80006d4:	f001 f955 	bl	8001982 <HAL_NVIC_EnableIRQ>

}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b00b      	add	sp, #44	; 0x2c
 80006de:	bd90      	pop	{r4, r7, pc}
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000800 	.word	0x48000800
 80006e8:	48000400 	.word	0x48000400

080006ec <EXTI0_1_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI0_1_IRQHandler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
	//TO DO:
	//TASK 1
	//Switch delay frequency
	// Changing the delay modulates the duty cycle of the pulse
	int period = HAL_GetTick();
 80006f2:	f000 fabf 	bl	8000c74 <HAL_GetTick>
 80006f6:	0003      	movs	r3, r0
 80006f8:	607b      	str	r3, [r7, #4]
	if (period == 500) {
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	23fa      	movs	r3, #250	; 0xfa
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	429a      	cmp	r2, r3
 8000702:	d103      	bne.n	800070c <EXTI0_1_IRQHandler+0x20>
		period = 1000;
 8000704:	23fa      	movs	r3, #250	; 0xfa
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	e002      	b.n	8000712 <EXTI0_1_IRQHandler+0x26>
	}
	else {
		period = 500;
 800070c:	23fa      	movs	r3, #250	; 0xfa
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	607b      	str	r3, [r7, #4]
	}
	HAL_Delay(period);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	0018      	movs	r0, r3
 8000716:	f000 fab7 	bl	8000c88 <HAL_Delay>
	HAL_GPIO_EXTI_IRQHandler(B1_Pin); // Clear interrupt flags
 800071a:	2001      	movs	r0, #1
 800071c:	f001 fc7a 	bl	8002014 <HAL_GPIO_EXTI_IRQHandler>
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b002      	add	sp, #8
 8000726:	bd80      	pop	{r7, pc}

08000728 <pollADC>:

uint32_t pollADC(void){
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
	//TO DO:
	//TASK 2
	// Complete the function body
	HAL_ADC_Start(&hadc); // start the adc
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <pollADC+0x38>)
 8000730:	0018      	movs	r0, r3
 8000732:	f000 fc0d 	bl	8000f50 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc, 100); // poll for conversion
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <pollADC+0x38>)
 8000738:	2164      	movs	r1, #100	; 0x64
 800073a:	0018      	movs	r0, r3
 800073c:	f000 fc9c 	bl	8001078 <HAL_ADC_PollForConversion>

	uint32_t val = HAL_ADC_GetValue(&hadc); // get the adc value
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <pollADC+0x38>)
 8000742:	0018      	movs	r0, r3
 8000744:	f000 fd30 	bl	80011a8 <HAL_ADC_GetValue>
 8000748:	0003      	movs	r3, r0
 800074a:	607b      	str	r3, [r7, #4]

	HAL_ADC_Stop(&hadc); // stop adc
 800074c:	4b04      	ldr	r3, [pc, #16]	; (8000760 <pollADC+0x38>)
 800074e:	0018      	movs	r0, r3
 8000750:	f000 fc52 	bl	8000ff8 <HAL_ADC_Stop>

	return val;
 8000754:	687b      	ldr	r3, [r7, #4]
}
 8000756:	0018      	movs	r0, r3
 8000758:	46bd      	mov	sp, r7
 800075a:	b002      	add	sp, #8
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	2000008c 	.word	0x2000008c

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	e7fe      	b.n	800076c <Error_Handler+0x8>
	...

08000770 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <HAL_MspInit+0x44>)
 8000778:	699a      	ldr	r2, [r3, #24]
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <HAL_MspInit+0x44>)
 800077c:	2101      	movs	r1, #1
 800077e:	430a      	orrs	r2, r1
 8000780:	619a      	str	r2, [r3, #24]
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <HAL_MspInit+0x44>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	2201      	movs	r2, #1
 8000788:	4013      	ands	r3, r2
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <HAL_MspInit+0x44>)
 8000790:	69da      	ldr	r2, [r3, #28]
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <HAL_MspInit+0x44>)
 8000794:	2180      	movs	r1, #128	; 0x80
 8000796:	0549      	lsls	r1, r1, #21
 8000798:	430a      	orrs	r2, r1
 800079a:	61da      	str	r2, [r3, #28]
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_MspInit+0x44>)
 800079e:	69da      	ldr	r2, [r3, #28]
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	055b      	lsls	r3, r3, #21
 80007a4:	4013      	ands	r3, r2
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b002      	add	sp, #8
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	40021000 	.word	0x40021000

080007b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b08b      	sub	sp, #44	; 0x2c
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	2414      	movs	r4, #20
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	0018      	movs	r0, r3
 80007c6:	2314      	movs	r3, #20
 80007c8:	001a      	movs	r2, r3
 80007ca:	2100      	movs	r1, #0
 80007cc:	f003 ff0e 	bl	80045ec <memset>
  if(hadc->Instance==ADC1)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a31      	ldr	r2, [pc, #196]	; (800089c <HAL_ADC_MspInit+0xe4>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d15b      	bne.n	8000892 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007da:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <HAL_ADC_MspInit+0xe8>)
 80007dc:	699a      	ldr	r2, [r3, #24]
 80007de:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <HAL_ADC_MspInit+0xe8>)
 80007e0:	2180      	movs	r1, #128	; 0x80
 80007e2:	0089      	lsls	r1, r1, #2
 80007e4:	430a      	orrs	r2, r1
 80007e6:	619a      	str	r2, [r3, #24]
 80007e8:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <HAL_ADC_MspInit+0xe8>)
 80007ea:	699a      	ldr	r2, [r3, #24]
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4013      	ands	r3, r2
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <HAL_ADC_MspInit+0xe8>)
 80007f8:	695a      	ldr	r2, [r3, #20]
 80007fa:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <HAL_ADC_MspInit+0xe8>)
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	0289      	lsls	r1, r1, #10
 8000800:	430a      	orrs	r2, r1
 8000802:	615a      	str	r2, [r3, #20]
 8000804:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <HAL_ADC_MspInit+0xe8>)
 8000806:	695a      	ldr	r2, [r3, #20]
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	029b      	lsls	r3, r3, #10
 800080c:	4013      	ands	r3, r2
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000812:	193b      	adds	r3, r7, r4
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000818:	193b      	adds	r3, r7, r4
 800081a:	2203      	movs	r2, #3
 800081c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	193b      	adds	r3, r7, r4
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	193a      	adds	r2, r7, r4
 8000826:	2390      	movs	r3, #144	; 0x90
 8000828:	05db      	lsls	r3, r3, #23
 800082a:	0011      	movs	r1, r2
 800082c:	0018      	movs	r0, r3
 800082e:	f001 fa49 	bl	8001cc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <HAL_ADC_MspInit+0xec>)
 8000834:	4a1c      	ldr	r2, [pc, #112]	; (80008a8 <HAL_ADC_MspInit+0xf0>)
 8000836:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <HAL_ADC_MspInit+0xec>)
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <HAL_ADC_MspInit+0xec>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <HAL_ADC_MspInit+0xec>)
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <HAL_ADC_MspInit+0xec>)
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	0052      	lsls	r2, r2, #1
 8000850:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <HAL_ADC_MspInit+0xec>)
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	00d2      	lsls	r2, r2, #3
 8000858:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_ADC_MspInit+0xec>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <HAL_ADC_MspInit+0xec>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <HAL_ADC_MspInit+0xec>)
 8000868:	0018      	movs	r0, r3
 800086a:	f001 f8a7 	bl	80019bc <HAL_DMA_Init>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000872:	f7ff ff77 	bl	8000764 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <HAL_ADC_MspInit+0xec>)
 800087a:	631a      	str	r2, [r3, #48]	; 0x30
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_ADC_MspInit+0xec>)
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	200c      	movs	r0, #12
 8000888:	f001 f866 	bl	8001958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800088c:	200c      	movs	r0, #12
 800088e:	f001 f878 	bl	8001982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b00b      	add	sp, #44	; 0x2c
 8000898:	bd90      	pop	{r4, r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	40012400 	.word	0x40012400
 80008a0:	40021000 	.word	0x40021000
 80008a4:	200000cc 	.word	0x200000cc
 80008a8:	40020008 	.word	0x40020008

080008ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a09      	ldr	r2, [pc, #36]	; (80008e0 <HAL_TIM_Base_MspInit+0x34>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d10b      	bne.n	80008d6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_TIM_Base_MspInit+0x38>)
 80008c0:	69da      	ldr	r2, [r3, #28]
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_TIM_Base_MspInit+0x38>)
 80008c4:	2102      	movs	r1, #2
 80008c6:	430a      	orrs	r2, r1
 80008c8:	61da      	str	r2, [r3, #28]
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_TIM_Base_MspInit+0x38>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	2202      	movs	r2, #2
 80008d0:	4013      	ands	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b004      	add	sp, #16
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	40000400 	.word	0x40000400
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	240c      	movs	r4, #12
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	0018      	movs	r0, r3
 80008f6:	2314      	movs	r3, #20
 80008f8:	001a      	movs	r2, r3
 80008fa:	2100      	movs	r1, #0
 80008fc:	f003 fe76 	bl	80045ec <memset>
  if(htim->Instance==TIM3)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a15      	ldr	r2, [pc, #84]	; (800095c <HAL_TIM_MspPostInit+0x74>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d124      	bne.n	8000954 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <HAL_TIM_MspPostInit+0x78>)
 800090c:	695a      	ldr	r2, [r3, #20]
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <HAL_TIM_MspPostInit+0x78>)
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	0309      	lsls	r1, r1, #12
 8000914:	430a      	orrs	r2, r1
 8000916:	615a      	str	r2, [r3, #20]
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <HAL_TIM_MspPostInit+0x78>)
 800091a:	695a      	ldr	r2, [r3, #20]
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	031b      	lsls	r3, r3, #12
 8000920:	4013      	ands	r3, r2
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000926:	193b      	adds	r3, r7, r4
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	0092      	lsls	r2, r2, #2
 800092c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	0021      	movs	r1, r4
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2202      	movs	r2, #2
 8000934:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000948:	187b      	adds	r3, r7, r1
 800094a:	4a06      	ldr	r2, [pc, #24]	; (8000964 <HAL_TIM_MspPostInit+0x7c>)
 800094c:	0019      	movs	r1, r3
 800094e:	0010      	movs	r0, r2
 8000950:	f001 f9b8 	bl	8001cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b009      	add	sp, #36	; 0x24
 800095a:	bd90      	pop	{r4, r7, pc}
 800095c:	40000400 	.word	0x40000400
 8000960:	40021000 	.word	0x40021000
 8000964:	48000800 	.word	0x48000800

08000968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	b08b      	sub	sp, #44	; 0x2c
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	2414      	movs	r4, #20
 8000972:	193b      	adds	r3, r7, r4
 8000974:	0018      	movs	r0, r3
 8000976:	2314      	movs	r3, #20
 8000978:	001a      	movs	r2, r3
 800097a:	2100      	movs	r1, #0
 800097c:	f003 fe36 	bl	80045ec <memset>
  if(huart->Instance==USART2)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a33      	ldr	r2, [pc, #204]	; (8000a54 <HAL_UART_MspInit+0xec>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d160      	bne.n	8000a4c <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098a:	4b33      	ldr	r3, [pc, #204]	; (8000a58 <HAL_UART_MspInit+0xf0>)
 800098c:	69da      	ldr	r2, [r3, #28]
 800098e:	4b32      	ldr	r3, [pc, #200]	; (8000a58 <HAL_UART_MspInit+0xf0>)
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	0289      	lsls	r1, r1, #10
 8000994:	430a      	orrs	r2, r1
 8000996:	61da      	str	r2, [r3, #28]
 8000998:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <HAL_UART_MspInit+0xf0>)
 800099a:	69da      	ldr	r2, [r3, #28]
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	029b      	lsls	r3, r3, #10
 80009a0:	4013      	ands	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <HAL_UART_MspInit+0xf0>)
 80009a8:	695a      	ldr	r2, [r3, #20]
 80009aa:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <HAL_UART_MspInit+0xf0>)
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	0289      	lsls	r1, r1, #10
 80009b0:	430a      	orrs	r2, r1
 80009b2:	615a      	str	r2, [r3, #20]
 80009b4:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <HAL_UART_MspInit+0xf0>)
 80009b6:	695a      	ldr	r2, [r3, #20]
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	029b      	lsls	r3, r3, #10
 80009bc:	4013      	ands	r3, r2
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009c2:	0021      	movs	r1, r4
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	220c      	movs	r2, #12
 80009c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2202      	movs	r2, #2
 80009ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2203      	movs	r2, #3
 80009da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2201      	movs	r2, #1
 80009e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	187a      	adds	r2, r7, r1
 80009e4:	2390      	movs	r3, #144	; 0x90
 80009e6:	05db      	lsls	r3, r3, #23
 80009e8:	0011      	movs	r1, r2
 80009ea:	0018      	movs	r0, r3
 80009ec:	f001 f96a 	bl	8001cc4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <HAL_UART_MspInit+0xf4>)
 80009f2:	4a1b      	ldr	r2, [pc, #108]	; (8000a60 <HAL_UART_MspInit+0xf8>)
 80009f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009f6:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <HAL_UART_MspInit+0xf4>)
 80009f8:	2210      	movs	r2, #16
 80009fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <HAL_UART_MspInit+0xf4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <HAL_UART_MspInit+0xf4>)
 8000a04:	2280      	movs	r2, #128	; 0x80
 8000a06:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <HAL_UART_MspInit+0xf4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <HAL_UART_MspInit+0xf4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <HAL_UART_MspInit+0xf4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <HAL_UART_MspInit+0xf4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_UART_MspInit+0xf4>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 ffca 	bl	80019bc <HAL_DMA_Init>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000a2c:	f7ff fe9a 	bl	8000764 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_UART_MspInit+0xf4>)
 8000a34:	66da      	str	r2, [r3, #108]	; 0x6c
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_UART_MspInit+0xf4>)
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	201c      	movs	r0, #28
 8000a42:	f000 ff89 	bl	8001958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a46:	201c      	movs	r0, #28
 8000a48:	f000 ff9b 	bl	8001982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b00b      	add	sp, #44	; 0x2c
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	40004400 	.word	0x40004400
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	200001dc 	.word	0x200001dc
 8000a60:	40020044 	.word	0x40020044

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <NMI_Handler+0x4>

08000a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <HardFault_Handler+0x4>

08000a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f000 f8e2 	bl	8000c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <DMA1_Channel1_IRQHandler+0x14>)
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f001 f853 	bl	8001b46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	200000cc 	.word	0x200000cc

08000aac <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f001 f847 	bl	8001b46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	200001dc 	.word	0x200001dc

08000ac4 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <ADC1_COMP_IRQHandler+0x14>)
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 fb78 	bl	80011c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	2000008c 	.word	0x2000008c

08000adc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <USART2_IRQHandler+0x14>)
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f002 feb8 	bl	8003858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	20000158 	.word	0x20000158

08000af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000afc:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <_sbrk+0x5c>)
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <_sbrk+0x60>)
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d102      	bne.n	8000b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <_sbrk+0x64>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <_sbrk+0x68>)
 8000b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	18d3      	adds	r3, r2, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d207      	bcs.n	8000b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b24:	f003 fd38 	bl	8004598 <__errno>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	425b      	negs	r3, r3
 8000b32:	e009      	b.n	8000b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	18d2      	adds	r2, r2, r3
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <_sbrk+0x64>)
 8000b44:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	0018      	movs	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b006      	add	sp, #24
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20002000 	.word	0x20002000
 8000b54:	00000400 	.word	0x00000400
 8000b58:	2000022c 	.word	0x2000022c
 8000b5c:	20000248 	.word	0x20000248

08000b60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b6c:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b72:	490e      	ldr	r1, [pc, #56]	; (8000bac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b74:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <LoopForever+0xe>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b88:	4c0b      	ldr	r4, [pc, #44]	; (8000bb8 <LoopForever+0x16>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b96:	f7ff ffe3 	bl	8000b60 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b9a:	f003 fd03 	bl	80045a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b9e:	f7ff fb49 	bl	8000234 <main>

08000ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ba2:	e7fe      	b.n	8000ba2 <LoopForever>
  ldr   r0, =_estack
 8000ba4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bb0:	08004f64 	.word	0x08004f64
  ldr r2, =_sbss
 8000bb4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bb8:	20000244 	.word	0x20000244

08000bbc <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <CEC_CAN_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <HAL_Init+0x24>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_Init+0x24>)
 8000bca:	2110      	movs	r1, #16
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f000 f809 	bl	8000be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd6:	f7ff fdcb 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bda:	2300      	movs	r3, #0
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	40022000 	.word	0x40022000

08000be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_InitTick+0x5c>)
 8000bf2:	681c      	ldr	r4, [r3, #0]
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_InitTick+0x60>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	0019      	movs	r1, r3
 8000bfa:	23fa      	movs	r3, #250	; 0xfa
 8000bfc:	0098      	lsls	r0, r3, #2
 8000bfe:	f7ff fa8d 	bl	800011c <__udivsi3>
 8000c02:	0003      	movs	r3, r0
 8000c04:	0019      	movs	r1, r3
 8000c06:	0020      	movs	r0, r4
 8000c08:	f7ff fa88 	bl	800011c <__udivsi3>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 fec7 	bl	80019a2 <HAL_SYSTICK_Config>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d001      	beq.n	8000c1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e00f      	b.n	8000c3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b03      	cmp	r3, #3
 8000c20:	d80b      	bhi.n	8000c3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	2301      	movs	r3, #1
 8000c26:	425b      	negs	r3, r3
 8000c28:	2200      	movs	r2, #0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 fe94 	bl	8001958 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_InitTick+0x64>)
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	e000      	b.n	8000c3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b003      	add	sp, #12
 8000c42:	bd90      	pop	{r4, r7, pc}
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20000004 	.word	0x20000004

08000c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x1c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	001a      	movs	r2, r3
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <HAL_IncTick+0x20>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	18d2      	adds	r2, r2, r3
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_IncTick+0x20>)
 8000c62:	601a      	str	r2, [r3, #0]
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000230 	.word	0x20000230

08000c74 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b02      	ldr	r3, [pc, #8]	; (8000c84 <HAL_GetTick+0x10>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	20000230 	.word	0x20000230

08000c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c90:	f7ff fff0 	bl	8000c74 <HAL_GetTick>
 8000c94:	0003      	movs	r3, r0
 8000c96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	d005      	beq.n	8000cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_Delay+0x44>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	001a      	movs	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	189b      	adds	r3, r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	f7ff ffe0 	bl	8000c74 <HAL_GetTick>
 8000cb4:	0002      	movs	r2, r0
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d8f7      	bhi.n	8000cb0 <HAL_Delay+0x28>
  {
  }
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b004      	add	sp, #16
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	20000008 	.word	0x20000008

08000cd0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd8:	230f      	movs	r3, #15
 8000cda:	18fb      	adds	r3, r7, r3
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e125      	b.n	8000f3a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d10a      	bne.n	8000d0c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2234      	movs	r2, #52	; 0x34
 8000d00:	2100      	movs	r1, #0
 8000d02:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	0018      	movs	r0, r3
 8000d08:	f7ff fd56 	bl	80007b8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d10:	2210      	movs	r2, #16
 8000d12:	4013      	ands	r3, r2
 8000d14:	d000      	beq.n	8000d18 <HAL_ADC_Init+0x48>
 8000d16:	e103      	b.n	8000f20 <HAL_ADC_Init+0x250>
 8000d18:	230f      	movs	r3, #15
 8000d1a:	18fb      	adds	r3, r7, r3
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d000      	beq.n	8000d24 <HAL_ADC_Init+0x54>
 8000d22:	e0fd      	b.n	8000f20 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000d2e:	d000      	beq.n	8000d32 <HAL_ADC_Init+0x62>
 8000d30:	e0f6      	b.n	8000f20 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d36:	4a83      	ldr	r2, [pc, #524]	; (8000f44 <HAL_ADC_Init+0x274>)
 8000d38:	4013      	ands	r3, r2
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	2203      	movs	r2, #3
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d112      	bne.n	8000d76 <HAL_ADC_Init+0xa6>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2201      	movs	r2, #1
 8000d58:	4013      	ands	r3, r2
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d009      	beq.n	8000d72 <HAL_ADC_Init+0xa2>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	68da      	ldr	r2, [r3, #12]
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	021b      	lsls	r3, r3, #8
 8000d68:	401a      	ands	r2, r3
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d101      	bne.n	8000d76 <HAL_ADC_Init+0xa6>
 8000d72:	2301      	movs	r3, #1
 8000d74:	e000      	b.n	8000d78 <HAL_ADC_Init+0xa8>
 8000d76:	2300      	movs	r3, #0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d116      	bne.n	8000daa <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	2218      	movs	r2, #24
 8000d84:	4393      	bics	r3, r2
 8000d86:	0019      	movs	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	430a      	orrs	r2, r1
 8000d92:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	0899      	lsrs	r1, r3, #2
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	430a      	orrs	r2, r1
 8000da8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4964      	ldr	r1, [pc, #400]	; (8000f48 <HAL_ADC_Init+0x278>)
 8000db6:	400a      	ands	r2, r1
 8000db8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	7e1b      	ldrb	r3, [r3, #24]
 8000dbe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7e5b      	ldrb	r3, [r3, #25]
 8000dc4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000dc6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	7e9b      	ldrb	r3, [r3, #26]
 8000dcc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000dce:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d002      	beq.n	8000dde <HAL_ADC_Init+0x10e>
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	015b      	lsls	r3, r3, #5
 8000ddc:	e000      	b.n	8000de0 <HAL_ADC_Init+0x110>
 8000dde:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000de0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000de6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d101      	bne.n	8000df4 <HAL_ADC_Init+0x124>
 8000df0:	2304      	movs	r3, #4
 8000df2:	e000      	b.n	8000df6 <HAL_ADC_Init+0x126>
 8000df4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000df6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2124      	movs	r1, #36	; 0x24
 8000dfc:	5c5b      	ldrb	r3, [r3, r1]
 8000dfe:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e00:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	7edb      	ldrb	r3, [r3, #27]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d115      	bne.n	8000e3c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	7e9b      	ldrb	r3, [r3, #26]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d105      	bne.n	8000e24 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	2280      	movs	r2, #128	; 0x80
 8000e1c:	0252      	lsls	r2, r2, #9
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	e00b      	b.n	8000e3c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e28:	2220      	movs	r2, #32
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e34:	2201      	movs	r2, #1
 8000e36:	431a      	orrs	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69da      	ldr	r2, [r3, #28]
 8000e40:	23c2      	movs	r3, #194	; 0xc2
 8000e42:	33ff      	adds	r3, #255	; 0xff
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d007      	beq.n	8000e58 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000e50:	4313      	orrs	r3, r2
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	68d9      	ldr	r1, [r3, #12]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	430a      	orrs	r2, r1
 8000e66:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	055b      	lsls	r3, r3, #21
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d01b      	beq.n	8000eac <HAL_ADC_Init+0x1dc>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d017      	beq.n	8000eac <HAL_ADC_Init+0x1dc>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d013      	beq.n	8000eac <HAL_ADC_Init+0x1dc>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d00f      	beq.n	8000eac <HAL_ADC_Init+0x1dc>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e90:	2b04      	cmp	r3, #4
 8000e92:	d00b      	beq.n	8000eac <HAL_ADC_Init+0x1dc>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	d007      	beq.n	8000eac <HAL_ADC_Init+0x1dc>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea0:	2b06      	cmp	r3, #6
 8000ea2:	d003      	beq.n	8000eac <HAL_ADC_Init+0x1dc>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea8:	2b07      	cmp	r3, #7
 8000eaa:	d112      	bne.n	8000ed2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	695a      	ldr	r2, [r3, #20]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2107      	movs	r1, #7
 8000eb8:	438a      	bics	r2, r1
 8000eba:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6959      	ldr	r1, [r3, #20]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec6:	2207      	movs	r2, #7
 8000ec8:	401a      	ands	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	4a1c      	ldr	r2, [pc, #112]	; (8000f4c <HAL_ADC_Init+0x27c>)
 8000eda:	4013      	ands	r3, r2
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d10b      	bne.n	8000efa <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eec:	2203      	movs	r2, #3
 8000eee:	4393      	bics	r3, r2
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000ef8:	e01c      	b.n	8000f34 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000efe:	2212      	movs	r2, #18
 8000f00:	4393      	bics	r3, r2
 8000f02:	2210      	movs	r2, #16
 8000f04:	431a      	orrs	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f0e:	2201      	movs	r2, #1
 8000f10:	431a      	orrs	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000f16:	230f      	movs	r3, #15
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f1e:	e009      	b.n	8000f34 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f24:	2210      	movs	r2, #16
 8000f26:	431a      	orrs	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f34:	230f      	movs	r3, #15
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	781b      	ldrb	r3, [r3, #0]
}
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b004      	add	sp, #16
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	fffffefd 	.word	0xfffffefd
 8000f48:	fffe0219 	.word	0xfffe0219
 8000f4c:	833fffe7 	.word	0x833fffe7

08000f50 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f58:	230f      	movs	r3, #15
 8000f5a:	18fb      	adds	r3, r7, r3
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	2204      	movs	r2, #4
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d138      	bne.n	8000fde <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2234      	movs	r2, #52	; 0x34
 8000f70:	5c9b      	ldrb	r3, [r3, r2]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d101      	bne.n	8000f7a <HAL_ADC_Start+0x2a>
 8000f76:	2302      	movs	r3, #2
 8000f78:	e038      	b.n	8000fec <HAL_ADC_Start+0x9c>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2234      	movs	r2, #52	; 0x34
 8000f7e:	2101      	movs	r1, #1
 8000f80:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	7e5b      	ldrb	r3, [r3, #25]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d007      	beq.n	8000f9a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000f8a:	230f      	movs	r3, #15
 8000f8c:	18fc      	adds	r4, r7, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	0018      	movs	r0, r3
 8000f92:	f000 faf3 	bl	800157c <ADC_Enable>
 8000f96:	0003      	movs	r3, r0
 8000f98:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f9a:	230f      	movs	r3, #15
 8000f9c:	18fb      	adds	r3, r7, r3
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d120      	bne.n	8000fe6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa8:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <HAL_ADC_Start+0xa4>)
 8000faa:	4013      	ands	r3, r2
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	0052      	lsls	r2, r2, #1
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2234      	movs	r2, #52	; 0x34
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	221c      	movs	r2, #28
 8000fca:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	e003      	b.n	8000fe6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000fde:	230f      	movs	r3, #15
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	781b      	ldrb	r3, [r3, #0]
}
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b005      	add	sp, #20
 8000ff2:	bd90      	pop	{r4, r7, pc}
 8000ff4:	fffff0fe 	.word	0xfffff0fe

08000ff8 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001000:	230f      	movs	r3, #15
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2234      	movs	r2, #52	; 0x34
 800100c:	5c9b      	ldrb	r3, [r3, r2]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d101      	bne.n	8001016 <HAL_ADC_Stop+0x1e>
 8001012:	2302      	movs	r3, #2
 8001014:	e029      	b.n	800106a <HAL_ADC_Stop+0x72>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2234      	movs	r2, #52	; 0x34
 800101a:	2101      	movs	r1, #1
 800101c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800101e:	250f      	movs	r5, #15
 8001020:	197c      	adds	r4, r7, r5
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	0018      	movs	r0, r3
 8001026:	f000 fb9e 	bl	8001766 <ADC_ConversionStop>
 800102a:	0003      	movs	r3, r0
 800102c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800102e:	197b      	adds	r3, r7, r5
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d112      	bne.n	800105c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001036:	197c      	adds	r4, r7, r5
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	0018      	movs	r0, r3
 800103c:	f000 fb22 	bl	8001684 <ADC_Disable>
 8001040:	0003      	movs	r3, r0
 8001042:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001044:	197b      	adds	r3, r7, r5
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d107      	bne.n	800105c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001050:	4a08      	ldr	r2, [pc, #32]	; (8001074 <HAL_ADC_Stop+0x7c>)
 8001052:	4013      	ands	r3, r2
 8001054:	2201      	movs	r2, #1
 8001056:	431a      	orrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2234      	movs	r2, #52	; 0x34
 8001060:	2100      	movs	r1, #0
 8001062:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001064:	230f      	movs	r3, #15
 8001066:	18fb      	adds	r3, r7, r3
 8001068:	781b      	ldrb	r3, [r3, #0]
}
 800106a:	0018      	movs	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	b004      	add	sp, #16
 8001070:	bdb0      	pop	{r4, r5, r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	fffffefe 	.word	0xfffffefe

08001078 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	2b08      	cmp	r3, #8
 8001088:	d102      	bne.n	8001090 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800108a:	2308      	movs	r3, #8
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	e014      	b.n	80010ba <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	2201      	movs	r2, #1
 8001098:	4013      	ands	r3, r2
 800109a:	2b01      	cmp	r3, #1
 800109c:	d10b      	bne.n	80010b6 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a2:	2220      	movs	r2, #32
 80010a4:	431a      	orrs	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2234      	movs	r2, #52	; 0x34
 80010ae:	2100      	movs	r1, #0
 80010b0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e071      	b.n	800119a <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80010b6:	230c      	movs	r3, #12
 80010b8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80010ba:	f7ff fddb 	bl	8000c74 <HAL_GetTick>
 80010be:	0003      	movs	r3, r0
 80010c0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010c2:	e01f      	b.n	8001104 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	d01c      	beq.n	8001104 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d007      	beq.n	80010e0 <HAL_ADC_PollForConversion+0x68>
 80010d0:	f7ff fdd0 	bl	8000c74 <HAL_GetTick>
 80010d4:	0002      	movs	r2, r0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d211      	bcs.n	8001104 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	4013      	ands	r3, r2
 80010ea:	d10b      	bne.n	8001104 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f0:	2204      	movs	r2, #4
 80010f2:	431a      	orrs	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2234      	movs	r2, #52	; 0x34
 80010fc:	2100      	movs	r1, #0
 80010fe:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e04a      	b.n	800119a <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4013      	ands	r3, r2
 800110e:	d0d9      	beq.n	80010c4 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001114:	2280      	movs	r2, #128	; 0x80
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	431a      	orrs	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	23c0      	movs	r3, #192	; 0xc0
 8001126:	011b      	lsls	r3, r3, #4
 8001128:	4013      	ands	r3, r2
 800112a:	d12d      	bne.n	8001188 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001130:	2b00      	cmp	r3, #0
 8001132:	d129      	bne.n	8001188 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2208      	movs	r2, #8
 800113c:	4013      	ands	r3, r2
 800113e:	2b08      	cmp	r3, #8
 8001140:	d122      	bne.n	8001188 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	2204      	movs	r2, #4
 800114a:	4013      	ands	r3, r2
 800114c:	d110      	bne.n	8001170 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	210c      	movs	r1, #12
 800115a:	438a      	bics	r2, r1
 800115c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001162:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <HAL_ADC_PollForConversion+0x12c>)
 8001164:	4013      	ands	r3, r2
 8001166:	2201      	movs	r2, #1
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	639a      	str	r2, [r3, #56]	; 0x38
 800116e:	e00b      	b.n	8001188 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001174:	2220      	movs	r2, #32
 8001176:	431a      	orrs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001180:	2201      	movs	r2, #1
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	7e1b      	ldrb	r3, [r3, #24]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d103      	bne.n	8001198 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	220c      	movs	r2, #12
 8001196:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	0018      	movs	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	b004      	add	sp, #16
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	fffffefe 	.word	0xfffffefe

080011a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80011b6:	0018      	movs	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b002      	add	sp, #8
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2204      	movs	r2, #4
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d106      	bne.n	80011e4 <HAL_ADC_IRQHandler+0x24>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2204      	movs	r2, #4
 80011de:	4013      	ands	r3, r2
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d00d      	beq.n	8001200 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2208      	movs	r2, #8
 80011ec:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d14f      	bne.n	8001292 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2208      	movs	r2, #8
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d148      	bne.n	8001292 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001204:	2210      	movs	r2, #16
 8001206:	4013      	ands	r3, r2
 8001208:	d106      	bne.n	8001218 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800120e:	2280      	movs	r2, #128	; 0x80
 8001210:	0092      	lsls	r2, r2, #2
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68da      	ldr	r2, [r3, #12]
 800121e:	23c0      	movs	r3, #192	; 0xc0
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	4013      	ands	r3, r2
 8001224:	d12d      	bne.n	8001282 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800122a:	2b00      	cmp	r3, #0
 800122c:	d129      	bne.n	8001282 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2208      	movs	r2, #8
 8001236:	4013      	ands	r3, r2
 8001238:	2b08      	cmp	r3, #8
 800123a:	d122      	bne.n	8001282 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2204      	movs	r2, #4
 8001244:	4013      	ands	r3, r2
 8001246:	d110      	bne.n	800126a <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	210c      	movs	r1, #12
 8001254:	438a      	bics	r2, r1
 8001256:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125c:	4a33      	ldr	r2, [pc, #204]	; (800132c <HAL_ADC_IRQHandler+0x16c>)
 800125e:	4013      	ands	r3, r2
 8001260:	2201      	movs	r2, #1
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	639a      	str	r2, [r3, #56]	; 0x38
 8001268:	e00b      	b.n	8001282 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126e:	2220      	movs	r2, #32
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800127a:	2201      	movs	r2, #1
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	0018      	movs	r0, r3
 8001286:	f000 f853 	bl	8001330 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	220c      	movs	r2, #12
 8001290:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2280      	movs	r2, #128	; 0x80
 800129a:	4013      	ands	r3, r2
 800129c:	2b80      	cmp	r3, #128	; 0x80
 800129e:	d115      	bne.n	80012cc <HAL_ADC_IRQHandler+0x10c>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b80      	cmp	r3, #128	; 0x80
 80012ac:	d10e      	bne.n	80012cc <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	0252      	lsls	r2, r2, #9
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	0018      	movs	r0, r3
 80012c0:	f000 f83e 	bl	8001340 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2280      	movs	r2, #128	; 0x80
 80012ca:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2210      	movs	r2, #16
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b10      	cmp	r3, #16
 80012d8:	d123      	bne.n	8001322 <HAL_ADC_IRQHandler+0x162>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2210      	movs	r2, #16
 80012e2:	4013      	ands	r3, r2
 80012e4:	2b10      	cmp	r3, #16
 80012e6:	d11c      	bne.n	8001322 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d006      	beq.n	80012fe <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2201      	movs	r2, #1
 80012f8:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d10d      	bne.n	800131a <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001302:	2202      	movs	r2, #2
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2210      	movs	r2, #16
 8001310:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	0018      	movs	r0, r3
 8001316:	f000 f81b 	bl	8001350 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2210      	movs	r2, #16
 8001320:	601a      	str	r2, [r3, #0]
  }

}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	b002      	add	sp, #8
 8001328:	bd80      	pop	{r7, pc}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	fffffefe 	.word	0xfffffefe

08001330 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	b002      	add	sp, #8
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b002      	add	sp, #8
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001358:	46c0      	nop			; (mov r8, r8)
 800135a:	46bd      	mov	sp, r7
 800135c:	b002      	add	sp, #8
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800136a:	230f      	movs	r3, #15
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800137a:	2380      	movs	r3, #128	; 0x80
 800137c:	055b      	lsls	r3, r3, #21
 800137e:	429a      	cmp	r2, r3
 8001380:	d011      	beq.n	80013a6 <HAL_ADC_ConfigChannel+0x46>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	2b01      	cmp	r3, #1
 8001388:	d00d      	beq.n	80013a6 <HAL_ADC_ConfigChannel+0x46>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138e:	2b02      	cmp	r3, #2
 8001390:	d009      	beq.n	80013a6 <HAL_ADC_ConfigChannel+0x46>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	2b03      	cmp	r3, #3
 8001398:	d005      	beq.n	80013a6 <HAL_ADC_ConfigChannel+0x46>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d001      	beq.n	80013a6 <HAL_ADC_ConfigChannel+0x46>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2234      	movs	r2, #52	; 0x34
 80013aa:	5c9b      	ldrb	r3, [r3, r2]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x54>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e0d0      	b.n	8001556 <HAL_ADC_ConfigChannel+0x1f6>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2234      	movs	r2, #52	; 0x34
 80013b8:	2101      	movs	r1, #1
 80013ba:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2204      	movs	r2, #4
 80013c4:	4013      	ands	r3, r2
 80013c6:	d000      	beq.n	80013ca <HAL_ADC_ConfigChannel+0x6a>
 80013c8:	e0b4      	b.n	8001534 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4a64      	ldr	r2, [pc, #400]	; (8001560 <HAL_ADC_ConfigChannel+0x200>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d100      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x76>
 80013d4:	e082      	b.n	80014dc <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2201      	movs	r2, #1
 80013e2:	409a      	lsls	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	055b      	lsls	r3, r3, #21
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d037      	beq.n	8001468 <HAL_ADC_ConfigChannel+0x108>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d033      	beq.n	8001468 <HAL_ADC_ConfigChannel+0x108>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001404:	2b02      	cmp	r3, #2
 8001406:	d02f      	beq.n	8001468 <HAL_ADC_ConfigChannel+0x108>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	2b03      	cmp	r3, #3
 800140e:	d02b      	beq.n	8001468 <HAL_ADC_ConfigChannel+0x108>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001414:	2b04      	cmp	r3, #4
 8001416:	d027      	beq.n	8001468 <HAL_ADC_ConfigChannel+0x108>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141c:	2b05      	cmp	r3, #5
 800141e:	d023      	beq.n	8001468 <HAL_ADC_ConfigChannel+0x108>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001424:	2b06      	cmp	r3, #6
 8001426:	d01f      	beq.n	8001468 <HAL_ADC_ConfigChannel+0x108>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	2b07      	cmp	r3, #7
 800142e:	d01b      	beq.n	8001468 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	2107      	movs	r1, #7
 800143c:	400b      	ands	r3, r1
 800143e:	429a      	cmp	r2, r3
 8001440:	d012      	beq.n	8001468 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	695a      	ldr	r2, [r3, #20]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2107      	movs	r1, #7
 800144e:	438a      	bics	r2, r1
 8001450:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6959      	ldr	r1, [r3, #20]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2207      	movs	r2, #7
 800145e:	401a      	ands	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b10      	cmp	r3, #16
 800146e:	d007      	beq.n	8001480 <HAL_ADC_ConfigChannel+0x120>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b11      	cmp	r3, #17
 8001476:	d003      	beq.n	8001480 <HAL_ADC_ConfigChannel+0x120>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b12      	cmp	r3, #18
 800147e:	d163      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001480:	4b38      	ldr	r3, [pc, #224]	; (8001564 <HAL_ADC_ConfigChannel+0x204>)
 8001482:	6819      	ldr	r1, [r3, #0]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b10      	cmp	r3, #16
 800148a:	d009      	beq.n	80014a0 <HAL_ADC_ConfigChannel+0x140>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b11      	cmp	r3, #17
 8001492:	d102      	bne.n	800149a <HAL_ADC_ConfigChannel+0x13a>
 8001494:	2380      	movs	r3, #128	; 0x80
 8001496:	03db      	lsls	r3, r3, #15
 8001498:	e004      	b.n	80014a4 <HAL_ADC_ConfigChannel+0x144>
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	045b      	lsls	r3, r3, #17
 800149e:	e001      	b.n	80014a4 <HAL_ADC_ConfigChannel+0x144>
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	041b      	lsls	r3, r3, #16
 80014a4:	4a2f      	ldr	r2, [pc, #188]	; (8001564 <HAL_ADC_ConfigChannel+0x204>)
 80014a6:	430b      	orrs	r3, r1
 80014a8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b10      	cmp	r3, #16
 80014b0:	d14a      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014b2:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <HAL_ADC_ConfigChannel+0x208>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	492d      	ldr	r1, [pc, #180]	; (800156c <HAL_ADC_ConfigChannel+0x20c>)
 80014b8:	0018      	movs	r0, r3
 80014ba:	f7fe fe2f 	bl	800011c <__udivsi3>
 80014be:	0003      	movs	r3, r0
 80014c0:	001a      	movs	r2, r3
 80014c2:	0013      	movs	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	189b      	adds	r3, r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014cc:	e002      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f9      	bne.n	80014ce <HAL_ADC_ConfigChannel+0x16e>
 80014da:	e035      	b.n	8001548 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2101      	movs	r1, #1
 80014e8:	4099      	lsls	r1, r3
 80014ea:	000b      	movs	r3, r1
 80014ec:	43d9      	mvns	r1, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	400a      	ands	r2, r1
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b10      	cmp	r3, #16
 80014fc:	d007      	beq.n	800150e <HAL_ADC_ConfigChannel+0x1ae>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b11      	cmp	r3, #17
 8001504:	d003      	beq.n	800150e <HAL_ADC_ConfigChannel+0x1ae>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b12      	cmp	r3, #18
 800150c:	d11c      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_ADC_ConfigChannel+0x204>)
 8001510:	6819      	ldr	r1, [r3, #0]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b10      	cmp	r3, #16
 8001518:	d007      	beq.n	800152a <HAL_ADC_ConfigChannel+0x1ca>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b11      	cmp	r3, #17
 8001520:	d101      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x1c6>
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_ADC_ConfigChannel+0x210>)
 8001524:	e002      	b.n	800152c <HAL_ADC_ConfigChannel+0x1cc>
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <HAL_ADC_ConfigChannel+0x214>)
 8001528:	e000      	b.n	800152c <HAL_ADC_ConfigChannel+0x1cc>
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <HAL_ADC_ConfigChannel+0x218>)
 800152c:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <HAL_ADC_ConfigChannel+0x204>)
 800152e:	400b      	ands	r3, r1
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	e009      	b.n	8001548 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001538:	2220      	movs	r2, #32
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001540:	230f      	movs	r3, #15
 8001542:	18fb      	adds	r3, r7, r3
 8001544:	2201      	movs	r2, #1
 8001546:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2234      	movs	r2, #52	; 0x34
 800154c:	2100      	movs	r1, #0
 800154e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001550:	230f      	movs	r3, #15
 8001552:	18fb      	adds	r3, r7, r3
 8001554:	781b      	ldrb	r3, [r3, #0]
}
 8001556:	0018      	movs	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	b004      	add	sp, #16
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	00001001 	.word	0x00001001
 8001564:	40012708 	.word	0x40012708
 8001568:	20000000 	.word	0x20000000
 800156c:	000f4240 	.word	0x000f4240
 8001570:	ffbfffff 	.word	0xffbfffff
 8001574:	feffffff 	.word	0xfeffffff
 8001578:	ff7fffff 	.word	0xff7fffff

0800157c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2203      	movs	r2, #3
 8001594:	4013      	ands	r3, r2
 8001596:	2b01      	cmp	r3, #1
 8001598:	d112      	bne.n	80015c0 <ADC_Enable+0x44>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2201      	movs	r2, #1
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d009      	beq.n	80015bc <ADC_Enable+0x40>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	401a      	ands	r2, r3
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d101      	bne.n	80015c0 <ADC_Enable+0x44>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <ADC_Enable+0x46>
 80015c0:	2300      	movs	r3, #0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d152      	bne.n	800166c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4a2a      	ldr	r2, [pc, #168]	; (8001678 <ADC_Enable+0xfc>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	d00d      	beq.n	80015ee <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d6:	2210      	movs	r2, #16
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e2:	2201      	movs	r2, #1
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e03f      	b.n	800166e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2101      	movs	r1, #1
 80015fa:	430a      	orrs	r2, r1
 80015fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <ADC_Enable+0x100>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	491f      	ldr	r1, [pc, #124]	; (8001680 <ADC_Enable+0x104>)
 8001604:	0018      	movs	r0, r3
 8001606:	f7fe fd89 	bl	800011c <__udivsi3>
 800160a:	0003      	movs	r3, r0
 800160c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800160e:	e002      	b.n	8001616 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	3b01      	subs	r3, #1
 8001614:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1f9      	bne.n	8001610 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800161c:	f7ff fb2a 	bl	8000c74 <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001624:	e01b      	b.n	800165e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001626:	f7ff fb25 	bl	8000c74 <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d914      	bls.n	800165e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2201      	movs	r2, #1
 800163c:	4013      	ands	r3, r2
 800163e:	2b01      	cmp	r3, #1
 8001640:	d00d      	beq.n	800165e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001646:	2210      	movs	r2, #16
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001652:	2201      	movs	r2, #1
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e007      	b.n	800166e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2201      	movs	r2, #1
 8001666:	4013      	ands	r3, r2
 8001668:	2b01      	cmp	r3, #1
 800166a:	d1dc      	bne.n	8001626 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	0018      	movs	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	b004      	add	sp, #16
 8001674:	bd80      	pop	{r7, pc}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	80000017 	.word	0x80000017
 800167c:	20000000 	.word	0x20000000
 8001680:	000f4240 	.word	0x000f4240

08001684 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2203      	movs	r2, #3
 8001698:	4013      	ands	r3, r2
 800169a:	2b01      	cmp	r3, #1
 800169c:	d112      	bne.n	80016c4 <ADC_Disable+0x40>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2201      	movs	r2, #1
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d009      	beq.n	80016c0 <ADC_Disable+0x3c>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	401a      	ands	r2, r3
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	429a      	cmp	r2, r3
 80016be:	d101      	bne.n	80016c4 <ADC_Disable+0x40>
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <ADC_Disable+0x42>
 80016c4:	2300      	movs	r3, #0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d048      	beq.n	800175c <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2205      	movs	r2, #5
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d110      	bne.n	80016fa <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2102      	movs	r1, #2
 80016e4:	430a      	orrs	r2, r1
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2203      	movs	r2, #3
 80016ee:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016f0:	f7ff fac0 	bl	8000c74 <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80016f8:	e029      	b.n	800174e <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fe:	2210      	movs	r2, #16
 8001700:	431a      	orrs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170a:	2201      	movs	r2, #1
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e023      	b.n	800175e <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001716:	f7ff faad 	bl	8000c74 <HAL_GetTick>
 800171a:	0002      	movs	r2, r0
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d914      	bls.n	800174e <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2201      	movs	r2, #1
 800172c:	4013      	ands	r3, r2
 800172e:	2b01      	cmp	r3, #1
 8001730:	d10d      	bne.n	800174e <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001736:	2210      	movs	r2, #16
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001742:	2201      	movs	r2, #1
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e007      	b.n	800175e <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2201      	movs	r2, #1
 8001756:	4013      	ands	r3, r2
 8001758:	2b01      	cmp	r3, #1
 800175a:	d0dc      	beq.n	8001716 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	0018      	movs	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	b004      	add	sp, #16
 8001764:	bd80      	pop	{r7, pc}

08001766 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2204      	movs	r2, #4
 800177a:	4013      	ands	r3, r2
 800177c:	d03a      	beq.n	80017f4 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2204      	movs	r2, #4
 8001786:	4013      	ands	r3, r2
 8001788:	2b04      	cmp	r3, #4
 800178a:	d10d      	bne.n	80017a8 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2202      	movs	r2, #2
 8001794:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001796:	d107      	bne.n	80017a8 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2110      	movs	r1, #16
 80017a4:	430a      	orrs	r2, r1
 80017a6:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017a8:	f7ff fa64 	bl	8000c74 <HAL_GetTick>
 80017ac:	0003      	movs	r3, r0
 80017ae:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80017b0:	e01a      	b.n	80017e8 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80017b2:	f7ff fa5f 	bl	8000c74 <HAL_GetTick>
 80017b6:	0002      	movs	r2, r0
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d913      	bls.n	80017e8 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2204      	movs	r2, #4
 80017c8:	4013      	ands	r3, r2
 80017ca:	d00d      	beq.n	80017e8 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d0:	2210      	movs	r2, #16
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017dc:	2201      	movs	r2, #1
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e006      	b.n	80017f6 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2204      	movs	r2, #4
 80017f0:	4013      	ands	r3, r2
 80017f2:	d1de      	bne.n	80017b2 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	0018      	movs	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b004      	add	sp, #16
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	0002      	movs	r2, r0
 8001808:	1dfb      	adds	r3, r7, #7
 800180a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800180c:	1dfb      	adds	r3, r7, #7
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b7f      	cmp	r3, #127	; 0x7f
 8001812:	d809      	bhi.n	8001828 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001814:	1dfb      	adds	r3, r7, #7
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	001a      	movs	r2, r3
 800181a:	231f      	movs	r3, #31
 800181c:	401a      	ands	r2, r3
 800181e:	4b04      	ldr	r3, [pc, #16]	; (8001830 <__NVIC_EnableIRQ+0x30>)
 8001820:	2101      	movs	r1, #1
 8001822:	4091      	lsls	r1, r2
 8001824:	000a      	movs	r2, r1
 8001826:	601a      	str	r2, [r3, #0]
  }
}
 8001828:	46c0      	nop			; (mov r8, r8)
 800182a:	46bd      	mov	sp, r7
 800182c:	b002      	add	sp, #8
 800182e:	bd80      	pop	{r7, pc}
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	0002      	movs	r2, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	1dfb      	adds	r3, r7, #7
 8001840:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001842:	1dfb      	adds	r3, r7, #7
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b7f      	cmp	r3, #127	; 0x7f
 8001848:	d828      	bhi.n	800189c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800184a:	4a2f      	ldr	r2, [pc, #188]	; (8001908 <__NVIC_SetPriority+0xd4>)
 800184c:	1dfb      	adds	r3, r7, #7
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b25b      	sxtb	r3, r3
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	33c0      	adds	r3, #192	; 0xc0
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	589b      	ldr	r3, [r3, r2]
 800185a:	1dfa      	adds	r2, r7, #7
 800185c:	7812      	ldrb	r2, [r2, #0]
 800185e:	0011      	movs	r1, r2
 8001860:	2203      	movs	r2, #3
 8001862:	400a      	ands	r2, r1
 8001864:	00d2      	lsls	r2, r2, #3
 8001866:	21ff      	movs	r1, #255	; 0xff
 8001868:	4091      	lsls	r1, r2
 800186a:	000a      	movs	r2, r1
 800186c:	43d2      	mvns	r2, r2
 800186e:	401a      	ands	r2, r3
 8001870:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	019b      	lsls	r3, r3, #6
 8001876:	22ff      	movs	r2, #255	; 0xff
 8001878:	401a      	ands	r2, r3
 800187a:	1dfb      	adds	r3, r7, #7
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	0018      	movs	r0, r3
 8001880:	2303      	movs	r3, #3
 8001882:	4003      	ands	r3, r0
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001888:	481f      	ldr	r0, [pc, #124]	; (8001908 <__NVIC_SetPriority+0xd4>)
 800188a:	1dfb      	adds	r3, r7, #7
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b25b      	sxtb	r3, r3
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	430a      	orrs	r2, r1
 8001894:	33c0      	adds	r3, #192	; 0xc0
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800189a:	e031      	b.n	8001900 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800189c:	4a1b      	ldr	r2, [pc, #108]	; (800190c <__NVIC_SetPriority+0xd8>)
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	0019      	movs	r1, r3
 80018a4:	230f      	movs	r3, #15
 80018a6:	400b      	ands	r3, r1
 80018a8:	3b08      	subs	r3, #8
 80018aa:	089b      	lsrs	r3, r3, #2
 80018ac:	3306      	adds	r3, #6
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	18d3      	adds	r3, r2, r3
 80018b2:	3304      	adds	r3, #4
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	1dfa      	adds	r2, r7, #7
 80018b8:	7812      	ldrb	r2, [r2, #0]
 80018ba:	0011      	movs	r1, r2
 80018bc:	2203      	movs	r2, #3
 80018be:	400a      	ands	r2, r1
 80018c0:	00d2      	lsls	r2, r2, #3
 80018c2:	21ff      	movs	r1, #255	; 0xff
 80018c4:	4091      	lsls	r1, r2
 80018c6:	000a      	movs	r2, r1
 80018c8:	43d2      	mvns	r2, r2
 80018ca:	401a      	ands	r2, r3
 80018cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	019b      	lsls	r3, r3, #6
 80018d2:	22ff      	movs	r2, #255	; 0xff
 80018d4:	401a      	ands	r2, r3
 80018d6:	1dfb      	adds	r3, r7, #7
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	0018      	movs	r0, r3
 80018dc:	2303      	movs	r3, #3
 80018de:	4003      	ands	r3, r0
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018e4:	4809      	ldr	r0, [pc, #36]	; (800190c <__NVIC_SetPriority+0xd8>)
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	001c      	movs	r4, r3
 80018ec:	230f      	movs	r3, #15
 80018ee:	4023      	ands	r3, r4
 80018f0:	3b08      	subs	r3, #8
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	430a      	orrs	r2, r1
 80018f6:	3306      	adds	r3, #6
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	18c3      	adds	r3, r0, r3
 80018fc:	3304      	adds	r3, #4
 80018fe:	601a      	str	r2, [r3, #0]
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	b003      	add	sp, #12
 8001906:	bd90      	pop	{r4, r7, pc}
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	1e5a      	subs	r2, r3, #1
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	045b      	lsls	r3, r3, #17
 8001920:	429a      	cmp	r2, r3
 8001922:	d301      	bcc.n	8001928 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001924:	2301      	movs	r3, #1
 8001926:	e010      	b.n	800194a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <SysTick_Config+0x44>)
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	3a01      	subs	r2, #1
 800192e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001930:	2301      	movs	r3, #1
 8001932:	425b      	negs	r3, r3
 8001934:	2103      	movs	r1, #3
 8001936:	0018      	movs	r0, r3
 8001938:	f7ff ff7c 	bl	8001834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <SysTick_Config+0x44>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <SysTick_Config+0x44>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001948:	2300      	movs	r3, #0
}
 800194a:	0018      	movs	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	b002      	add	sp, #8
 8001950:	bd80      	pop	{r7, pc}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	e000e010 	.word	0xe000e010

08001958 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	210f      	movs	r1, #15
 8001964:	187b      	adds	r3, r7, r1
 8001966:	1c02      	adds	r2, r0, #0
 8001968:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	187b      	adds	r3, r7, r1
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b25b      	sxtb	r3, r3
 8001972:	0011      	movs	r1, r2
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff ff5d 	bl	8001834 <__NVIC_SetPriority>
}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	b004      	add	sp, #16
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	0002      	movs	r2, r0
 800198a:	1dfb      	adds	r3, r7, #7
 800198c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800198e:	1dfb      	adds	r3, r7, #7
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	b25b      	sxtb	r3, r3
 8001994:	0018      	movs	r0, r3
 8001996:	f7ff ff33 	bl	8001800 <__NVIC_EnableIRQ>
}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	b002      	add	sp, #8
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	0018      	movs	r0, r3
 80019ae:	f7ff ffaf 	bl	8001910 <SysTick_Config>
 80019b2:	0003      	movs	r3, r0
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b002      	add	sp, #8
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e036      	b.n	8001a40 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2221      	movs	r2, #33	; 0x21
 80019d6:	2102      	movs	r1, #2
 80019d8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <HAL_DMA_Init+0x8c>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80019f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	0018      	movs	r0, r3
 8001a24:	f000 f932 	bl	8001c8c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2221      	movs	r2, #33	; 0x21
 8001a32:	2101      	movs	r1, #1
 8001a34:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2220      	movs	r2, #32
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}  
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b004      	add	sp, #16
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	ffffc00f 	.word	0xffffc00f

08001a4c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2221      	movs	r2, #33	; 0x21
 8001a58:	5c9b      	ldrb	r3, [r3, r2]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d008      	beq.n	8001a72 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2204      	movs	r2, #4
 8001a64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e020      	b.n	8001ab4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	210e      	movs	r1, #14
 8001a7e:	438a      	bics	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	438a      	bics	r2, r1
 8001a90:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4091      	lsls	r1, r2
 8001a9e:	000a      	movs	r2, r1
 8001aa0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2221      	movs	r2, #33	; 0x21
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2220      	movs	r2, #32
 8001aae:	2100      	movs	r1, #0
 8001ab0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	b002      	add	sp, #8
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac4:	210f      	movs	r1, #15
 8001ac6:	187b      	adds	r3, r7, r1
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2221      	movs	r2, #33	; 0x21
 8001ad0:	5c9b      	ldrb	r3, [r3, r2]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d006      	beq.n	8001ae6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2204      	movs	r2, #4
 8001adc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ade:	187b      	adds	r3, r7, r1
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
 8001ae4:	e028      	b.n	8001b38 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	210e      	movs	r1, #14
 8001af2:	438a      	bics	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2101      	movs	r1, #1
 8001b02:	438a      	bics	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0e:	2101      	movs	r1, #1
 8001b10:	4091      	lsls	r1, r2
 8001b12:	000a      	movs	r2, r1
 8001b14:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2221      	movs	r2, #33	; 0x21
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2220      	movs	r2, #32
 8001b22:	2100      	movs	r1, #0
 8001b24:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d004      	beq.n	8001b38 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	0010      	movs	r0, r2
 8001b36:	4798      	blx	r3
    } 
  }
  return status;
 8001b38:	230f      	movs	r3, #15
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	781b      	ldrb	r3, [r3, #0]
}
 8001b3e:	0018      	movs	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b004      	add	sp, #16
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	2204      	movs	r2, #4
 8001b64:	409a      	lsls	r2, r3
 8001b66:	0013      	movs	r3, r2
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d024      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x72>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2204      	movs	r2, #4
 8001b72:	4013      	ands	r3, r2
 8001b74:	d020      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d107      	bne.n	8001b92 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	438a      	bics	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9a:	2104      	movs	r1, #4
 8001b9c:	4091      	lsls	r1, r2
 8001b9e:	000a      	movs	r2, r1
 8001ba0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d100      	bne.n	8001bac <HAL_DMA_IRQHandler+0x66>
 8001baa:	e06a      	b.n	8001c82 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	0010      	movs	r0, r2
 8001bb4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001bb6:	e064      	b.n	8001c82 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	0013      	movs	r3, r2
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d02b      	beq.n	8001c20 <HAL_DMA_IRQHandler+0xda>
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d027      	beq.n	8001c20 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d10b      	bne.n	8001bf4 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	210a      	movs	r1, #10
 8001be8:	438a      	bics	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2221      	movs	r2, #33	; 0x21
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfc:	2102      	movs	r1, #2
 8001bfe:	4091      	lsls	r1, r2
 8001c00:	000a      	movs	r2, r1
 8001c02:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2220      	movs	r2, #32
 8001c08:	2100      	movs	r1, #0
 8001c0a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d036      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	0010      	movs	r0, r2
 8001c1c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001c1e:	e030      	b.n	8001c82 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	2208      	movs	r2, #8
 8001c26:	409a      	lsls	r2, r3
 8001c28:	0013      	movs	r3, r2
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d028      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x13c>
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2208      	movs	r2, #8
 8001c34:	4013      	ands	r3, r2
 8001c36:	d024      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	210e      	movs	r1, #14
 8001c44:	438a      	bics	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c50:	2101      	movs	r1, #1
 8001c52:	4091      	lsls	r1, r2
 8001c54:	000a      	movs	r2, r1
 8001c56:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2221      	movs	r2, #33	; 0x21
 8001c62:	2101      	movs	r1, #1
 8001c64:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	0010      	movs	r0, r2
 8001c7e:	4798      	blx	r3
    }
   }
}  
 8001c80:	e7ff      	b.n	8001c82 <HAL_DMA_IRQHandler+0x13c>
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b004      	add	sp, #16
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <DMA_CalcBaseAndBitshift+0x30>)
 8001c9a:	4694      	mov	ip, r2
 8001c9c:	4463      	add	r3, ip
 8001c9e:	2114      	movs	r1, #20
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f7fe fa3b 	bl	800011c <__udivsi3>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	009a      	lsls	r2, r3, #2
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <DMA_CalcBaseAndBitshift+0x34>)
 8001cb2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001cb4:	46c0      	nop			; (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b002      	add	sp, #8
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	bffdfff8 	.word	0xbffdfff8
 8001cc0:	40020000 	.word	0x40020000

08001cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd2:	e14f      	b.n	8001f74 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2101      	movs	r1, #1
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4091      	lsls	r1, r2
 8001cde:	000a      	movs	r2, r1
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d100      	bne.n	8001cec <HAL_GPIO_Init+0x28>
 8001cea:	e140      	b.n	8001f6e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d005      	beq.n	8001d04 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d130      	bne.n	8001d66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	409a      	lsls	r2, r3
 8001d12:	0013      	movs	r3, r2
 8001d14:	43da      	mvns	r2, r3
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	409a      	lsls	r2, r3
 8001d26:	0013      	movs	r3, r2
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	0013      	movs	r3, r2
 8001d42:	43da      	mvns	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	091b      	lsrs	r3, r3, #4
 8001d50:	2201      	movs	r2, #1
 8001d52:	401a      	ands	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	409a      	lsls	r2, r3
 8001d58:	0013      	movs	r3, r2
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d017      	beq.n	8001da2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	0013      	movs	r3, r2
 8001d82:	43da      	mvns	r2, r3
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	409a      	lsls	r2, r3
 8001d94:	0013      	movs	r3, r2
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2203      	movs	r2, #3
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d123      	bne.n	8001df6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	08da      	lsrs	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3208      	adds	r2, #8
 8001db6:	0092      	lsls	r2, r2, #2
 8001db8:	58d3      	ldr	r3, [r2, r3]
 8001dba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2207      	movs	r2, #7
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	0013      	movs	r3, r2
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2107      	movs	r1, #7
 8001dda:	400b      	ands	r3, r1
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	409a      	lsls	r2, r3
 8001de0:	0013      	movs	r3, r2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	08da      	lsrs	r2, r3, #3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3208      	adds	r2, #8
 8001df0:	0092      	lsls	r2, r2, #2
 8001df2:	6939      	ldr	r1, [r7, #16]
 8001df4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	2203      	movs	r2, #3
 8001e02:	409a      	lsls	r2, r3
 8001e04:	0013      	movs	r3, r2
 8001e06:	43da      	mvns	r2, r3
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2203      	movs	r2, #3
 8001e14:	401a      	ands	r2, r3
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	0013      	movs	r3, r2
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	23c0      	movs	r3, #192	; 0xc0
 8001e30:	029b      	lsls	r3, r3, #10
 8001e32:	4013      	ands	r3, r2
 8001e34:	d100      	bne.n	8001e38 <HAL_GPIO_Init+0x174>
 8001e36:	e09a      	b.n	8001f6e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e38:	4b54      	ldr	r3, [pc, #336]	; (8001f8c <HAL_GPIO_Init+0x2c8>)
 8001e3a:	699a      	ldr	r2, [r3, #24]
 8001e3c:	4b53      	ldr	r3, [pc, #332]	; (8001f8c <HAL_GPIO_Init+0x2c8>)
 8001e3e:	2101      	movs	r1, #1
 8001e40:	430a      	orrs	r2, r1
 8001e42:	619a      	str	r2, [r3, #24]
 8001e44:	4b51      	ldr	r3, [pc, #324]	; (8001f8c <HAL_GPIO_Init+0x2c8>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e50:	4a4f      	ldr	r2, [pc, #316]	; (8001f90 <HAL_GPIO_Init+0x2cc>)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	089b      	lsrs	r3, r3, #2
 8001e56:	3302      	adds	r3, #2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	589b      	ldr	r3, [r3, r2]
 8001e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2203      	movs	r2, #3
 8001e62:	4013      	ands	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	220f      	movs	r2, #15
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	0013      	movs	r3, r2
 8001e6c:	43da      	mvns	r2, r3
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	2390      	movs	r3, #144	; 0x90
 8001e78:	05db      	lsls	r3, r3, #23
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d013      	beq.n	8001ea6 <HAL_GPIO_Init+0x1e2>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a44      	ldr	r2, [pc, #272]	; (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00d      	beq.n	8001ea2 <HAL_GPIO_Init+0x1de>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a43      	ldr	r2, [pc, #268]	; (8001f98 <HAL_GPIO_Init+0x2d4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d007      	beq.n	8001e9e <HAL_GPIO_Init+0x1da>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a42      	ldr	r2, [pc, #264]	; (8001f9c <HAL_GPIO_Init+0x2d8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d101      	bne.n	8001e9a <HAL_GPIO_Init+0x1d6>
 8001e96:	2303      	movs	r3, #3
 8001e98:	e006      	b.n	8001ea8 <HAL_GPIO_Init+0x1e4>
 8001e9a:	2305      	movs	r3, #5
 8001e9c:	e004      	b.n	8001ea8 <HAL_GPIO_Init+0x1e4>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e002      	b.n	8001ea8 <HAL_GPIO_Init+0x1e4>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_GPIO_Init+0x1e4>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	2103      	movs	r1, #3
 8001eac:	400a      	ands	r2, r1
 8001eae:	0092      	lsls	r2, r2, #2
 8001eb0:	4093      	lsls	r3, r2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eb8:	4935      	ldr	r1, [pc, #212]	; (8001f90 <HAL_GPIO_Init+0x2cc>)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	089b      	lsrs	r3, r3, #2
 8001ebe:	3302      	adds	r3, #2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ec6:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <HAL_GPIO_Init+0x2dc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	025b      	lsls	r3, r3, #9
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001eea:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <HAL_GPIO_Init+0x2dc>)
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001ef0:	4b2b      	ldr	r3, [pc, #172]	; (8001fa0 <HAL_GPIO_Init+0x2dc>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	43da      	mvns	r2, r3
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	029b      	lsls	r3, r3, #10
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f14:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <HAL_GPIO_Init+0x2dc>)
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f1a:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <HAL_GPIO_Init+0x2dc>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	43da      	mvns	r2, r3
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	035b      	lsls	r3, r3, #13
 8001f32:	4013      	ands	r3, r2
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f3e:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <HAL_GPIO_Init+0x2dc>)
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f44:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <HAL_GPIO_Init+0x2dc>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	43da      	mvns	r2, r3
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	039b      	lsls	r3, r3, #14
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <HAL_GPIO_Init+0x2dc>)
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	3301      	adds	r3, #1
 8001f72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	40da      	lsrs	r2, r3
 8001f7c:	1e13      	subs	r3, r2, #0
 8001f7e:	d000      	beq.n	8001f82 <HAL_GPIO_Init+0x2be>
 8001f80:	e6a8      	b.n	8001cd4 <HAL_GPIO_Init+0x10>
  } 
}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	46c0      	nop			; (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b006      	add	sp, #24
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40010000 	.word	0x40010000
 8001f94:	48000400 	.word	0x48000400
 8001f98:	48000800 	.word	0x48000800
 8001f9c:	48000c00 	.word	0x48000c00
 8001fa0:	40010400 	.word	0x40010400

08001fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	0008      	movs	r0, r1
 8001fae:	0011      	movs	r1, r2
 8001fb0:	1cbb      	adds	r3, r7, #2
 8001fb2:	1c02      	adds	r2, r0, #0
 8001fb4:	801a      	strh	r2, [r3, #0]
 8001fb6:	1c7b      	adds	r3, r7, #1
 8001fb8:	1c0a      	adds	r2, r1, #0
 8001fba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fbc:	1c7b      	adds	r3, r7, #1
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fc4:	1cbb      	adds	r3, r7, #2
 8001fc6:	881a      	ldrh	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fcc:	e003      	b.n	8001fd6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fce:	1cbb      	adds	r3, r7, #2
 8001fd0:	881a      	ldrh	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b002      	add	sp, #8
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	000a      	movs	r2, r1
 8001fe8:	1cbb      	adds	r3, r7, #2
 8001fea:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ff2:	1cbb      	adds	r3, r7, #2
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	041a      	lsls	r2, r3, #16
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	1cb9      	adds	r1, r7, #2
 8002002:	8809      	ldrh	r1, [r1, #0]
 8002004:	400b      	ands	r3, r1
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	619a      	str	r2, [r3, #24]
}
 800200c:	46c0      	nop			; (mov r8, r8)
 800200e:	46bd      	mov	sp, r7
 8002010:	b004      	add	sp, #16
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	0002      	movs	r2, r0
 800201c:	1dbb      	adds	r3, r7, #6
 800201e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	1dba      	adds	r2, r7, #6
 8002026:	8812      	ldrh	r2, [r2, #0]
 8002028:	4013      	ands	r3, r2
 800202a:	d008      	beq.n	800203e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800202e:	1dba      	adds	r2, r7, #6
 8002030:	8812      	ldrh	r2, [r2, #0]
 8002032:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002034:	1dbb      	adds	r3, r7, #6
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	0018      	movs	r0, r3
 800203a:	f000 f807 	bl	800204c <HAL_GPIO_EXTI_Callback>
  }
}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	46bd      	mov	sp, r7
 8002042:	b002      	add	sp, #8
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	40010400 	.word	0x40010400

0800204c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	0002      	movs	r2, r0
 8002054:	1dbb      	adds	r3, r7, #6
 8002056:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8002058:	46c0      	nop			; (mov r8, r8)
 800205a:	46bd      	mov	sp, r7
 800205c:	b002      	add	sp, #8
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e301      	b.n	8002676 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2201      	movs	r2, #1
 8002078:	4013      	ands	r3, r2
 800207a:	d100      	bne.n	800207e <HAL_RCC_OscConfig+0x1e>
 800207c:	e08d      	b.n	800219a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800207e:	4bc3      	ldr	r3, [pc, #780]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	220c      	movs	r2, #12
 8002084:	4013      	ands	r3, r2
 8002086:	2b04      	cmp	r3, #4
 8002088:	d00e      	beq.n	80020a8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800208a:	4bc0      	ldr	r3, [pc, #768]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	220c      	movs	r2, #12
 8002090:	4013      	ands	r3, r2
 8002092:	2b08      	cmp	r3, #8
 8002094:	d116      	bne.n	80020c4 <HAL_RCC_OscConfig+0x64>
 8002096:	4bbd      	ldr	r3, [pc, #756]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	2380      	movs	r3, #128	; 0x80
 800209c:	025b      	lsls	r3, r3, #9
 800209e:	401a      	ands	r2, r3
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	025b      	lsls	r3, r3, #9
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d10d      	bne.n	80020c4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a8:	4bb8      	ldr	r3, [pc, #736]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	029b      	lsls	r3, r3, #10
 80020b0:	4013      	ands	r3, r2
 80020b2:	d100      	bne.n	80020b6 <HAL_RCC_OscConfig+0x56>
 80020b4:	e070      	b.n	8002198 <HAL_RCC_OscConfig+0x138>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d000      	beq.n	80020c0 <HAL_RCC_OscConfig+0x60>
 80020be:	e06b      	b.n	8002198 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e2d8      	b.n	8002676 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d107      	bne.n	80020dc <HAL_RCC_OscConfig+0x7c>
 80020cc:	4baf      	ldr	r3, [pc, #700]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4bae      	ldr	r3, [pc, #696]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 80020d2:	2180      	movs	r1, #128	; 0x80
 80020d4:	0249      	lsls	r1, r1, #9
 80020d6:	430a      	orrs	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	e02f      	b.n	800213c <HAL_RCC_OscConfig+0xdc>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10c      	bne.n	80020fe <HAL_RCC_OscConfig+0x9e>
 80020e4:	4ba9      	ldr	r3, [pc, #676]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4ba8      	ldr	r3, [pc, #672]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 80020ea:	49a9      	ldr	r1, [pc, #676]	; (8002390 <HAL_RCC_OscConfig+0x330>)
 80020ec:	400a      	ands	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	4ba6      	ldr	r3, [pc, #664]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4ba5      	ldr	r3, [pc, #660]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 80020f6:	49a7      	ldr	r1, [pc, #668]	; (8002394 <HAL_RCC_OscConfig+0x334>)
 80020f8:	400a      	ands	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	e01e      	b.n	800213c <HAL_RCC_OscConfig+0xdc>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b05      	cmp	r3, #5
 8002104:	d10e      	bne.n	8002124 <HAL_RCC_OscConfig+0xc4>
 8002106:	4ba1      	ldr	r3, [pc, #644]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	4ba0      	ldr	r3, [pc, #640]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 800210c:	2180      	movs	r1, #128	; 0x80
 800210e:	02c9      	lsls	r1, r1, #11
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	4b9d      	ldr	r3, [pc, #628]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b9c      	ldr	r3, [pc, #624]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 800211a:	2180      	movs	r1, #128	; 0x80
 800211c:	0249      	lsls	r1, r1, #9
 800211e:	430a      	orrs	r2, r1
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	e00b      	b.n	800213c <HAL_RCC_OscConfig+0xdc>
 8002124:	4b99      	ldr	r3, [pc, #612]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b98      	ldr	r3, [pc, #608]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 800212a:	4999      	ldr	r1, [pc, #612]	; (8002390 <HAL_RCC_OscConfig+0x330>)
 800212c:	400a      	ands	r2, r1
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	4b96      	ldr	r3, [pc, #600]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b95      	ldr	r3, [pc, #596]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002136:	4997      	ldr	r1, [pc, #604]	; (8002394 <HAL_RCC_OscConfig+0x334>)
 8002138:	400a      	ands	r2, r1
 800213a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d014      	beq.n	800216e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7fe fd96 	bl	8000c74 <HAL_GetTick>
 8002148:	0003      	movs	r3, r0
 800214a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800214e:	f7fe fd91 	bl	8000c74 <HAL_GetTick>
 8002152:	0002      	movs	r2, r0
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b64      	cmp	r3, #100	; 0x64
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e28a      	b.n	8002676 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002160:	4b8a      	ldr	r3, [pc, #552]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	029b      	lsls	r3, r3, #10
 8002168:	4013      	ands	r3, r2
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0xee>
 800216c:	e015      	b.n	800219a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216e:	f7fe fd81 	bl	8000c74 <HAL_GetTick>
 8002172:	0003      	movs	r3, r0
 8002174:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002178:	f7fe fd7c 	bl	8000c74 <HAL_GetTick>
 800217c:	0002      	movs	r2, r0
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e275      	b.n	8002676 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218a:	4b80      	ldr	r3, [pc, #512]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	029b      	lsls	r3, r3, #10
 8002192:	4013      	ands	r3, r2
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x118>
 8002196:	e000      	b.n	800219a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002198:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2202      	movs	r2, #2
 80021a0:	4013      	ands	r3, r2
 80021a2:	d100      	bne.n	80021a6 <HAL_RCC_OscConfig+0x146>
 80021a4:	e069      	b.n	800227a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021a6:	4b79      	ldr	r3, [pc, #484]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	220c      	movs	r2, #12
 80021ac:	4013      	ands	r3, r2
 80021ae:	d00b      	beq.n	80021c8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021b0:	4b76      	ldr	r3, [pc, #472]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	220c      	movs	r2, #12
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d11c      	bne.n	80021f6 <HAL_RCC_OscConfig+0x196>
 80021bc:	4b73      	ldr	r3, [pc, #460]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	025b      	lsls	r3, r3, #9
 80021c4:	4013      	ands	r3, r2
 80021c6:	d116      	bne.n	80021f6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c8:	4b70      	ldr	r3, [pc, #448]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2202      	movs	r2, #2
 80021ce:	4013      	ands	r3, r2
 80021d0:	d005      	beq.n	80021de <HAL_RCC_OscConfig+0x17e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d001      	beq.n	80021de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e24b      	b.n	8002676 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021de:	4b6b      	ldr	r3, [pc, #428]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	22f8      	movs	r2, #248	; 0xf8
 80021e4:	4393      	bics	r3, r2
 80021e6:	0019      	movs	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	00da      	lsls	r2, r3, #3
 80021ee:	4b67      	ldr	r3, [pc, #412]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f4:	e041      	b.n	800227a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d024      	beq.n	8002248 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021fe:	4b63      	ldr	r3, [pc, #396]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	4b62      	ldr	r3, [pc, #392]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002204:	2101      	movs	r1, #1
 8002206:	430a      	orrs	r2, r1
 8002208:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7fe fd33 	bl	8000c74 <HAL_GetTick>
 800220e:	0003      	movs	r3, r0
 8002210:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002214:	f7fe fd2e 	bl	8000c74 <HAL_GetTick>
 8002218:	0002      	movs	r2, r0
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e227      	b.n	8002676 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002226:	4b59      	ldr	r3, [pc, #356]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2202      	movs	r2, #2
 800222c:	4013      	ands	r3, r2
 800222e:	d0f1      	beq.n	8002214 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002230:	4b56      	ldr	r3, [pc, #344]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	22f8      	movs	r2, #248	; 0xf8
 8002236:	4393      	bics	r3, r2
 8002238:	0019      	movs	r1, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	00da      	lsls	r2, r3, #3
 8002240:	4b52      	ldr	r3, [pc, #328]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002242:	430a      	orrs	r2, r1
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	e018      	b.n	800227a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002248:	4b50      	ldr	r3, [pc, #320]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b4f      	ldr	r3, [pc, #316]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 800224e:	2101      	movs	r1, #1
 8002250:	438a      	bics	r2, r1
 8002252:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7fe fd0e 	bl	8000c74 <HAL_GetTick>
 8002258:	0003      	movs	r3, r0
 800225a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800225e:	f7fe fd09 	bl	8000c74 <HAL_GetTick>
 8002262:	0002      	movs	r2, r0
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e202      	b.n	8002676 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002270:	4b46      	ldr	r3, [pc, #280]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2202      	movs	r2, #2
 8002276:	4013      	ands	r3, r2
 8002278:	d1f1      	bne.n	800225e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2208      	movs	r2, #8
 8002280:	4013      	ands	r3, r2
 8002282:	d036      	beq.n	80022f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d019      	beq.n	80022c0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800228c:	4b3f      	ldr	r3, [pc, #252]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 800228e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002290:	4b3e      	ldr	r3, [pc, #248]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002292:	2101      	movs	r1, #1
 8002294:	430a      	orrs	r2, r1
 8002296:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002298:	f7fe fcec 	bl	8000c74 <HAL_GetTick>
 800229c:	0003      	movs	r3, r0
 800229e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a2:	f7fe fce7 	bl	8000c74 <HAL_GetTick>
 80022a6:	0002      	movs	r2, r0
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e1e0      	b.n	8002676 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b4:	4b35      	ldr	r3, [pc, #212]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	2202      	movs	r2, #2
 80022ba:	4013      	ands	r3, r2
 80022bc:	d0f1      	beq.n	80022a2 <HAL_RCC_OscConfig+0x242>
 80022be:	e018      	b.n	80022f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c0:	4b32      	ldr	r3, [pc, #200]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 80022c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022c4:	4b31      	ldr	r3, [pc, #196]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 80022c6:	2101      	movs	r1, #1
 80022c8:	438a      	bics	r2, r1
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022cc:	f7fe fcd2 	bl	8000c74 <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d6:	f7fe fccd 	bl	8000c74 <HAL_GetTick>
 80022da:	0002      	movs	r2, r0
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e1c6      	b.n	8002676 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e8:	4b28      	ldr	r3, [pc, #160]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	2202      	movs	r2, #2
 80022ee:	4013      	ands	r3, r2
 80022f0:	d1f1      	bne.n	80022d6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2204      	movs	r2, #4
 80022f8:	4013      	ands	r3, r2
 80022fa:	d100      	bne.n	80022fe <HAL_RCC_OscConfig+0x29e>
 80022fc:	e0b4      	b.n	8002468 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fe:	201f      	movs	r0, #31
 8002300:	183b      	adds	r3, r7, r0
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002306:	4b21      	ldr	r3, [pc, #132]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002308:	69da      	ldr	r2, [r3, #28]
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	055b      	lsls	r3, r3, #21
 800230e:	4013      	ands	r3, r2
 8002310:	d110      	bne.n	8002334 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002312:	4b1e      	ldr	r3, [pc, #120]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002314:	69da      	ldr	r2, [r3, #28]
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	0549      	lsls	r1, r1, #21
 800231c:	430a      	orrs	r2, r1
 800231e:	61da      	str	r2, [r3, #28]
 8002320:	4b1a      	ldr	r3, [pc, #104]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002322:	69da      	ldr	r2, [r3, #28]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	055b      	lsls	r3, r3, #21
 8002328:	4013      	ands	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800232e:	183b      	adds	r3, r7, r0
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	4b18      	ldr	r3, [pc, #96]	; (8002398 <HAL_RCC_OscConfig+0x338>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4013      	ands	r3, r2
 800233e:	d11a      	bne.n	8002376 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002340:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_RCC_OscConfig+0x338>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4b14      	ldr	r3, [pc, #80]	; (8002398 <HAL_RCC_OscConfig+0x338>)
 8002346:	2180      	movs	r1, #128	; 0x80
 8002348:	0049      	lsls	r1, r1, #1
 800234a:	430a      	orrs	r2, r1
 800234c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800234e:	f7fe fc91 	bl	8000c74 <HAL_GetTick>
 8002352:	0003      	movs	r3, r0
 8002354:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002358:	f7fe fc8c 	bl	8000c74 <HAL_GetTick>
 800235c:	0002      	movs	r2, r0
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e185      	b.n	8002676 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_RCC_OscConfig+0x338>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4013      	ands	r3, r2
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d10e      	bne.n	800239c <HAL_RCC_OscConfig+0x33c>
 800237e:	4b03      	ldr	r3, [pc, #12]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002380:	6a1a      	ldr	r2, [r3, #32]
 8002382:	4b02      	ldr	r3, [pc, #8]	; (800238c <HAL_RCC_OscConfig+0x32c>)
 8002384:	2101      	movs	r1, #1
 8002386:	430a      	orrs	r2, r1
 8002388:	621a      	str	r2, [r3, #32]
 800238a:	e035      	b.n	80023f8 <HAL_RCC_OscConfig+0x398>
 800238c:	40021000 	.word	0x40021000
 8002390:	fffeffff 	.word	0xfffeffff
 8002394:	fffbffff 	.word	0xfffbffff
 8002398:	40007000 	.word	0x40007000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10c      	bne.n	80023be <HAL_RCC_OscConfig+0x35e>
 80023a4:	4bb6      	ldr	r3, [pc, #728]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80023a6:	6a1a      	ldr	r2, [r3, #32]
 80023a8:	4bb5      	ldr	r3, [pc, #724]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80023aa:	2101      	movs	r1, #1
 80023ac:	438a      	bics	r2, r1
 80023ae:	621a      	str	r2, [r3, #32]
 80023b0:	4bb3      	ldr	r3, [pc, #716]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80023b2:	6a1a      	ldr	r2, [r3, #32]
 80023b4:	4bb2      	ldr	r3, [pc, #712]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80023b6:	2104      	movs	r1, #4
 80023b8:	438a      	bics	r2, r1
 80023ba:	621a      	str	r2, [r3, #32]
 80023bc:	e01c      	b.n	80023f8 <HAL_RCC_OscConfig+0x398>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b05      	cmp	r3, #5
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x380>
 80023c6:	4bae      	ldr	r3, [pc, #696]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80023c8:	6a1a      	ldr	r2, [r3, #32]
 80023ca:	4bad      	ldr	r3, [pc, #692]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80023cc:	2104      	movs	r1, #4
 80023ce:	430a      	orrs	r2, r1
 80023d0:	621a      	str	r2, [r3, #32]
 80023d2:	4bab      	ldr	r3, [pc, #684]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80023d4:	6a1a      	ldr	r2, [r3, #32]
 80023d6:	4baa      	ldr	r3, [pc, #680]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80023d8:	2101      	movs	r1, #1
 80023da:	430a      	orrs	r2, r1
 80023dc:	621a      	str	r2, [r3, #32]
 80023de:	e00b      	b.n	80023f8 <HAL_RCC_OscConfig+0x398>
 80023e0:	4ba7      	ldr	r3, [pc, #668]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80023e2:	6a1a      	ldr	r2, [r3, #32]
 80023e4:	4ba6      	ldr	r3, [pc, #664]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80023e6:	2101      	movs	r1, #1
 80023e8:	438a      	bics	r2, r1
 80023ea:	621a      	str	r2, [r3, #32]
 80023ec:	4ba4      	ldr	r3, [pc, #656]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80023ee:	6a1a      	ldr	r2, [r3, #32]
 80023f0:	4ba3      	ldr	r3, [pc, #652]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80023f2:	2104      	movs	r1, #4
 80023f4:	438a      	bics	r2, r1
 80023f6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d014      	beq.n	800242a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002400:	f7fe fc38 	bl	8000c74 <HAL_GetTick>
 8002404:	0003      	movs	r3, r0
 8002406:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002408:	e009      	b.n	800241e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800240a:	f7fe fc33 	bl	8000c74 <HAL_GetTick>
 800240e:	0002      	movs	r2, r0
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	4a9b      	ldr	r2, [pc, #620]	; (8002684 <HAL_RCC_OscConfig+0x624>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e12b      	b.n	8002676 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241e:	4b98      	ldr	r3, [pc, #608]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	2202      	movs	r2, #2
 8002424:	4013      	ands	r3, r2
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x3aa>
 8002428:	e013      	b.n	8002452 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242a:	f7fe fc23 	bl	8000c74 <HAL_GetTick>
 800242e:	0003      	movs	r3, r0
 8002430:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002432:	e009      	b.n	8002448 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7fe fc1e 	bl	8000c74 <HAL_GetTick>
 8002438:	0002      	movs	r2, r0
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	4a91      	ldr	r2, [pc, #580]	; (8002684 <HAL_RCC_OscConfig+0x624>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e116      	b.n	8002676 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002448:	4b8d      	ldr	r3, [pc, #564]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	2202      	movs	r2, #2
 800244e:	4013      	ands	r3, r2
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002452:	231f      	movs	r3, #31
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d105      	bne.n	8002468 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245c:	4b88      	ldr	r3, [pc, #544]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 800245e:	69da      	ldr	r2, [r3, #28]
 8002460:	4b87      	ldr	r3, [pc, #540]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 8002462:	4989      	ldr	r1, [pc, #548]	; (8002688 <HAL_RCC_OscConfig+0x628>)
 8002464:	400a      	ands	r2, r1
 8002466:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2210      	movs	r2, #16
 800246e:	4013      	ands	r3, r2
 8002470:	d063      	beq.n	800253a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d12a      	bne.n	80024d0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800247a:	4b81      	ldr	r3, [pc, #516]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 800247c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800247e:	4b80      	ldr	r3, [pc, #512]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 8002480:	2104      	movs	r1, #4
 8002482:	430a      	orrs	r2, r1
 8002484:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002486:	4b7e      	ldr	r3, [pc, #504]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 8002488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800248a:	4b7d      	ldr	r3, [pc, #500]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 800248c:	2101      	movs	r1, #1
 800248e:	430a      	orrs	r2, r1
 8002490:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002492:	f7fe fbef 	bl	8000c74 <HAL_GetTick>
 8002496:	0003      	movs	r3, r0
 8002498:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800249c:	f7fe fbea 	bl	8000c74 <HAL_GetTick>
 80024a0:	0002      	movs	r2, r0
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e0e3      	b.n	8002676 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80024ae:	4b74      	ldr	r3, [pc, #464]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80024b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b2:	2202      	movs	r2, #2
 80024b4:	4013      	ands	r3, r2
 80024b6:	d0f1      	beq.n	800249c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80024b8:	4b71      	ldr	r3, [pc, #452]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80024ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024bc:	22f8      	movs	r2, #248	; 0xf8
 80024be:	4393      	bics	r3, r2
 80024c0:	0019      	movs	r1, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	00da      	lsls	r2, r3, #3
 80024c8:	4b6d      	ldr	r3, [pc, #436]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80024ca:	430a      	orrs	r2, r1
 80024cc:	635a      	str	r2, [r3, #52]	; 0x34
 80024ce:	e034      	b.n	800253a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	3305      	adds	r3, #5
 80024d6:	d111      	bne.n	80024fc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80024d8:	4b69      	ldr	r3, [pc, #420]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80024da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024dc:	4b68      	ldr	r3, [pc, #416]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80024de:	2104      	movs	r1, #4
 80024e0:	438a      	bics	r2, r1
 80024e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80024e4:	4b66      	ldr	r3, [pc, #408]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80024e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e8:	22f8      	movs	r2, #248	; 0xf8
 80024ea:	4393      	bics	r3, r2
 80024ec:	0019      	movs	r1, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	00da      	lsls	r2, r3, #3
 80024f4:	4b62      	ldr	r3, [pc, #392]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80024f6:	430a      	orrs	r2, r1
 80024f8:	635a      	str	r2, [r3, #52]	; 0x34
 80024fa:	e01e      	b.n	800253a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024fc:	4b60      	ldr	r3, [pc, #384]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80024fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002500:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 8002502:	2104      	movs	r1, #4
 8002504:	430a      	orrs	r2, r1
 8002506:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002508:	4b5d      	ldr	r3, [pc, #372]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 800250a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800250c:	4b5c      	ldr	r3, [pc, #368]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 800250e:	2101      	movs	r1, #1
 8002510:	438a      	bics	r2, r1
 8002512:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002514:	f7fe fbae 	bl	8000c74 <HAL_GetTick>
 8002518:	0003      	movs	r3, r0
 800251a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800251e:	f7fe fba9 	bl	8000c74 <HAL_GetTick>
 8002522:	0002      	movs	r2, r0
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e0a2      	b.n	8002676 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002530:	4b53      	ldr	r3, [pc, #332]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 8002532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002534:	2202      	movs	r2, #2
 8002536:	4013      	ands	r3, r2
 8002538:	d1f1      	bne.n	800251e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d100      	bne.n	8002544 <HAL_RCC_OscConfig+0x4e4>
 8002542:	e097      	b.n	8002674 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002544:	4b4e      	ldr	r3, [pc, #312]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	220c      	movs	r2, #12
 800254a:	4013      	ands	r3, r2
 800254c:	2b08      	cmp	r3, #8
 800254e:	d100      	bne.n	8002552 <HAL_RCC_OscConfig+0x4f2>
 8002550:	e06b      	b.n	800262a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d14c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255a:	4b49      	ldr	r3, [pc, #292]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4b48      	ldr	r3, [pc, #288]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 8002560:	494a      	ldr	r1, [pc, #296]	; (800268c <HAL_RCC_OscConfig+0x62c>)
 8002562:	400a      	ands	r2, r1
 8002564:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7fe fb85 	bl	8000c74 <HAL_GetTick>
 800256a:	0003      	movs	r3, r0
 800256c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002570:	f7fe fb80 	bl	8000c74 <HAL_GetTick>
 8002574:	0002      	movs	r2, r0
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e079      	b.n	8002676 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002582:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	2380      	movs	r3, #128	; 0x80
 8002588:	049b      	lsls	r3, r3, #18
 800258a:	4013      	ands	r3, r2
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800258e:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	220f      	movs	r2, #15
 8002594:	4393      	bics	r3, r2
 8002596:	0019      	movs	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800259c:	4b38      	ldr	r3, [pc, #224]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 800259e:	430a      	orrs	r2, r1
 80025a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80025a2:	4b37      	ldr	r3, [pc, #220]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4a3a      	ldr	r2, [pc, #232]	; (8002690 <HAL_RCC_OscConfig+0x630>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	0019      	movs	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	431a      	orrs	r2, r3
 80025b6:	4b32      	ldr	r3, [pc, #200]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80025b8:	430a      	orrs	r2, r1
 80025ba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025bc:	4b30      	ldr	r3, [pc, #192]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b2f      	ldr	r3, [pc, #188]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80025c2:	2180      	movs	r1, #128	; 0x80
 80025c4:	0449      	lsls	r1, r1, #17
 80025c6:	430a      	orrs	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ca:	f7fe fb53 	bl	8000c74 <HAL_GetTick>
 80025ce:	0003      	movs	r3, r0
 80025d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d4:	f7fe fb4e 	bl	8000c74 <HAL_GetTick>
 80025d8:	0002      	movs	r2, r0
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e047      	b.n	8002676 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e6:	4b26      	ldr	r3, [pc, #152]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	049b      	lsls	r3, r3, #18
 80025ee:	4013      	ands	r3, r2
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x574>
 80025f2:	e03f      	b.n	8002674 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f4:	4b22      	ldr	r3, [pc, #136]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4b21      	ldr	r3, [pc, #132]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 80025fa:	4924      	ldr	r1, [pc, #144]	; (800268c <HAL_RCC_OscConfig+0x62c>)
 80025fc:	400a      	ands	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe fb38 	bl	8000c74 <HAL_GetTick>
 8002604:	0003      	movs	r3, r0
 8002606:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800260a:	f7fe fb33 	bl	8000c74 <HAL_GetTick>
 800260e:	0002      	movs	r2, r0
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e02c      	b.n	8002676 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261c:	4b18      	ldr	r3, [pc, #96]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	049b      	lsls	r3, r3, #18
 8002624:	4013      	ands	r3, r2
 8002626:	d1f0      	bne.n	800260a <HAL_RCC_OscConfig+0x5aa>
 8002628:	e024      	b.n	8002674 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e01f      	b.n	8002676 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_RCC_OscConfig+0x620>)
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	025b      	lsls	r3, r3, #9
 8002648:	401a      	ands	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	429a      	cmp	r2, r3
 8002650:	d10e      	bne.n	8002670 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	220f      	movs	r2, #15
 8002656:	401a      	ands	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d107      	bne.n	8002670 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	23f0      	movs	r3, #240	; 0xf0
 8002664:	039b      	lsls	r3, r3, #14
 8002666:	401a      	ands	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	0018      	movs	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	b008      	add	sp, #32
 800267c:	bd80      	pop	{r7, pc}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	40021000 	.word	0x40021000
 8002684:	00001388 	.word	0x00001388
 8002688:	efffffff 	.word	0xefffffff
 800268c:	feffffff 	.word	0xfeffffff
 8002690:	ffc2ffff 	.word	0xffc2ffff

08002694 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0b3      	b.n	8002810 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a8:	4b5b      	ldr	r3, [pc, #364]	; (8002818 <HAL_RCC_ClockConfig+0x184>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2201      	movs	r2, #1
 80026ae:	4013      	ands	r3, r2
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d911      	bls.n	80026da <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	4b58      	ldr	r3, [pc, #352]	; (8002818 <HAL_RCC_ClockConfig+0x184>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2201      	movs	r2, #1
 80026bc:	4393      	bics	r3, r2
 80026be:	0019      	movs	r1, r3
 80026c0:	4b55      	ldr	r3, [pc, #340]	; (8002818 <HAL_RCC_ClockConfig+0x184>)
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c8:	4b53      	ldr	r3, [pc, #332]	; (8002818 <HAL_RCC_ClockConfig+0x184>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2201      	movs	r2, #1
 80026ce:	4013      	ands	r3, r2
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d001      	beq.n	80026da <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e09a      	b.n	8002810 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2202      	movs	r2, #2
 80026e0:	4013      	ands	r3, r2
 80026e2:	d015      	beq.n	8002710 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2204      	movs	r2, #4
 80026ea:	4013      	ands	r3, r2
 80026ec:	d006      	beq.n	80026fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80026ee:	4b4b      	ldr	r3, [pc, #300]	; (800281c <HAL_RCC_ClockConfig+0x188>)
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	4b4a      	ldr	r3, [pc, #296]	; (800281c <HAL_RCC_ClockConfig+0x188>)
 80026f4:	21e0      	movs	r1, #224	; 0xe0
 80026f6:	00c9      	lsls	r1, r1, #3
 80026f8:	430a      	orrs	r2, r1
 80026fa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026fc:	4b47      	ldr	r3, [pc, #284]	; (800281c <HAL_RCC_ClockConfig+0x188>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	22f0      	movs	r2, #240	; 0xf0
 8002702:	4393      	bics	r3, r2
 8002704:	0019      	movs	r1, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	4b44      	ldr	r3, [pc, #272]	; (800281c <HAL_RCC_ClockConfig+0x188>)
 800270c:	430a      	orrs	r2, r1
 800270e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2201      	movs	r2, #1
 8002716:	4013      	ands	r3, r2
 8002718:	d040      	beq.n	800279c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d107      	bne.n	8002732 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	4b3e      	ldr	r3, [pc, #248]	; (800281c <HAL_RCC_ClockConfig+0x188>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	029b      	lsls	r3, r3, #10
 800272a:	4013      	ands	r3, r2
 800272c:	d114      	bne.n	8002758 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e06e      	b.n	8002810 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273a:	4b38      	ldr	r3, [pc, #224]	; (800281c <HAL_RCC_ClockConfig+0x188>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	049b      	lsls	r3, r3, #18
 8002742:	4013      	ands	r3, r2
 8002744:	d108      	bne.n	8002758 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e062      	b.n	8002810 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274a:	4b34      	ldr	r3, [pc, #208]	; (800281c <HAL_RCC_ClockConfig+0x188>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2202      	movs	r2, #2
 8002750:	4013      	ands	r3, r2
 8002752:	d101      	bne.n	8002758 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e05b      	b.n	8002810 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002758:	4b30      	ldr	r3, [pc, #192]	; (800281c <HAL_RCC_ClockConfig+0x188>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2203      	movs	r2, #3
 800275e:	4393      	bics	r3, r2
 8002760:	0019      	movs	r1, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	4b2d      	ldr	r3, [pc, #180]	; (800281c <HAL_RCC_ClockConfig+0x188>)
 8002768:	430a      	orrs	r2, r1
 800276a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800276c:	f7fe fa82 	bl	8000c74 <HAL_GetTick>
 8002770:	0003      	movs	r3, r0
 8002772:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002774:	e009      	b.n	800278a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002776:	f7fe fa7d 	bl	8000c74 <HAL_GetTick>
 800277a:	0002      	movs	r2, r0
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	4a27      	ldr	r2, [pc, #156]	; (8002820 <HAL_RCC_ClockConfig+0x18c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e042      	b.n	8002810 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	4b24      	ldr	r3, [pc, #144]	; (800281c <HAL_RCC_ClockConfig+0x188>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	220c      	movs	r2, #12
 8002790:	401a      	ands	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	429a      	cmp	r2, r3
 800279a:	d1ec      	bne.n	8002776 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800279c:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <HAL_RCC_ClockConfig+0x184>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2201      	movs	r2, #1
 80027a2:	4013      	ands	r3, r2
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d211      	bcs.n	80027ce <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <HAL_RCC_ClockConfig+0x184>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2201      	movs	r2, #1
 80027b0:	4393      	bics	r3, r2
 80027b2:	0019      	movs	r1, r3
 80027b4:	4b18      	ldr	r3, [pc, #96]	; (8002818 <HAL_RCC_ClockConfig+0x184>)
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027bc:	4b16      	ldr	r3, [pc, #88]	; (8002818 <HAL_RCC_ClockConfig+0x184>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2201      	movs	r2, #1
 80027c2:	4013      	ands	r3, r2
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d001      	beq.n	80027ce <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e020      	b.n	8002810 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2204      	movs	r2, #4
 80027d4:	4013      	ands	r3, r2
 80027d6:	d009      	beq.n	80027ec <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80027d8:	4b10      	ldr	r3, [pc, #64]	; (800281c <HAL_RCC_ClockConfig+0x188>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	4a11      	ldr	r2, [pc, #68]	; (8002824 <HAL_RCC_ClockConfig+0x190>)
 80027de:	4013      	ands	r3, r2
 80027e0:	0019      	movs	r1, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	4b0d      	ldr	r3, [pc, #52]	; (800281c <HAL_RCC_ClockConfig+0x188>)
 80027e8:	430a      	orrs	r2, r1
 80027ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027ec:	f000 f820 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 80027f0:	0001      	movs	r1, r0
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_RCC_ClockConfig+0x188>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	220f      	movs	r2, #15
 80027fa:	4013      	ands	r3, r2
 80027fc:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <HAL_RCC_ClockConfig+0x194>)
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	000a      	movs	r2, r1
 8002802:	40da      	lsrs	r2, r3
 8002804:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_RCC_ClockConfig+0x198>)
 8002806:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002808:	2000      	movs	r0, #0
 800280a:	f7fe f9ed 	bl	8000be8 <HAL_InitTick>
  
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	0018      	movs	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	b004      	add	sp, #16
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40022000 	.word	0x40022000
 800281c:	40021000 	.word	0x40021000
 8002820:	00001388 	.word	0x00001388
 8002824:	fffff8ff 	.word	0xfffff8ff
 8002828:	08004f10 	.word	0x08004f10
 800282c:	20000000 	.word	0x20000000

08002830 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002830:	b590      	push	{r4, r7, lr}
 8002832:	b08f      	sub	sp, #60	; 0x3c
 8002834:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002836:	2314      	movs	r3, #20
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	4a2b      	ldr	r2, [pc, #172]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800283c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800283e:	c313      	stmia	r3!, {r0, r1, r4}
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	4a29      	ldr	r2, [pc, #164]	; (80028ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002848:	ca13      	ldmia	r2!, {r0, r1, r4}
 800284a:	c313      	stmia	r3!, {r0, r1, r4}
 800284c:	6812      	ldr	r2, [r2, #0]
 800284e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002854:	2300      	movs	r3, #0
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
 8002858:	2300      	movs	r3, #0
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002864:	4b22      	ldr	r3, [pc, #136]	; (80028f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800286a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286c:	220c      	movs	r2, #12
 800286e:	4013      	ands	r3, r2
 8002870:	2b04      	cmp	r3, #4
 8002872:	d002      	beq.n	800287a <HAL_RCC_GetSysClockFreq+0x4a>
 8002874:	2b08      	cmp	r3, #8
 8002876:	d003      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x50>
 8002878:	e02d      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800287a:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800287c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800287e:	e02d      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002882:	0c9b      	lsrs	r3, r3, #18
 8002884:	220f      	movs	r2, #15
 8002886:	4013      	ands	r3, r2
 8002888:	2214      	movs	r2, #20
 800288a:	18ba      	adds	r2, r7, r2
 800288c:	5cd3      	ldrb	r3, [r2, r3]
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002890:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	220f      	movs	r2, #15
 8002896:	4013      	ands	r3, r2
 8002898:	1d3a      	adds	r2, r7, #4
 800289a:	5cd3      	ldrb	r3, [r2, r3]
 800289c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800289e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	025b      	lsls	r3, r3, #9
 80028a4:	4013      	ands	r3, r2
 80028a6:	d009      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028aa:	4812      	ldr	r0, [pc, #72]	; (80028f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028ac:	f7fd fc36 	bl	800011c <__udivsi3>
 80028b0:	0003      	movs	r3, r0
 80028b2:	001a      	movs	r2, r3
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	4353      	muls	r3, r2
 80028b8:	637b      	str	r3, [r7, #52]	; 0x34
 80028ba:	e009      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80028bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028be:	000a      	movs	r2, r1
 80028c0:	0152      	lsls	r2, r2, #5
 80028c2:	1a52      	subs	r2, r2, r1
 80028c4:	0193      	lsls	r3, r2, #6
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	185b      	adds	r3, r3, r1
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80028d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028d4:	e002      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028d6:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028da:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80028dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80028de:	0018      	movs	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b00f      	add	sp, #60	; 0x3c
 80028e4:	bd90      	pop	{r4, r7, pc}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	08004ef0 	.word	0x08004ef0
 80028ec:	08004f00 	.word	0x08004f00
 80028f0:	40021000 	.word	0x40021000
 80028f4:	007a1200 	.word	0x007a1200

080028f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028fc:	4b02      	ldr	r3, [pc, #8]	; (8002908 <HAL_RCC_GetHCLKFreq+0x10>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	0018      	movs	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	20000000 	.word	0x20000000

0800290c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002910:	f7ff fff2 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 8002914:	0001      	movs	r1, r0
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	0a1b      	lsrs	r3, r3, #8
 800291c:	2207      	movs	r2, #7
 800291e:	4013      	ands	r3, r2
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002922:	5cd3      	ldrb	r3, [r2, r3]
 8002924:	40d9      	lsrs	r1, r3
 8002926:	000b      	movs	r3, r1
}    
 8002928:	0018      	movs	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	40021000 	.word	0x40021000
 8002934:	08004f20 	.word	0x08004f20

08002938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e042      	b.n	80029d0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	223d      	movs	r2, #61	; 0x3d
 800294e:	5c9b      	ldrb	r3, [r3, r2]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d107      	bne.n	8002966 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	223c      	movs	r2, #60	; 0x3c
 800295a:	2100      	movs	r1, #0
 800295c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	0018      	movs	r0, r3
 8002962:	f7fd ffa3 	bl	80008ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	223d      	movs	r2, #61	; 0x3d
 800296a:	2102      	movs	r1, #2
 800296c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3304      	adds	r3, #4
 8002976:	0019      	movs	r1, r3
 8002978:	0010      	movs	r0, r2
 800297a:	f000 fad7 	bl	8002f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2246      	movs	r2, #70	; 0x46
 8002982:	2101      	movs	r1, #1
 8002984:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	223e      	movs	r2, #62	; 0x3e
 800298a:	2101      	movs	r1, #1
 800298c:	5499      	strb	r1, [r3, r2]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	223f      	movs	r2, #63	; 0x3f
 8002992:	2101      	movs	r1, #1
 8002994:	5499      	strb	r1, [r3, r2]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2240      	movs	r2, #64	; 0x40
 800299a:	2101      	movs	r1, #1
 800299c:	5499      	strb	r1, [r3, r2]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2241      	movs	r2, #65	; 0x41
 80029a2:	2101      	movs	r1, #1
 80029a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2242      	movs	r2, #66	; 0x42
 80029aa:	2101      	movs	r1, #1
 80029ac:	5499      	strb	r1, [r3, r2]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2243      	movs	r2, #67	; 0x43
 80029b2:	2101      	movs	r1, #1
 80029b4:	5499      	strb	r1, [r3, r2]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2244      	movs	r2, #68	; 0x44
 80029ba:	2101      	movs	r1, #1
 80029bc:	5499      	strb	r1, [r3, r2]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2245      	movs	r2, #69	; 0x45
 80029c2:	2101      	movs	r1, #1
 80029c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	223d      	movs	r2, #61	; 0x3d
 80029ca:	2101      	movs	r1, #1
 80029cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b002      	add	sp, #8
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e042      	b.n	8002a70 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	223d      	movs	r2, #61	; 0x3d
 80029ee:	5c9b      	ldrb	r3, [r3, r2]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d107      	bne.n	8002a06 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	223c      	movs	r2, #60	; 0x3c
 80029fa:	2100      	movs	r1, #0
 80029fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	0018      	movs	r0, r3
 8002a02:	f000 f839 	bl	8002a78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	223d      	movs	r2, #61	; 0x3d
 8002a0a:	2102      	movs	r1, #2
 8002a0c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3304      	adds	r3, #4
 8002a16:	0019      	movs	r1, r3
 8002a18:	0010      	movs	r0, r2
 8002a1a:	f000 fa87 	bl	8002f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2246      	movs	r2, #70	; 0x46
 8002a22:	2101      	movs	r1, #1
 8002a24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	223e      	movs	r2, #62	; 0x3e
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	5499      	strb	r1, [r3, r2]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	223f      	movs	r2, #63	; 0x3f
 8002a32:	2101      	movs	r1, #1
 8002a34:	5499      	strb	r1, [r3, r2]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2240      	movs	r2, #64	; 0x40
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	5499      	strb	r1, [r3, r2]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2241      	movs	r2, #65	; 0x41
 8002a42:	2101      	movs	r1, #1
 8002a44:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2242      	movs	r2, #66	; 0x42
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	5499      	strb	r1, [r3, r2]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2243      	movs	r2, #67	; 0x43
 8002a52:	2101      	movs	r1, #1
 8002a54:	5499      	strb	r1, [r3, r2]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2244      	movs	r2, #68	; 0x44
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	5499      	strb	r1, [r3, r2]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2245      	movs	r2, #69	; 0x45
 8002a62:	2101      	movs	r1, #1
 8002a64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	223d      	movs	r2, #61	; 0x3d
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	0018      	movs	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b002      	add	sp, #8
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a80:	46c0      	nop			; (mov r8, r8)
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b002      	add	sp, #8
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d108      	bne.n	8002aaa <HAL_TIM_PWM_Start+0x22>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	223e      	movs	r2, #62	; 0x3e
 8002a9c:	5c9b      	ldrb	r3, [r3, r2]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	1e5a      	subs	r2, r3, #1
 8002aa4:	4193      	sbcs	r3, r2
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	e01f      	b.n	8002aea <HAL_TIM_PWM_Start+0x62>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d108      	bne.n	8002ac2 <HAL_TIM_PWM_Start+0x3a>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	223f      	movs	r2, #63	; 0x3f
 8002ab4:	5c9b      	ldrb	r3, [r3, r2]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	1e5a      	subs	r2, r3, #1
 8002abc:	4193      	sbcs	r3, r2
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	e013      	b.n	8002aea <HAL_TIM_PWM_Start+0x62>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d108      	bne.n	8002ada <HAL_TIM_PWM_Start+0x52>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2240      	movs	r2, #64	; 0x40
 8002acc:	5c9b      	ldrb	r3, [r3, r2]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	1e5a      	subs	r2, r3, #1
 8002ad4:	4193      	sbcs	r3, r2
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	e007      	b.n	8002aea <HAL_TIM_PWM_Start+0x62>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2241      	movs	r2, #65	; 0x41
 8002ade:	5c9b      	ldrb	r3, [r3, r2]
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	1e5a      	subs	r2, r3, #1
 8002ae6:	4193      	sbcs	r3, r2
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e074      	b.n	8002bdc <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d104      	bne.n	8002b02 <HAL_TIM_PWM_Start+0x7a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	223e      	movs	r2, #62	; 0x3e
 8002afc:	2102      	movs	r1, #2
 8002afe:	5499      	strb	r1, [r3, r2]
 8002b00:	e013      	b.n	8002b2a <HAL_TIM_PWM_Start+0xa2>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d104      	bne.n	8002b12 <HAL_TIM_PWM_Start+0x8a>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	223f      	movs	r2, #63	; 0x3f
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	5499      	strb	r1, [r3, r2]
 8002b10:	e00b      	b.n	8002b2a <HAL_TIM_PWM_Start+0xa2>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d104      	bne.n	8002b22 <HAL_TIM_PWM_Start+0x9a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2240      	movs	r2, #64	; 0x40
 8002b1c:	2102      	movs	r1, #2
 8002b1e:	5499      	strb	r1, [r3, r2]
 8002b20:	e003      	b.n	8002b2a <HAL_TIM_PWM_Start+0xa2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2241      	movs	r2, #65	; 0x41
 8002b26:	2102      	movs	r1, #2
 8002b28:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6839      	ldr	r1, [r7, #0]
 8002b30:	2201      	movs	r2, #1
 8002b32:	0018      	movs	r0, r3
 8002b34:	f000 fd10 	bl	8003558 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a29      	ldr	r2, [pc, #164]	; (8002be4 <HAL_TIM_PWM_Start+0x15c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00e      	beq.n	8002b60 <HAL_TIM_PWM_Start+0xd8>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a28      	ldr	r2, [pc, #160]	; (8002be8 <HAL_TIM_PWM_Start+0x160>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d009      	beq.n	8002b60 <HAL_TIM_PWM_Start+0xd8>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a26      	ldr	r2, [pc, #152]	; (8002bec <HAL_TIM_PWM_Start+0x164>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d004      	beq.n	8002b60 <HAL_TIM_PWM_Start+0xd8>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a25      	ldr	r2, [pc, #148]	; (8002bf0 <HAL_TIM_PWM_Start+0x168>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d101      	bne.n	8002b64 <HAL_TIM_PWM_Start+0xdc>
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <HAL_TIM_PWM_Start+0xde>
 8002b64:	2300      	movs	r3, #0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2180      	movs	r1, #128	; 0x80
 8002b76:	0209      	lsls	r1, r1, #8
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a18      	ldr	r2, [pc, #96]	; (8002be4 <HAL_TIM_PWM_Start+0x15c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00f      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x11e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	05db      	lsls	r3, r3, #23
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d009      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x11e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a17      	ldr	r2, [pc, #92]	; (8002bf4 <HAL_TIM_PWM_Start+0x16c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d004      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x11e>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a11      	ldr	r2, [pc, #68]	; (8002be8 <HAL_TIM_PWM_Start+0x160>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d111      	bne.n	8002bca <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2207      	movs	r2, #7
 8002bae:	4013      	ands	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b06      	cmp	r3, #6
 8002bb6:	d010      	beq.n	8002bda <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc8:	e007      	b.n	8002bda <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b004      	add	sp, #16
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40012c00 	.word	0x40012c00
 8002be8:	40014000 	.word	0x40014000
 8002bec:	40014400 	.word	0x40014400
 8002bf0:	40014800 	.word	0x40014800
 8002bf4:	40000400 	.word	0x40000400

08002bf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c04:	2317      	movs	r3, #23
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	223c      	movs	r2, #60	; 0x3c
 8002c10:	5c9b      	ldrb	r3, [r3, r2]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e0ad      	b.n	8002d76 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	223c      	movs	r2, #60	; 0x3c
 8002c1e:	2101      	movs	r1, #1
 8002c20:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b0c      	cmp	r3, #12
 8002c26:	d100      	bne.n	8002c2a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002c28:	e076      	b.n	8002d18 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b0c      	cmp	r3, #12
 8002c2e:	d900      	bls.n	8002c32 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002c30:	e095      	b.n	8002d5e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d04e      	beq.n	8002cd6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d900      	bls.n	8002c40 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002c3e:	e08e      	b.n	8002d5e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d021      	beq.n	8002c90 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002c4c:	e087      	b.n	8002d5e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	0011      	movs	r1, r2
 8002c56:	0018      	movs	r0, r3
 8002c58:	f000 f9e8 	bl	800302c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699a      	ldr	r2, [r3, #24]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2108      	movs	r1, #8
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2104      	movs	r1, #4
 8002c78:	438a      	bics	r2, r1
 8002c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6999      	ldr	r1, [r3, #24]
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	619a      	str	r2, [r3, #24]
      break;
 8002c8e:	e06b      	b.n	8002d68 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	0011      	movs	r1, r2
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f000 fa4f 	bl	800313c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699a      	ldr	r2, [r3, #24]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2180      	movs	r1, #128	; 0x80
 8002caa:	0109      	lsls	r1, r1, #4
 8002cac:	430a      	orrs	r2, r1
 8002cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699a      	ldr	r2, [r3, #24]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4931      	ldr	r1, [pc, #196]	; (8002d80 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6999      	ldr	r1, [r3, #24]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	021a      	lsls	r2, r3, #8
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	619a      	str	r2, [r3, #24]
      break;
 8002cd4:	e048      	b.n	8002d68 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	0011      	movs	r1, r2
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f000 fab0 	bl	8003244 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69da      	ldr	r2, [r3, #28]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2108      	movs	r1, #8
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	69da      	ldr	r2, [r3, #28]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2104      	movs	r1, #4
 8002d00:	438a      	bics	r2, r1
 8002d02:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	69d9      	ldr	r1, [r3, #28]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	61da      	str	r2, [r3, #28]
      break;
 8002d16:	e027      	b.n	8002d68 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	0011      	movs	r1, r2
 8002d20:	0018      	movs	r0, r3
 8002d22:	f000 fb15 	bl	8003350 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	69da      	ldr	r2, [r3, #28]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2180      	movs	r1, #128	; 0x80
 8002d32:	0109      	lsls	r1, r1, #4
 8002d34:	430a      	orrs	r2, r1
 8002d36:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	69da      	ldr	r2, [r3, #28]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	490f      	ldr	r1, [pc, #60]	; (8002d80 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002d44:	400a      	ands	r2, r1
 8002d46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	69d9      	ldr	r1, [r3, #28]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	021a      	lsls	r2, r3, #8
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	61da      	str	r2, [r3, #28]
      break;
 8002d5c:	e004      	b.n	8002d68 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002d5e:	2317      	movs	r3, #23
 8002d60:	18fb      	adds	r3, r7, r3
 8002d62:	2201      	movs	r2, #1
 8002d64:	701a      	strb	r2, [r3, #0]
      break;
 8002d66:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	223c      	movs	r2, #60	; 0x3c
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	5499      	strb	r1, [r3, r2]

  return status;
 8002d70:	2317      	movs	r3, #23
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	781b      	ldrb	r3, [r3, #0]
}
 8002d76:	0018      	movs	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b006      	add	sp, #24
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	fffffbff 	.word	0xfffffbff

08002d84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d8e:	230f      	movs	r3, #15
 8002d90:	18fb      	adds	r3, r7, r3
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	223c      	movs	r2, #60	; 0x3c
 8002d9a:	5c9b      	ldrb	r3, [r3, r2]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_TIM_ConfigClockSource+0x20>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e0bc      	b.n	8002f1e <HAL_TIM_ConfigClockSource+0x19a>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	223c      	movs	r2, #60	; 0x3c
 8002da8:	2101      	movs	r1, #1
 8002daa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	223d      	movs	r2, #61	; 0x3d
 8002db0:	2102      	movs	r1, #2
 8002db2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2277      	movs	r2, #119	; 0x77
 8002dc0:	4393      	bics	r3, r2
 8002dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4a58      	ldr	r2, [pc, #352]	; (8002f28 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2280      	movs	r2, #128	; 0x80
 8002dda:	0192      	lsls	r2, r2, #6
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d040      	beq.n	8002e62 <HAL_TIM_ConfigClockSource+0xde>
 8002de0:	2280      	movs	r2, #128	; 0x80
 8002de2:	0192      	lsls	r2, r2, #6
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d900      	bls.n	8002dea <HAL_TIM_ConfigClockSource+0x66>
 8002de8:	e088      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x178>
 8002dea:	2280      	movs	r2, #128	; 0x80
 8002dec:	0152      	lsls	r2, r2, #5
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d100      	bne.n	8002df4 <HAL_TIM_ConfigClockSource+0x70>
 8002df2:	e088      	b.n	8002f06 <HAL_TIM_ConfigClockSource+0x182>
 8002df4:	2280      	movs	r2, #128	; 0x80
 8002df6:	0152      	lsls	r2, r2, #5
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d900      	bls.n	8002dfe <HAL_TIM_ConfigClockSource+0x7a>
 8002dfc:	e07e      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x178>
 8002dfe:	2b70      	cmp	r3, #112	; 0x70
 8002e00:	d018      	beq.n	8002e34 <HAL_TIM_ConfigClockSource+0xb0>
 8002e02:	d900      	bls.n	8002e06 <HAL_TIM_ConfigClockSource+0x82>
 8002e04:	e07a      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x178>
 8002e06:	2b60      	cmp	r3, #96	; 0x60
 8002e08:	d04f      	beq.n	8002eaa <HAL_TIM_ConfigClockSource+0x126>
 8002e0a:	d900      	bls.n	8002e0e <HAL_TIM_ConfigClockSource+0x8a>
 8002e0c:	e076      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x178>
 8002e0e:	2b50      	cmp	r3, #80	; 0x50
 8002e10:	d03b      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0x106>
 8002e12:	d900      	bls.n	8002e16 <HAL_TIM_ConfigClockSource+0x92>
 8002e14:	e072      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x178>
 8002e16:	2b40      	cmp	r3, #64	; 0x40
 8002e18:	d057      	beq.n	8002eca <HAL_TIM_ConfigClockSource+0x146>
 8002e1a:	d900      	bls.n	8002e1e <HAL_TIM_ConfigClockSource+0x9a>
 8002e1c:	e06e      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x178>
 8002e1e:	2b30      	cmp	r3, #48	; 0x30
 8002e20:	d063      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0x166>
 8002e22:	d86b      	bhi.n	8002efc <HAL_TIM_ConfigClockSource+0x178>
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d060      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0x166>
 8002e28:	d868      	bhi.n	8002efc <HAL_TIM_ConfigClockSource+0x178>
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d05d      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0x166>
 8002e2e:	2b10      	cmp	r3, #16
 8002e30:	d05b      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0x166>
 8002e32:	e063      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	6899      	ldr	r1, [r3, #8]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f000 fb68 	bl	8003518 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2277      	movs	r2, #119	; 0x77
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	609a      	str	r2, [r3, #8]
      break;
 8002e60:	e052      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	6899      	ldr	r1, [r3, #8]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f000 fb51 	bl	8003518 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2180      	movs	r1, #128	; 0x80
 8002e82:	01c9      	lsls	r1, r1, #7
 8002e84:	430a      	orrs	r2, r1
 8002e86:	609a      	str	r2, [r3, #8]
      break;
 8002e88:	e03e      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	6859      	ldr	r1, [r3, #4]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	001a      	movs	r2, r3
 8002e98:	f000 fac4 	bl	8003424 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2150      	movs	r1, #80	; 0x50
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f000 fb1e 	bl	80034e4 <TIM_ITRx_SetConfig>
      break;
 8002ea8:	e02e      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	6859      	ldr	r1, [r3, #4]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	001a      	movs	r2, r3
 8002eb8:	f000 fae2 	bl	8003480 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2160      	movs	r1, #96	; 0x60
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f000 fb0e 	bl	80034e4 <TIM_ITRx_SetConfig>
      break;
 8002ec8:	e01e      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	6859      	ldr	r1, [r3, #4]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	001a      	movs	r2, r3
 8002ed8:	f000 faa4 	bl	8003424 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2140      	movs	r1, #64	; 0x40
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f000 fafe 	bl	80034e4 <TIM_ITRx_SetConfig>
      break;
 8002ee8:	e00e      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	0010      	movs	r0, r2
 8002ef6:	f000 faf5 	bl	80034e4 <TIM_ITRx_SetConfig>
      break;
 8002efa:	e005      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002efc:	230f      	movs	r3, #15
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	2201      	movs	r2, #1
 8002f02:	701a      	strb	r2, [r3, #0]
      break;
 8002f04:	e000      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002f06:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	223d      	movs	r2, #61	; 0x3d
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	223c      	movs	r2, #60	; 0x3c
 8002f14:	2100      	movs	r1, #0
 8002f16:	5499      	strb	r1, [r3, r2]

  return status;
 8002f18:	230f      	movs	r3, #15
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	781b      	ldrb	r3, [r3, #0]
}
 8002f1e:	0018      	movs	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b004      	add	sp, #16
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	ffff00ff 	.word	0xffff00ff

08002f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a34      	ldr	r2, [pc, #208]	; (8003010 <TIM_Base_SetConfig+0xe4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d008      	beq.n	8002f56 <TIM_Base_SetConfig+0x2a>
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	05db      	lsls	r3, r3, #23
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d003      	beq.n	8002f56 <TIM_Base_SetConfig+0x2a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a30      	ldr	r2, [pc, #192]	; (8003014 <TIM_Base_SetConfig+0xe8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d108      	bne.n	8002f68 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2270      	movs	r2, #112	; 0x70
 8002f5a:	4393      	bics	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a29      	ldr	r2, [pc, #164]	; (8003010 <TIM_Base_SetConfig+0xe4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d018      	beq.n	8002fa2 <TIM_Base_SetConfig+0x76>
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	05db      	lsls	r3, r3, #23
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d013      	beq.n	8002fa2 <TIM_Base_SetConfig+0x76>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a25      	ldr	r2, [pc, #148]	; (8003014 <TIM_Base_SetConfig+0xe8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00f      	beq.n	8002fa2 <TIM_Base_SetConfig+0x76>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a24      	ldr	r2, [pc, #144]	; (8003018 <TIM_Base_SetConfig+0xec>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00b      	beq.n	8002fa2 <TIM_Base_SetConfig+0x76>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a23      	ldr	r2, [pc, #140]	; (800301c <TIM_Base_SetConfig+0xf0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d007      	beq.n	8002fa2 <TIM_Base_SetConfig+0x76>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a22      	ldr	r2, [pc, #136]	; (8003020 <TIM_Base_SetConfig+0xf4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d003      	beq.n	8002fa2 <TIM_Base_SetConfig+0x76>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a21      	ldr	r2, [pc, #132]	; (8003024 <TIM_Base_SetConfig+0xf8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d108      	bne.n	8002fb4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4a20      	ldr	r2, [pc, #128]	; (8003028 <TIM_Base_SetConfig+0xfc>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2280      	movs	r2, #128	; 0x80
 8002fb8:	4393      	bics	r3, r2
 8002fba:	001a      	movs	r2, r3
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a0c      	ldr	r2, [pc, #48]	; (8003010 <TIM_Base_SetConfig+0xe4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d00b      	beq.n	8002ffa <TIM_Base_SetConfig+0xce>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a0d      	ldr	r2, [pc, #52]	; (800301c <TIM_Base_SetConfig+0xf0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d007      	beq.n	8002ffa <TIM_Base_SetConfig+0xce>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a0c      	ldr	r2, [pc, #48]	; (8003020 <TIM_Base_SetConfig+0xf4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d003      	beq.n	8002ffa <TIM_Base_SetConfig+0xce>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a0b      	ldr	r2, [pc, #44]	; (8003024 <TIM_Base_SetConfig+0xf8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d103      	bne.n	8003002 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	615a      	str	r2, [r3, #20]
}
 8003008:	46c0      	nop			; (mov r8, r8)
 800300a:	46bd      	mov	sp, r7
 800300c:	b004      	add	sp, #16
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40012c00 	.word	0x40012c00
 8003014:	40000400 	.word	0x40000400
 8003018:	40002000 	.word	0x40002000
 800301c:	40014000 	.word	0x40014000
 8003020:	40014400 	.word	0x40014400
 8003024:	40014800 	.word	0x40014800
 8003028:	fffffcff 	.word	0xfffffcff

0800302c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	2201      	movs	r2, #1
 800303c:	4393      	bics	r3, r2
 800303e:	001a      	movs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2270      	movs	r2, #112	; 0x70
 800305a:	4393      	bics	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2203      	movs	r2, #3
 8003062:	4393      	bics	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4313      	orrs	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2202      	movs	r2, #2
 8003074:	4393      	bics	r3, r2
 8003076:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a27      	ldr	r2, [pc, #156]	; (8003124 <TIM_OC1_SetConfig+0xf8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00b      	beq.n	80030a2 <TIM_OC1_SetConfig+0x76>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a26      	ldr	r2, [pc, #152]	; (8003128 <TIM_OC1_SetConfig+0xfc>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d007      	beq.n	80030a2 <TIM_OC1_SetConfig+0x76>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a25      	ldr	r2, [pc, #148]	; (800312c <TIM_OC1_SetConfig+0x100>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d003      	beq.n	80030a2 <TIM_OC1_SetConfig+0x76>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a24      	ldr	r2, [pc, #144]	; (8003130 <TIM_OC1_SetConfig+0x104>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d10c      	bne.n	80030bc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2208      	movs	r2, #8
 80030a6:	4393      	bics	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2204      	movs	r2, #4
 80030b8:	4393      	bics	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a19      	ldr	r2, [pc, #100]	; (8003124 <TIM_OC1_SetConfig+0xf8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00b      	beq.n	80030dc <TIM_OC1_SetConfig+0xb0>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a18      	ldr	r2, [pc, #96]	; (8003128 <TIM_OC1_SetConfig+0xfc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d007      	beq.n	80030dc <TIM_OC1_SetConfig+0xb0>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a17      	ldr	r2, [pc, #92]	; (800312c <TIM_OC1_SetConfig+0x100>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d003      	beq.n	80030dc <TIM_OC1_SetConfig+0xb0>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a16      	ldr	r2, [pc, #88]	; (8003130 <TIM_OC1_SetConfig+0x104>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d111      	bne.n	8003100 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4a15      	ldr	r2, [pc, #84]	; (8003134 <TIM_OC1_SetConfig+0x108>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4a14      	ldr	r2, [pc, #80]	; (8003138 <TIM_OC1_SetConfig+0x10c>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	621a      	str	r2, [r3, #32]
}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	46bd      	mov	sp, r7
 800311e:	b006      	add	sp, #24
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	40012c00 	.word	0x40012c00
 8003128:	40014000 	.word	0x40014000
 800312c:	40014400 	.word	0x40014400
 8003130:	40014800 	.word	0x40014800
 8003134:	fffffeff 	.word	0xfffffeff
 8003138:	fffffdff 	.word	0xfffffdff

0800313c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	2210      	movs	r2, #16
 800314c:	4393      	bics	r3, r2
 800314e:	001a      	movs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4a2e      	ldr	r2, [pc, #184]	; (8003224 <TIM_OC2_SetConfig+0xe8>)
 800316a:	4013      	ands	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a2d      	ldr	r2, [pc, #180]	; (8003228 <TIM_OC2_SetConfig+0xec>)
 8003172:	4013      	ands	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2220      	movs	r2, #32
 8003186:	4393      	bics	r3, r2
 8003188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a24      	ldr	r2, [pc, #144]	; (800322c <TIM_OC2_SetConfig+0xf0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d10d      	bne.n	80031ba <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2280      	movs	r2, #128	; 0x80
 80031a2:	4393      	bics	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2240      	movs	r2, #64	; 0x40
 80031b6:	4393      	bics	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a1b      	ldr	r2, [pc, #108]	; (800322c <TIM_OC2_SetConfig+0xf0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00b      	beq.n	80031da <TIM_OC2_SetConfig+0x9e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a1a      	ldr	r2, [pc, #104]	; (8003230 <TIM_OC2_SetConfig+0xf4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d007      	beq.n	80031da <TIM_OC2_SetConfig+0x9e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a19      	ldr	r2, [pc, #100]	; (8003234 <TIM_OC2_SetConfig+0xf8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d003      	beq.n	80031da <TIM_OC2_SetConfig+0x9e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a18      	ldr	r2, [pc, #96]	; (8003238 <TIM_OC2_SetConfig+0xfc>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d113      	bne.n	8003202 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4a17      	ldr	r2, [pc, #92]	; (800323c <TIM_OC2_SetConfig+0x100>)
 80031de:	4013      	ands	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4a16      	ldr	r2, [pc, #88]	; (8003240 <TIM_OC2_SetConfig+0x104>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	621a      	str	r2, [r3, #32]
}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	b006      	add	sp, #24
 8003222:	bd80      	pop	{r7, pc}
 8003224:	ffff8fff 	.word	0xffff8fff
 8003228:	fffffcff 	.word	0xfffffcff
 800322c:	40012c00 	.word	0x40012c00
 8003230:	40014000 	.word	0x40014000
 8003234:	40014400 	.word	0x40014400
 8003238:	40014800 	.word	0x40014800
 800323c:	fffffbff 	.word	0xfffffbff
 8003240:	fffff7ff 	.word	0xfffff7ff

08003244 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	4a35      	ldr	r2, [pc, #212]	; (8003328 <TIM_OC3_SetConfig+0xe4>)
 8003254:	401a      	ands	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2270      	movs	r2, #112	; 0x70
 8003270:	4393      	bics	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2203      	movs	r2, #3
 8003278:	4393      	bics	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	4a28      	ldr	r2, [pc, #160]	; (800332c <TIM_OC3_SetConfig+0xe8>)
 800328a:	4013      	ands	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a24      	ldr	r2, [pc, #144]	; (8003330 <TIM_OC3_SetConfig+0xec>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d10d      	bne.n	80032be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	4a23      	ldr	r2, [pc, #140]	; (8003334 <TIM_OC3_SetConfig+0xf0>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	021b      	lsls	r3, r3, #8
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	4a1f      	ldr	r2, [pc, #124]	; (8003338 <TIM_OC3_SetConfig+0xf4>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a1b      	ldr	r2, [pc, #108]	; (8003330 <TIM_OC3_SetConfig+0xec>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00b      	beq.n	80032de <TIM_OC3_SetConfig+0x9a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a1c      	ldr	r2, [pc, #112]	; (800333c <TIM_OC3_SetConfig+0xf8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d007      	beq.n	80032de <TIM_OC3_SetConfig+0x9a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a1b      	ldr	r2, [pc, #108]	; (8003340 <TIM_OC3_SetConfig+0xfc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d003      	beq.n	80032de <TIM_OC3_SetConfig+0x9a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1a      	ldr	r2, [pc, #104]	; (8003344 <TIM_OC3_SetConfig+0x100>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d113      	bne.n	8003306 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4a19      	ldr	r2, [pc, #100]	; (8003348 <TIM_OC3_SetConfig+0x104>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4a18      	ldr	r2, [pc, #96]	; (800334c <TIM_OC3_SetConfig+0x108>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	621a      	str	r2, [r3, #32]
}
 8003320:	46c0      	nop			; (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	b006      	add	sp, #24
 8003326:	bd80      	pop	{r7, pc}
 8003328:	fffffeff 	.word	0xfffffeff
 800332c:	fffffdff 	.word	0xfffffdff
 8003330:	40012c00 	.word	0x40012c00
 8003334:	fffff7ff 	.word	0xfffff7ff
 8003338:	fffffbff 	.word	0xfffffbff
 800333c:	40014000 	.word	0x40014000
 8003340:	40014400 	.word	0x40014400
 8003344:	40014800 	.word	0x40014800
 8003348:	ffffefff 	.word	0xffffefff
 800334c:	ffffdfff 	.word	0xffffdfff

08003350 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4a28      	ldr	r2, [pc, #160]	; (8003400 <TIM_OC4_SetConfig+0xb0>)
 8003360:	401a      	ands	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4a22      	ldr	r2, [pc, #136]	; (8003404 <TIM_OC4_SetConfig+0xb4>)
 800337c:	4013      	ands	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4a21      	ldr	r2, [pc, #132]	; (8003408 <TIM_OC4_SetConfig+0xb8>)
 8003384:	4013      	ands	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4313      	orrs	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4a1d      	ldr	r2, [pc, #116]	; (800340c <TIM_OC4_SetConfig+0xbc>)
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	031b      	lsls	r3, r3, #12
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a19      	ldr	r2, [pc, #100]	; (8003410 <TIM_OC4_SetConfig+0xc0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00b      	beq.n	80033c8 <TIM_OC4_SetConfig+0x78>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a18      	ldr	r2, [pc, #96]	; (8003414 <TIM_OC4_SetConfig+0xc4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d007      	beq.n	80033c8 <TIM_OC4_SetConfig+0x78>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a17      	ldr	r2, [pc, #92]	; (8003418 <TIM_OC4_SetConfig+0xc8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d003      	beq.n	80033c8 <TIM_OC4_SetConfig+0x78>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a16      	ldr	r2, [pc, #88]	; (800341c <TIM_OC4_SetConfig+0xcc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d109      	bne.n	80033dc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	4a15      	ldr	r2, [pc, #84]	; (8003420 <TIM_OC4_SetConfig+0xd0>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	019b      	lsls	r3, r3, #6
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	621a      	str	r2, [r3, #32]
}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b006      	add	sp, #24
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	ffffefff 	.word	0xffffefff
 8003404:	ffff8fff 	.word	0xffff8fff
 8003408:	fffffcff 	.word	0xfffffcff
 800340c:	ffffdfff 	.word	0xffffdfff
 8003410:	40012c00 	.word	0x40012c00
 8003414:	40014000 	.word	0x40014000
 8003418:	40014400 	.word	0x40014400
 800341c:	40014800 	.word	0x40014800
 8003420:	ffffbfff 	.word	0xffffbfff

08003424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	2201      	movs	r2, #1
 800343c:	4393      	bics	r3, r2
 800343e:	001a      	movs	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	22f0      	movs	r2, #240	; 0xf0
 800344e:	4393      	bics	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	220a      	movs	r2, #10
 8003460:	4393      	bics	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	621a      	str	r2, [r3, #32]
}
 8003478:	46c0      	nop			; (mov r8, r8)
 800347a:	46bd      	mov	sp, r7
 800347c:	b006      	add	sp, #24
 800347e:	bd80      	pop	{r7, pc}

08003480 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	2210      	movs	r2, #16
 8003492:	4393      	bics	r3, r2
 8003494:	001a      	movs	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	4a0d      	ldr	r2, [pc, #52]	; (80034e0 <TIM_TI2_ConfigInputStage+0x60>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	031b      	lsls	r3, r3, #12
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	22a0      	movs	r2, #160	; 0xa0
 80034bc:	4393      	bics	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	621a      	str	r2, [r3, #32]
}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	46bd      	mov	sp, r7
 80034da:	b006      	add	sp, #24
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	ffff0fff 	.word	0xffff0fff

080034e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2270      	movs	r2, #112	; 0x70
 80034f8:	4393      	bics	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	2207      	movs	r2, #7
 8003504:	4313      	orrs	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	609a      	str	r2, [r3, #8]
}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	46bd      	mov	sp, r7
 8003512:	b004      	add	sp, #16
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	4a09      	ldr	r2, [pc, #36]	; (8003554 <TIM_ETR_SetConfig+0x3c>)
 8003530:	4013      	ands	r3, r2
 8003532:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	021a      	lsls	r2, r3, #8
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	431a      	orrs	r2, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4313      	orrs	r3, r2
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	609a      	str	r2, [r3, #8]
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	b006      	add	sp, #24
 8003552:	bd80      	pop	{r7, pc}
 8003554:	ffff00ff 	.word	0xffff00ff

08003558 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	221f      	movs	r2, #31
 8003568:	4013      	ands	r3, r2
 800356a:	2201      	movs	r2, #1
 800356c:	409a      	lsls	r2, r3
 800356e:	0013      	movs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	43d2      	mvns	r2, r2
 800357a:	401a      	ands	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a1a      	ldr	r2, [r3, #32]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	211f      	movs	r1, #31
 8003588:	400b      	ands	r3, r1
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4099      	lsls	r1, r3
 800358e:	000b      	movs	r3, r1
 8003590:	431a      	orrs	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	621a      	str	r2, [r3, #32]
}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	46bd      	mov	sp, r7
 800359a:	b006      	add	sp, #24
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	223c      	movs	r2, #60	; 0x3c
 80035ae:	5c9b      	ldrb	r3, [r3, r2]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e047      	b.n	8003648 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	223c      	movs	r2, #60	; 0x3c
 80035bc:	2101      	movs	r1, #1
 80035be:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	223d      	movs	r2, #61	; 0x3d
 80035c4:	2102      	movs	r1, #2
 80035c6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2270      	movs	r2, #112	; 0x70
 80035dc:	4393      	bics	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a16      	ldr	r2, [pc, #88]	; (8003650 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00f      	beq.n	800361c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	05db      	lsls	r3, r3, #23
 8003604:	429a      	cmp	r2, r3
 8003606:	d009      	beq.n	800361c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a11      	ldr	r2, [pc, #68]	; (8003654 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d004      	beq.n	800361c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a10      	ldr	r2, [pc, #64]	; (8003658 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d10c      	bne.n	8003636 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2280      	movs	r2, #128	; 0x80
 8003620:	4393      	bics	r3, r2
 8003622:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	4313      	orrs	r3, r2
 800362c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	223d      	movs	r2, #61	; 0x3d
 800363a:	2101      	movs	r1, #1
 800363c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	223c      	movs	r2, #60	; 0x3c
 8003642:	2100      	movs	r1, #0
 8003644:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	0018      	movs	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	b004      	add	sp, #16
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40012c00 	.word	0x40012c00
 8003654:	40000400 	.word	0x40000400
 8003658:	40014000 	.word	0x40014000

0800365c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e044      	b.n	80036f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003672:	2b00      	cmp	r3, #0
 8003674:	d107      	bne.n	8003686 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2274      	movs	r2, #116	; 0x74
 800367a:	2100      	movs	r1, #0
 800367c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	0018      	movs	r0, r3
 8003682:	f7fd f971 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2224      	movs	r2, #36	; 0x24
 800368a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2101      	movs	r1, #1
 8003698:	438a      	bics	r2, r1
 800369a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	0018      	movs	r0, r3
 80036a0:	f000 fbce 	bl	8003e40 <UART_SetConfig>
 80036a4:	0003      	movs	r3, r0
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e024      	b.n	80036f8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	0018      	movs	r0, r3
 80036ba:	f000 fd01 	bl	80040c0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	490d      	ldr	r1, [pc, #52]	; (8003700 <HAL_UART_Init+0xa4>)
 80036ca:	400a      	ands	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	212a      	movs	r1, #42	; 0x2a
 80036da:	438a      	bics	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2101      	movs	r1, #1
 80036ea:	430a      	orrs	r2, r1
 80036ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	0018      	movs	r0, r3
 80036f2:	f000 fd99 	bl	8004228 <UART_CheckIdleState>
 80036f6:	0003      	movs	r3, r0
}
 80036f8:	0018      	movs	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b002      	add	sp, #8
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	ffffb7ff 	.word	0xffffb7ff

08003704 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	; 0x28
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	1dbb      	adds	r3, r7, #6
 8003712:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003718:	2b20      	cmp	r3, #32
 800371a:	d000      	beq.n	800371e <HAL_UART_Transmit+0x1a>
 800371c:	e096      	b.n	800384c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_UART_Transmit+0x28>
 8003724:	1dbb      	adds	r3, r7, #6
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e08e      	b.n	800384e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	015b      	lsls	r3, r3, #5
 8003738:	429a      	cmp	r2, r3
 800373a:	d109      	bne.n	8003750 <HAL_UART_Transmit+0x4c>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d105      	bne.n	8003750 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2201      	movs	r2, #1
 8003748:	4013      	ands	r3, r2
 800374a:	d001      	beq.n	8003750 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e07e      	b.n	800384e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2274      	movs	r2, #116	; 0x74
 8003754:	5c9b      	ldrb	r3, [r3, r2]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_UART_Transmit+0x5a>
 800375a:	2302      	movs	r3, #2
 800375c:	e077      	b.n	800384e <HAL_UART_Transmit+0x14a>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2274      	movs	r2, #116	; 0x74
 8003762:	2101      	movs	r1, #1
 8003764:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2280      	movs	r2, #128	; 0x80
 800376a:	2100      	movs	r1, #0
 800376c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2221      	movs	r2, #33	; 0x21
 8003772:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003774:	f7fd fa7e 	bl	8000c74 <HAL_GetTick>
 8003778:	0003      	movs	r3, r0
 800377a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1dba      	adds	r2, r7, #6
 8003780:	2150      	movs	r1, #80	; 0x50
 8003782:	8812      	ldrh	r2, [r2, #0]
 8003784:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1dba      	adds	r2, r7, #6
 800378a:	2152      	movs	r1, #82	; 0x52
 800378c:	8812      	ldrh	r2, [r2, #0]
 800378e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	015b      	lsls	r3, r3, #5
 8003798:	429a      	cmp	r2, r3
 800379a:	d108      	bne.n	80037ae <HAL_UART_Transmit+0xaa>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d104      	bne.n	80037ae <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	61bb      	str	r3, [r7, #24]
 80037ac:	e003      	b.n	80037b6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2274      	movs	r2, #116	; 0x74
 80037ba:	2100      	movs	r1, #0
 80037bc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80037be:	e02d      	b.n	800381c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	0013      	movs	r3, r2
 80037ca:	2200      	movs	r2, #0
 80037cc:	2180      	movs	r1, #128	; 0x80
 80037ce:	f000 fd73 	bl	80042b8 <UART_WaitOnFlagUntilTimeout>
 80037d2:	1e03      	subs	r3, r0, #0
 80037d4:	d001      	beq.n	80037da <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e039      	b.n	800384e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10b      	bne.n	80037f8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	881a      	ldrh	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	05d2      	lsls	r2, r2, #23
 80037ea:	0dd2      	lsrs	r2, r2, #23
 80037ec:	b292      	uxth	r2, r2
 80037ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	3302      	adds	r3, #2
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	e008      	b.n	800380a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	781a      	ldrb	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	b292      	uxth	r2, r2
 8003802:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	3301      	adds	r3, #1
 8003808:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2252      	movs	r2, #82	; 0x52
 800380e:	5a9b      	ldrh	r3, [r3, r2]
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b299      	uxth	r1, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2252      	movs	r2, #82	; 0x52
 800381a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2252      	movs	r2, #82	; 0x52
 8003820:	5a9b      	ldrh	r3, [r3, r2]
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1cb      	bne.n	80037c0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	0013      	movs	r3, r2
 8003832:	2200      	movs	r2, #0
 8003834:	2140      	movs	r1, #64	; 0x40
 8003836:	f000 fd3f 	bl	80042b8 <UART_WaitOnFlagUntilTimeout>
 800383a:	1e03      	subs	r3, r0, #0
 800383c:	d001      	beq.n	8003842 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e005      	b.n	800384e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2220      	movs	r2, #32
 8003846:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	e000      	b.n	800384e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800384c:	2302      	movs	r3, #2
  }
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b008      	add	sp, #32
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003858:	b590      	push	{r4, r7, lr}
 800385a:	b0ab      	sub	sp, #172	; 0xac
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	22a4      	movs	r2, #164	; 0xa4
 8003868:	18b9      	adds	r1, r7, r2
 800386a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	20a0      	movs	r0, #160	; 0xa0
 8003874:	1839      	adds	r1, r7, r0
 8003876:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	219c      	movs	r1, #156	; 0x9c
 8003880:	1879      	adds	r1, r7, r1
 8003882:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003884:	0011      	movs	r1, r2
 8003886:	18bb      	adds	r3, r7, r2
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a99      	ldr	r2, [pc, #612]	; (8003af0 <HAL_UART_IRQHandler+0x298>)
 800388c:	4013      	ands	r3, r2
 800388e:	2298      	movs	r2, #152	; 0x98
 8003890:	18bc      	adds	r4, r7, r2
 8003892:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003894:	18bb      	adds	r3, r7, r2
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d114      	bne.n	80038c6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800389c:	187b      	adds	r3, r7, r1
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2220      	movs	r2, #32
 80038a2:	4013      	ands	r3, r2
 80038a4:	d00f      	beq.n	80038c6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038a6:	183b      	adds	r3, r7, r0
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2220      	movs	r2, #32
 80038ac:	4013      	ands	r3, r2
 80038ae:	d00a      	beq.n	80038c6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d100      	bne.n	80038ba <HAL_UART_IRQHandler+0x62>
 80038b8:	e296      	b.n	8003de8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	0010      	movs	r0, r2
 80038c2:	4798      	blx	r3
      }
      return;
 80038c4:	e290      	b.n	8003de8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80038c6:	2398      	movs	r3, #152	; 0x98
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d100      	bne.n	80038d2 <HAL_UART_IRQHandler+0x7a>
 80038d0:	e114      	b.n	8003afc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80038d2:	239c      	movs	r3, #156	; 0x9c
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2201      	movs	r2, #1
 80038da:	4013      	ands	r3, r2
 80038dc:	d106      	bne.n	80038ec <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80038de:	23a0      	movs	r3, #160	; 0xa0
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a83      	ldr	r2, [pc, #524]	; (8003af4 <HAL_UART_IRQHandler+0x29c>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	d100      	bne.n	80038ec <HAL_UART_IRQHandler+0x94>
 80038ea:	e107      	b.n	8003afc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038ec:	23a4      	movs	r3, #164	; 0xa4
 80038ee:	18fb      	adds	r3, r7, r3
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2201      	movs	r2, #1
 80038f4:	4013      	ands	r3, r2
 80038f6:	d012      	beq.n	800391e <HAL_UART_IRQHandler+0xc6>
 80038f8:	23a0      	movs	r3, #160	; 0xa0
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	2380      	movs	r3, #128	; 0x80
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4013      	ands	r3, r2
 8003904:	d00b      	beq.n	800391e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2201      	movs	r2, #1
 800390c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2280      	movs	r2, #128	; 0x80
 8003912:	589b      	ldr	r3, [r3, r2]
 8003914:	2201      	movs	r2, #1
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2180      	movs	r1, #128	; 0x80
 800391c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800391e:	23a4      	movs	r3, #164	; 0xa4
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2202      	movs	r2, #2
 8003926:	4013      	ands	r3, r2
 8003928:	d011      	beq.n	800394e <HAL_UART_IRQHandler+0xf6>
 800392a:	239c      	movs	r3, #156	; 0x9c
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2201      	movs	r2, #1
 8003932:	4013      	ands	r3, r2
 8003934:	d00b      	beq.n	800394e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2202      	movs	r2, #2
 800393c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2280      	movs	r2, #128	; 0x80
 8003942:	589b      	ldr	r3, [r3, r2]
 8003944:	2204      	movs	r2, #4
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2180      	movs	r1, #128	; 0x80
 800394c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800394e:	23a4      	movs	r3, #164	; 0xa4
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2204      	movs	r2, #4
 8003956:	4013      	ands	r3, r2
 8003958:	d011      	beq.n	800397e <HAL_UART_IRQHandler+0x126>
 800395a:	239c      	movs	r3, #156	; 0x9c
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2201      	movs	r2, #1
 8003962:	4013      	ands	r3, r2
 8003964:	d00b      	beq.n	800397e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2204      	movs	r2, #4
 800396c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2280      	movs	r2, #128	; 0x80
 8003972:	589b      	ldr	r3, [r3, r2]
 8003974:	2202      	movs	r2, #2
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2180      	movs	r1, #128	; 0x80
 800397c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800397e:	23a4      	movs	r3, #164	; 0xa4
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2208      	movs	r2, #8
 8003986:	4013      	ands	r3, r2
 8003988:	d017      	beq.n	80039ba <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800398a:	23a0      	movs	r3, #160	; 0xa0
 800398c:	18fb      	adds	r3, r7, r3
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2220      	movs	r2, #32
 8003992:	4013      	ands	r3, r2
 8003994:	d105      	bne.n	80039a2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003996:	239c      	movs	r3, #156	; 0x9c
 8003998:	18fb      	adds	r3, r7, r3
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2201      	movs	r2, #1
 800399e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80039a0:	d00b      	beq.n	80039ba <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2208      	movs	r2, #8
 80039a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2280      	movs	r2, #128	; 0x80
 80039ae:	589b      	ldr	r3, [r3, r2]
 80039b0:	2208      	movs	r2, #8
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2180      	movs	r1, #128	; 0x80
 80039b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039ba:	23a4      	movs	r3, #164	; 0xa4
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	2380      	movs	r3, #128	; 0x80
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	4013      	ands	r3, r2
 80039c6:	d013      	beq.n	80039f0 <HAL_UART_IRQHandler+0x198>
 80039c8:	23a0      	movs	r3, #160	; 0xa0
 80039ca:	18fb      	adds	r3, r7, r3
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	2380      	movs	r3, #128	; 0x80
 80039d0:	04db      	lsls	r3, r3, #19
 80039d2:	4013      	ands	r3, r2
 80039d4:	d00c      	beq.n	80039f0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2280      	movs	r2, #128	; 0x80
 80039dc:	0112      	lsls	r2, r2, #4
 80039de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2280      	movs	r2, #128	; 0x80
 80039e4:	589b      	ldr	r3, [r3, r2]
 80039e6:	2220      	movs	r2, #32
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2180      	movs	r1, #128	; 0x80
 80039ee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2280      	movs	r2, #128	; 0x80
 80039f4:	589b      	ldr	r3, [r3, r2]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d100      	bne.n	80039fc <HAL_UART_IRQHandler+0x1a4>
 80039fa:	e1f7      	b.n	8003dec <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80039fc:	23a4      	movs	r3, #164	; 0xa4
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2220      	movs	r2, #32
 8003a04:	4013      	ands	r3, r2
 8003a06:	d00e      	beq.n	8003a26 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a08:	23a0      	movs	r3, #160	; 0xa0
 8003a0a:	18fb      	adds	r3, r7, r3
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	4013      	ands	r3, r2
 8003a12:	d008      	beq.n	8003a26 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d004      	beq.n	8003a26 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	0010      	movs	r0, r2
 8003a24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2280      	movs	r2, #128	; 0x80
 8003a2a:	589b      	ldr	r3, [r3, r2]
 8003a2c:	2194      	movs	r1, #148	; 0x94
 8003a2e:	187a      	adds	r2, r7, r1
 8003a30:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2240      	movs	r2, #64	; 0x40
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b40      	cmp	r3, #64	; 0x40
 8003a3e:	d004      	beq.n	8003a4a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a40:	187b      	adds	r3, r7, r1
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2228      	movs	r2, #40	; 0x28
 8003a46:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a48:	d047      	beq.n	8003ada <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f000 fcf7 	bl	8004440 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2240      	movs	r2, #64	; 0x40
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b40      	cmp	r3, #64	; 0x40
 8003a5e:	d137      	bne.n	8003ad0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a60:	f3ef 8310 	mrs	r3, PRIMASK
 8003a64:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003a66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a68:	2090      	movs	r0, #144	; 0x90
 8003a6a:	183a      	adds	r2, r7, r0
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	2301      	movs	r3, #1
 8003a70:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a74:	f383 8810 	msr	PRIMASK, r3
}
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2140      	movs	r1, #64	; 0x40
 8003a86:	438a      	bics	r2, r1
 8003a88:	609a      	str	r2, [r3, #8]
 8003a8a:	183b      	adds	r3, r7, r0
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a92:	f383 8810 	msr	PRIMASK, r3
}
 8003a96:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d012      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	4a14      	ldr	r2, [pc, #80]	; (8003af8 <HAL_UART_IRQHandler+0x2a0>)
 8003aa6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	0018      	movs	r0, r3
 8003aae:	f7fe f805 	bl	8001abc <HAL_DMA_Abort_IT>
 8003ab2:	1e03      	subs	r3, r0, #0
 8003ab4:	d01a      	beq.n	8003aec <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac4:	e012      	b.n	8003aec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f000 f9a5 	bl	8003e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ace:	e00d      	b.n	8003aec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f000 f9a0 	bl	8003e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad8:	e008      	b.n	8003aec <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	0018      	movs	r0, r3
 8003ade:	f000 f99b 	bl	8003e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2280      	movs	r2, #128	; 0x80
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003aea:	e17f      	b.n	8003dec <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aec:	46c0      	nop			; (mov r8, r8)
    return;
 8003aee:	e17d      	b.n	8003dec <HAL_UART_IRQHandler+0x594>
 8003af0:	0000080f 	.word	0x0000080f
 8003af4:	04000120 	.word	0x04000120
 8003af8:	08004505 	.word	0x08004505

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d000      	beq.n	8003b06 <HAL_UART_IRQHandler+0x2ae>
 8003b04:	e131      	b.n	8003d6a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b06:	23a4      	movs	r3, #164	; 0xa4
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2210      	movs	r2, #16
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d100      	bne.n	8003b14 <HAL_UART_IRQHandler+0x2bc>
 8003b12:	e12a      	b.n	8003d6a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b14:	23a0      	movs	r3, #160	; 0xa0
 8003b16:	18fb      	adds	r3, r7, r3
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2210      	movs	r2, #16
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d100      	bne.n	8003b22 <HAL_UART_IRQHandler+0x2ca>
 8003b20:	e123      	b.n	8003d6a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2210      	movs	r2, #16
 8003b28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2240      	movs	r2, #64	; 0x40
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b40      	cmp	r3, #64	; 0x40
 8003b36:	d000      	beq.n	8003b3a <HAL_UART_IRQHandler+0x2e2>
 8003b38:	e09b      	b.n	8003c72 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	217e      	movs	r1, #126	; 0x7e
 8003b44:	187b      	adds	r3, r7, r1
 8003b46:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003b48:	187b      	adds	r3, r7, r1
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d100      	bne.n	8003b52 <HAL_UART_IRQHandler+0x2fa>
 8003b50:	e14e      	b.n	8003df0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2258      	movs	r2, #88	; 0x58
 8003b56:	5a9b      	ldrh	r3, [r3, r2]
 8003b58:	187a      	adds	r2, r7, r1
 8003b5a:	8812      	ldrh	r2, [r2, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d300      	bcc.n	8003b62 <HAL_UART_IRQHandler+0x30a>
 8003b60:	e146      	b.n	8003df0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	187a      	adds	r2, r7, r1
 8003b66:	215a      	movs	r1, #90	; 0x5a
 8003b68:	8812      	ldrh	r2, [r2, #0]
 8003b6a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	d06e      	beq.n	8003c54 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b76:	f3ef 8310 	mrs	r3, PRIMASK
 8003b7a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b80:	2301      	movs	r3, #1
 8003b82:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b86:	f383 8810 	msr	PRIMASK, r3
}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	499a      	ldr	r1, [pc, #616]	; (8003e00 <HAL_UART_IRQHandler+0x5a8>)
 8003b98:	400a      	ands	r2, r1
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba2:	f383 8810 	msr	PRIMASK, r3
}
 8003ba6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb0:	677b      	str	r3, [r7, #116]	; 0x74
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb8:	f383 8810 	msr	PRIMASK, r3
}
 8003bbc:	46c0      	nop			; (mov r8, r8)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2101      	movs	r1, #1
 8003bca:	438a      	bics	r2, r1
 8003bcc:	609a      	str	r2, [r3, #8]
 8003bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bd4:	f383 8810 	msr	PRIMASK, r3
}
 8003bd8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bda:	f3ef 8310 	mrs	r3, PRIMASK
 8003bde:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003be2:	673b      	str	r3, [r7, #112]	; 0x70
 8003be4:	2301      	movs	r3, #1
 8003be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bea:	f383 8810 	msr	PRIMASK, r3
}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2140      	movs	r1, #64	; 0x40
 8003bfc:	438a      	bics	r2, r1
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c02:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c06:	f383 8810 	msr	PRIMASK, r3
}
 8003c0a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c18:	f3ef 8310 	mrs	r3, PRIMASK
 8003c1c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c22:	2301      	movs	r3, #1
 8003c24:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c28:	f383 8810 	msr	PRIMASK, r3
}
 8003c2c:	46c0      	nop			; (mov r8, r8)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2110      	movs	r1, #16
 8003c3a:	438a      	bics	r2, r1
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c40:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c44:	f383 8810 	msr	PRIMASK, r3
}
 8003c48:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f7fd fefc 	bl	8001a4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2258      	movs	r2, #88	; 0x58
 8003c58:	5a9a      	ldrh	r2, [r3, r2]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	215a      	movs	r1, #90	; 0x5a
 8003c5e:	5a5b      	ldrh	r3, [r3, r1]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	0011      	movs	r1, r2
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f000 f8dc 	bl	8003e28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c70:	e0be      	b.n	8003df0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2258      	movs	r2, #88	; 0x58
 8003c76:	5a99      	ldrh	r1, [r3, r2]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	225a      	movs	r2, #90	; 0x5a
 8003c7c:	5a9b      	ldrh	r3, [r3, r2]
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	208e      	movs	r0, #142	; 0x8e
 8003c82:	183b      	adds	r3, r7, r0
 8003c84:	1a8a      	subs	r2, r1, r2
 8003c86:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	225a      	movs	r2, #90	; 0x5a
 8003c8c:	5a9b      	ldrh	r3, [r3, r2]
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d100      	bne.n	8003c96 <HAL_UART_IRQHandler+0x43e>
 8003c94:	e0ae      	b.n	8003df4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8003c96:	183b      	adds	r3, r7, r0
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d100      	bne.n	8003ca0 <HAL_UART_IRQHandler+0x448>
 8003c9e:	e0a9      	b.n	8003df4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ca8:	2488      	movs	r4, #136	; 0x88
 8003caa:	193a      	adds	r2, r7, r4
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	2301      	movs	r3, #1
 8003cb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f383 8810 	msr	PRIMASK, r3
}
 8003cb8:	46c0      	nop			; (mov r8, r8)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	494f      	ldr	r1, [pc, #316]	; (8003e04 <HAL_UART_IRQHandler+0x5ac>)
 8003cc6:	400a      	ands	r2, r1
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	193b      	adds	r3, r7, r4
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f383 8810 	msr	PRIMASK, r3
}
 8003cd6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cdc:	61bb      	str	r3, [r7, #24]
  return(result);
 8003cde:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce0:	2484      	movs	r4, #132	; 0x84
 8003ce2:	193a      	adds	r2, r7, r4
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	f383 8810 	msr	PRIMASK, r3
}
 8003cf0:	46c0      	nop			; (mov r8, r8)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	438a      	bics	r2, r1
 8003d00:	609a      	str	r2, [r3, #8]
 8003d02:	193b      	adds	r3, r7, r4
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	f383 8810 	msr	PRIMASK, r3
}
 8003d0e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d22:	f3ef 8310 	mrs	r3, PRIMASK
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d2a:	2480      	movs	r4, #128	; 0x80
 8003d2c:	193a      	adds	r2, r7, r4
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	2301      	movs	r3, #1
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d36:	f383 8810 	msr	PRIMASK, r3
}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2110      	movs	r1, #16
 8003d48:	438a      	bics	r2, r1
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	193b      	adds	r3, r7, r4
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d54:	f383 8810 	msr	PRIMASK, r3
}
 8003d58:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d5a:	183b      	adds	r3, r7, r0
 8003d5c:	881a      	ldrh	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	0011      	movs	r1, r2
 8003d62:	0018      	movs	r0, r3
 8003d64:	f000 f860 	bl	8003e28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d68:	e044      	b.n	8003df4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d6a:	23a4      	movs	r3, #164	; 0xa4
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	035b      	lsls	r3, r3, #13
 8003d74:	4013      	ands	r3, r2
 8003d76:	d010      	beq.n	8003d9a <HAL_UART_IRQHandler+0x542>
 8003d78:	239c      	movs	r3, #156	; 0x9c
 8003d7a:	18fb      	adds	r3, r7, r3
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	2380      	movs	r3, #128	; 0x80
 8003d80:	03db      	lsls	r3, r3, #15
 8003d82:	4013      	ands	r3, r2
 8003d84:	d009      	beq.n	8003d9a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2280      	movs	r2, #128	; 0x80
 8003d8c:	0352      	lsls	r2, r2, #13
 8003d8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	0018      	movs	r0, r3
 8003d94:	f000 fbf8 	bl	8004588 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d98:	e02f      	b.n	8003dfa <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d9a:	23a4      	movs	r3, #164	; 0xa4
 8003d9c:	18fb      	adds	r3, r7, r3
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2280      	movs	r2, #128	; 0x80
 8003da2:	4013      	ands	r3, r2
 8003da4:	d00f      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003da6:	23a0      	movs	r3, #160	; 0xa0
 8003da8:	18fb      	adds	r3, r7, r3
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2280      	movs	r2, #128	; 0x80
 8003dae:	4013      	ands	r3, r2
 8003db0:	d009      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d01e      	beq.n	8003df8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	0010      	movs	r0, r2
 8003dc2:	4798      	blx	r3
    }
    return;
 8003dc4:	e018      	b.n	8003df8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003dc6:	23a4      	movs	r3, #164	; 0xa4
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2240      	movs	r2, #64	; 0x40
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d013      	beq.n	8003dfa <HAL_UART_IRQHandler+0x5a2>
 8003dd2:	23a0      	movs	r3, #160	; 0xa0
 8003dd4:	18fb      	adds	r3, r7, r3
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2240      	movs	r2, #64	; 0x40
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d00d      	beq.n	8003dfa <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f000 fba6 	bl	8004532 <UART_EndTransmit_IT>
    return;
 8003de6:	e008      	b.n	8003dfa <HAL_UART_IRQHandler+0x5a2>
      return;
 8003de8:	46c0      	nop			; (mov r8, r8)
 8003dea:	e006      	b.n	8003dfa <HAL_UART_IRQHandler+0x5a2>
    return;
 8003dec:	46c0      	nop			; (mov r8, r8)
 8003dee:	e004      	b.n	8003dfa <HAL_UART_IRQHandler+0x5a2>
      return;
 8003df0:	46c0      	nop			; (mov r8, r8)
 8003df2:	e002      	b.n	8003dfa <HAL_UART_IRQHandler+0x5a2>
      return;
 8003df4:	46c0      	nop			; (mov r8, r8)
 8003df6:	e000      	b.n	8003dfa <HAL_UART_IRQHandler+0x5a2>
    return;
 8003df8:	46c0      	nop			; (mov r8, r8)
  }

}
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b02b      	add	sp, #172	; 0xac
 8003dfe:	bd90      	pop	{r4, r7, pc}
 8003e00:	fffffeff 	.word	0xfffffeff
 8003e04:	fffffedf 	.word	0xfffffedf

08003e08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e10:	46c0      	nop			; (mov r8, r8)
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b002      	add	sp, #8
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e20:	46c0      	nop			; (mov r8, r8)
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b002      	add	sp, #8
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	000a      	movs	r2, r1
 8003e32:	1cbb      	adds	r3, r7, #2
 8003e34:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b002      	add	sp, #8
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e48:	231e      	movs	r3, #30
 8003e4a:	18fb      	adds	r3, r7, r3
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a8d      	ldr	r2, [pc, #564]	; (80040a4 <UART_SetConfig+0x264>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	0019      	movs	r1, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	4a88      	ldr	r2, [pc, #544]	; (80040a8 <UART_SetConfig+0x268>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	0019      	movs	r1, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	4a7f      	ldr	r2, [pc, #508]	; (80040ac <UART_SetConfig+0x26c>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	0019      	movs	r1, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a7b      	ldr	r2, [pc, #492]	; (80040b0 <UART_SetConfig+0x270>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d127      	bne.n	8003f16 <UART_SetConfig+0xd6>
 8003ec6:	4b7b      	ldr	r3, [pc, #492]	; (80040b4 <UART_SetConfig+0x274>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	2203      	movs	r2, #3
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d00d      	beq.n	8003eee <UART_SetConfig+0xae>
 8003ed2:	d81b      	bhi.n	8003f0c <UART_SetConfig+0xcc>
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d014      	beq.n	8003f02 <UART_SetConfig+0xc2>
 8003ed8:	d818      	bhi.n	8003f0c <UART_SetConfig+0xcc>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <UART_SetConfig+0xa4>
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d00a      	beq.n	8003ef8 <UART_SetConfig+0xb8>
 8003ee2:	e013      	b.n	8003f0c <UART_SetConfig+0xcc>
 8003ee4:	231f      	movs	r3, #31
 8003ee6:	18fb      	adds	r3, r7, r3
 8003ee8:	2200      	movs	r2, #0
 8003eea:	701a      	strb	r2, [r3, #0]
 8003eec:	e021      	b.n	8003f32 <UART_SetConfig+0xf2>
 8003eee:	231f      	movs	r3, #31
 8003ef0:	18fb      	adds	r3, r7, r3
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	e01c      	b.n	8003f32 <UART_SetConfig+0xf2>
 8003ef8:	231f      	movs	r3, #31
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	2204      	movs	r2, #4
 8003efe:	701a      	strb	r2, [r3, #0]
 8003f00:	e017      	b.n	8003f32 <UART_SetConfig+0xf2>
 8003f02:	231f      	movs	r3, #31
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	2208      	movs	r2, #8
 8003f08:	701a      	strb	r2, [r3, #0]
 8003f0a:	e012      	b.n	8003f32 <UART_SetConfig+0xf2>
 8003f0c:	231f      	movs	r3, #31
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	2210      	movs	r2, #16
 8003f12:	701a      	strb	r2, [r3, #0]
 8003f14:	e00d      	b.n	8003f32 <UART_SetConfig+0xf2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a67      	ldr	r2, [pc, #412]	; (80040b8 <UART_SetConfig+0x278>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d104      	bne.n	8003f2a <UART_SetConfig+0xea>
 8003f20:	231f      	movs	r3, #31
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]
 8003f28:	e003      	b.n	8003f32 <UART_SetConfig+0xf2>
 8003f2a:	231f      	movs	r3, #31
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	2210      	movs	r2, #16
 8003f30:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69da      	ldr	r2, [r3, #28]
 8003f36:	2380      	movs	r3, #128	; 0x80
 8003f38:	021b      	lsls	r3, r3, #8
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d15d      	bne.n	8003ffa <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003f3e:	231f      	movs	r3, #31
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d015      	beq.n	8003f74 <UART_SetConfig+0x134>
 8003f48:	dc18      	bgt.n	8003f7c <UART_SetConfig+0x13c>
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d00d      	beq.n	8003f6a <UART_SetConfig+0x12a>
 8003f4e:	dc15      	bgt.n	8003f7c <UART_SetConfig+0x13c>
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <UART_SetConfig+0x11a>
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d005      	beq.n	8003f64 <UART_SetConfig+0x124>
 8003f58:	e010      	b.n	8003f7c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f5a:	f7fe fcd7 	bl	800290c <HAL_RCC_GetPCLK1Freq>
 8003f5e:	0003      	movs	r3, r0
 8003f60:	61bb      	str	r3, [r7, #24]
        break;
 8003f62:	e012      	b.n	8003f8a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f64:	4b55      	ldr	r3, [pc, #340]	; (80040bc <UART_SetConfig+0x27c>)
 8003f66:	61bb      	str	r3, [r7, #24]
        break;
 8003f68:	e00f      	b.n	8003f8a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6a:	f7fe fc61 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 8003f6e:	0003      	movs	r3, r0
 8003f70:	61bb      	str	r3, [r7, #24]
        break;
 8003f72:	e00a      	b.n	8003f8a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	61bb      	str	r3, [r7, #24]
        break;
 8003f7a:	e006      	b.n	8003f8a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f80:	231e      	movs	r3, #30
 8003f82:	18fb      	adds	r3, r7, r3
 8003f84:	2201      	movs	r2, #1
 8003f86:	701a      	strb	r2, [r3, #0]
        break;
 8003f88:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d100      	bne.n	8003f92 <UART_SetConfig+0x152>
 8003f90:	e07b      	b.n	800408a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	005a      	lsls	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	085b      	lsrs	r3, r3, #1
 8003f9c:	18d2      	adds	r2, r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	0019      	movs	r1, r3
 8003fa4:	0010      	movs	r0, r2
 8003fa6:	f7fc f8b9 	bl	800011c <__udivsi3>
 8003faa:	0003      	movs	r3, r0
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	2b0f      	cmp	r3, #15
 8003fb4:	d91c      	bls.n	8003ff0 <UART_SetConfig+0x1b0>
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	2380      	movs	r3, #128	; 0x80
 8003fba:	025b      	lsls	r3, r3, #9
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d217      	bcs.n	8003ff0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	200e      	movs	r0, #14
 8003fc6:	183b      	adds	r3, r7, r0
 8003fc8:	210f      	movs	r1, #15
 8003fca:	438a      	bics	r2, r1
 8003fcc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	085b      	lsrs	r3, r3, #1
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2207      	movs	r2, #7
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	b299      	uxth	r1, r3
 8003fda:	183b      	adds	r3, r7, r0
 8003fdc:	183a      	adds	r2, r7, r0
 8003fde:	8812      	ldrh	r2, [r2, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	183a      	adds	r2, r7, r0
 8003fea:	8812      	ldrh	r2, [r2, #0]
 8003fec:	60da      	str	r2, [r3, #12]
 8003fee:	e04c      	b.n	800408a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003ff0:	231e      	movs	r3, #30
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	701a      	strb	r2, [r3, #0]
 8003ff8:	e047      	b.n	800408a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ffa:	231f      	movs	r3, #31
 8003ffc:	18fb      	adds	r3, r7, r3
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b08      	cmp	r3, #8
 8004002:	d015      	beq.n	8004030 <UART_SetConfig+0x1f0>
 8004004:	dc18      	bgt.n	8004038 <UART_SetConfig+0x1f8>
 8004006:	2b04      	cmp	r3, #4
 8004008:	d00d      	beq.n	8004026 <UART_SetConfig+0x1e6>
 800400a:	dc15      	bgt.n	8004038 <UART_SetConfig+0x1f8>
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <UART_SetConfig+0x1d6>
 8004010:	2b02      	cmp	r3, #2
 8004012:	d005      	beq.n	8004020 <UART_SetConfig+0x1e0>
 8004014:	e010      	b.n	8004038 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004016:	f7fe fc79 	bl	800290c <HAL_RCC_GetPCLK1Freq>
 800401a:	0003      	movs	r3, r0
 800401c:	61bb      	str	r3, [r7, #24]
        break;
 800401e:	e012      	b.n	8004046 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004020:	4b26      	ldr	r3, [pc, #152]	; (80040bc <UART_SetConfig+0x27c>)
 8004022:	61bb      	str	r3, [r7, #24]
        break;
 8004024:	e00f      	b.n	8004046 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004026:	f7fe fc03 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 800402a:	0003      	movs	r3, r0
 800402c:	61bb      	str	r3, [r7, #24]
        break;
 800402e:	e00a      	b.n	8004046 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	61bb      	str	r3, [r7, #24]
        break;
 8004036:	e006      	b.n	8004046 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800403c:	231e      	movs	r3, #30
 800403e:	18fb      	adds	r3, r7, r3
 8004040:	2201      	movs	r2, #1
 8004042:	701a      	strb	r2, [r3, #0]
        break;
 8004044:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01e      	beq.n	800408a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	085a      	lsrs	r2, r3, #1
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	18d2      	adds	r2, r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	0019      	movs	r1, r3
 800405c:	0010      	movs	r0, r2
 800405e:	f7fc f85d 	bl	800011c <__udivsi3>
 8004062:	0003      	movs	r3, r0
 8004064:	b29b      	uxth	r3, r3
 8004066:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b0f      	cmp	r3, #15
 800406c:	d909      	bls.n	8004082 <UART_SetConfig+0x242>
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	2380      	movs	r3, #128	; 0x80
 8004072:	025b      	lsls	r3, r3, #9
 8004074:	429a      	cmp	r2, r3
 8004076:	d204      	bcs.n	8004082 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	60da      	str	r2, [r3, #12]
 8004080:	e003      	b.n	800408a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004082:	231e      	movs	r3, #30
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	2201      	movs	r2, #1
 8004088:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004096:	231e      	movs	r3, #30
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	781b      	ldrb	r3, [r3, #0]
}
 800409c:	0018      	movs	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	b008      	add	sp, #32
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	ffff69f3 	.word	0xffff69f3
 80040a8:	ffffcfff 	.word	0xffffcfff
 80040ac:	fffff4ff 	.word	0xfffff4ff
 80040b0:	40013800 	.word	0x40013800
 80040b4:	40021000 	.word	0x40021000
 80040b8:	40004400 	.word	0x40004400
 80040bc:	007a1200 	.word	0x007a1200

080040c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	2201      	movs	r2, #1
 80040ce:	4013      	ands	r3, r2
 80040d0:	d00b      	beq.n	80040ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4a4a      	ldr	r2, [pc, #296]	; (8004204 <UART_AdvFeatureConfig+0x144>)
 80040da:	4013      	ands	r3, r2
 80040dc:	0019      	movs	r1, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	2202      	movs	r2, #2
 80040f0:	4013      	ands	r3, r2
 80040f2:	d00b      	beq.n	800410c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	4a43      	ldr	r2, [pc, #268]	; (8004208 <UART_AdvFeatureConfig+0x148>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	0019      	movs	r1, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	2204      	movs	r2, #4
 8004112:	4013      	ands	r3, r2
 8004114:	d00b      	beq.n	800412e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4a3b      	ldr	r2, [pc, #236]	; (800420c <UART_AdvFeatureConfig+0x14c>)
 800411e:	4013      	ands	r3, r2
 8004120:	0019      	movs	r1, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	2208      	movs	r2, #8
 8004134:	4013      	ands	r3, r2
 8004136:	d00b      	beq.n	8004150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	4a34      	ldr	r2, [pc, #208]	; (8004210 <UART_AdvFeatureConfig+0x150>)
 8004140:	4013      	ands	r3, r2
 8004142:	0019      	movs	r1, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	2210      	movs	r2, #16
 8004156:	4013      	ands	r3, r2
 8004158:	d00b      	beq.n	8004172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4a2c      	ldr	r2, [pc, #176]	; (8004214 <UART_AdvFeatureConfig+0x154>)
 8004162:	4013      	ands	r3, r2
 8004164:	0019      	movs	r1, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	2220      	movs	r2, #32
 8004178:	4013      	ands	r3, r2
 800417a:	d00b      	beq.n	8004194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	4a25      	ldr	r2, [pc, #148]	; (8004218 <UART_AdvFeatureConfig+0x158>)
 8004184:	4013      	ands	r3, r2
 8004186:	0019      	movs	r1, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	2240      	movs	r2, #64	; 0x40
 800419a:	4013      	ands	r3, r2
 800419c:	d01d      	beq.n	80041da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4a1d      	ldr	r2, [pc, #116]	; (800421c <UART_AdvFeatureConfig+0x15c>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	0019      	movs	r1, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ba:	2380      	movs	r3, #128	; 0x80
 80041bc:	035b      	lsls	r3, r3, #13
 80041be:	429a      	cmp	r2, r3
 80041c0:	d10b      	bne.n	80041da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	4a15      	ldr	r2, [pc, #84]	; (8004220 <UART_AdvFeatureConfig+0x160>)
 80041ca:	4013      	ands	r3, r2
 80041cc:	0019      	movs	r1, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	2280      	movs	r2, #128	; 0x80
 80041e0:	4013      	ands	r3, r2
 80041e2:	d00b      	beq.n	80041fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4a0e      	ldr	r2, [pc, #56]	; (8004224 <UART_AdvFeatureConfig+0x164>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	0019      	movs	r1, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	605a      	str	r2, [r3, #4]
  }
}
 80041fc:	46c0      	nop			; (mov r8, r8)
 80041fe:	46bd      	mov	sp, r7
 8004200:	b002      	add	sp, #8
 8004202:	bd80      	pop	{r7, pc}
 8004204:	fffdffff 	.word	0xfffdffff
 8004208:	fffeffff 	.word	0xfffeffff
 800420c:	fffbffff 	.word	0xfffbffff
 8004210:	ffff7fff 	.word	0xffff7fff
 8004214:	ffffefff 	.word	0xffffefff
 8004218:	ffffdfff 	.word	0xffffdfff
 800421c:	ffefffff 	.word	0xffefffff
 8004220:	ff9fffff 	.word	0xff9fffff
 8004224:	fff7ffff 	.word	0xfff7ffff

08004228 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af02      	add	r7, sp, #8
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2280      	movs	r2, #128	; 0x80
 8004234:	2100      	movs	r1, #0
 8004236:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004238:	f7fc fd1c 	bl	8000c74 <HAL_GetTick>
 800423c:	0003      	movs	r3, r0
 800423e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2208      	movs	r2, #8
 8004248:	4013      	ands	r3, r2
 800424a:	2b08      	cmp	r3, #8
 800424c:	d10c      	bne.n	8004268 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2280      	movs	r2, #128	; 0x80
 8004252:	0391      	lsls	r1, r2, #14
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	4a17      	ldr	r2, [pc, #92]	; (80042b4 <UART_CheckIdleState+0x8c>)
 8004258:	9200      	str	r2, [sp, #0]
 800425a:	2200      	movs	r2, #0
 800425c:	f000 f82c 	bl	80042b8 <UART_WaitOnFlagUntilTimeout>
 8004260:	1e03      	subs	r3, r0, #0
 8004262:	d001      	beq.n	8004268 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e021      	b.n	80042ac <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2204      	movs	r2, #4
 8004270:	4013      	ands	r3, r2
 8004272:	2b04      	cmp	r3, #4
 8004274:	d10c      	bne.n	8004290 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2280      	movs	r2, #128	; 0x80
 800427a:	03d1      	lsls	r1, r2, #15
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	4a0d      	ldr	r2, [pc, #52]	; (80042b4 <UART_CheckIdleState+0x8c>)
 8004280:	9200      	str	r2, [sp, #0]
 8004282:	2200      	movs	r2, #0
 8004284:	f000 f818 	bl	80042b8 <UART_WaitOnFlagUntilTimeout>
 8004288:	1e03      	subs	r3, r0, #0
 800428a:	d001      	beq.n	8004290 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e00d      	b.n	80042ac <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2274      	movs	r2, #116	; 0x74
 80042a6:	2100      	movs	r1, #0
 80042a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	0018      	movs	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b004      	add	sp, #16
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	01ffffff 	.word	0x01ffffff

080042b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b094      	sub	sp, #80	; 0x50
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	1dfb      	adds	r3, r7, #7
 80042c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c8:	e0a3      	b.n	8004412 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042cc:	3301      	adds	r3, #1
 80042ce:	d100      	bne.n	80042d2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80042d0:	e09f      	b.n	8004412 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d2:	f7fc fccf 	bl	8000c74 <HAL_GetTick>
 80042d6:	0002      	movs	r2, r0
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042de:	429a      	cmp	r2, r3
 80042e0:	d302      	bcc.n	80042e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80042e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d13d      	bne.n	8004364 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042e8:	f3ef 8310 	mrs	r3, PRIMASK
 80042ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042f0:	647b      	str	r3, [r7, #68]	; 0x44
 80042f2:	2301      	movs	r3, #1
 80042f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f8:	f383 8810 	msr	PRIMASK, r3
}
 80042fc:	46c0      	nop			; (mov r8, r8)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	494c      	ldr	r1, [pc, #304]	; (800443c <UART_WaitOnFlagUntilTimeout+0x184>)
 800430a:	400a      	ands	r2, r1
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004310:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004314:	f383 8810 	msr	PRIMASK, r3
}
 8004318:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800431a:	f3ef 8310 	mrs	r3, PRIMASK
 800431e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004322:	643b      	str	r3, [r7, #64]	; 0x40
 8004324:	2301      	movs	r3, #1
 8004326:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432a:	f383 8810 	msr	PRIMASK, r3
}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2101      	movs	r1, #1
 800433c:	438a      	bics	r2, r1
 800433e:	609a      	str	r2, [r3, #8]
 8004340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004342:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004346:	f383 8810 	msr	PRIMASK, r3
}
 800434a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2274      	movs	r2, #116	; 0x74
 800435c:	2100      	movs	r1, #0
 800435e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e067      	b.n	8004434 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2204      	movs	r2, #4
 800436c:	4013      	ands	r3, r2
 800436e:	d050      	beq.n	8004412 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	69da      	ldr	r2, [r3, #28]
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	401a      	ands	r2, r3
 800437c:	2380      	movs	r3, #128	; 0x80
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	429a      	cmp	r2, r3
 8004382:	d146      	bne.n	8004412 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2280      	movs	r2, #128	; 0x80
 800438a:	0112      	lsls	r2, r2, #4
 800438c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800438e:	f3ef 8310 	mrs	r3, PRIMASK
 8004392:	613b      	str	r3, [r7, #16]
  return(result);
 8004394:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004398:	2301      	movs	r3, #1
 800439a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f383 8810 	msr	PRIMASK, r3
}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4923      	ldr	r1, [pc, #140]	; (800443c <UART_WaitOnFlagUntilTimeout+0x184>)
 80043b0:	400a      	ands	r2, r1
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	f383 8810 	msr	PRIMASK, r3
}
 80043be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c0:	f3ef 8310 	mrs	r3, PRIMASK
 80043c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80043c6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80043ca:	2301      	movs	r3, #1
 80043cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	f383 8810 	msr	PRIMASK, r3
}
 80043d4:	46c0      	nop			; (mov r8, r8)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2101      	movs	r1, #1
 80043e2:	438a      	bics	r2, r1
 80043e4:	609a      	str	r2, [r3, #8]
 80043e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	f383 8810 	msr	PRIMASK, r3
}
 80043f0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2280      	movs	r2, #128	; 0x80
 8004402:	2120      	movs	r1, #32
 8004404:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2274      	movs	r2, #116	; 0x74
 800440a:	2100      	movs	r1, #0
 800440c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e010      	b.n	8004434 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	4013      	ands	r3, r2
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	425a      	negs	r2, r3
 8004422:	4153      	adcs	r3, r2
 8004424:	b2db      	uxtb	r3, r3
 8004426:	001a      	movs	r2, r3
 8004428:	1dfb      	adds	r3, r7, #7
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d100      	bne.n	8004432 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004430:	e74b      	b.n	80042ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	0018      	movs	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	b014      	add	sp, #80	; 0x50
 800443a:	bd80      	pop	{r7, pc}
 800443c:	fffffe5f 	.word	0xfffffe5f

08004440 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08e      	sub	sp, #56	; 0x38
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004448:	f3ef 8310 	mrs	r3, PRIMASK
 800444c:	617b      	str	r3, [r7, #20]
  return(result);
 800444e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004450:	637b      	str	r3, [r7, #52]	; 0x34
 8004452:	2301      	movs	r3, #1
 8004454:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	f383 8810 	msr	PRIMASK, r3
}
 800445c:	46c0      	nop			; (mov r8, r8)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4925      	ldr	r1, [pc, #148]	; (8004500 <UART_EndRxTransfer+0xc0>)
 800446a:	400a      	ands	r2, r1
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004470:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f383 8810 	msr	PRIMASK, r3
}
 8004478:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800447a:	f3ef 8310 	mrs	r3, PRIMASK
 800447e:	623b      	str	r3, [r7, #32]
  return(result);
 8004480:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004482:	633b      	str	r3, [r7, #48]	; 0x30
 8004484:	2301      	movs	r3, #1
 8004486:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	f383 8810 	msr	PRIMASK, r3
}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2101      	movs	r1, #1
 800449c:	438a      	bics	r2, r1
 800449e:	609a      	str	r2, [r3, #8]
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a6:	f383 8810 	msr	PRIMASK, r3
}
 80044aa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d118      	bne.n	80044e6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044b4:	f3ef 8310 	mrs	r3, PRIMASK
 80044b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80044ba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044be:	2301      	movs	r3, #1
 80044c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f383 8810 	msr	PRIMASK, r3
}
 80044c8:	46c0      	nop			; (mov r8, r8)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2110      	movs	r1, #16
 80044d6:	438a      	bics	r2, r1
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f383 8810 	msr	PRIMASK, r3
}
 80044e4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80044f8:	46c0      	nop			; (mov r8, r8)
 80044fa:	46bd      	mov	sp, r7
 80044fc:	b00e      	add	sp, #56	; 0x38
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	fffffedf 	.word	0xfffffedf

08004504 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	225a      	movs	r2, #90	; 0x5a
 8004516:	2100      	movs	r1, #0
 8004518:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2252      	movs	r2, #82	; 0x52
 800451e:	2100      	movs	r1, #0
 8004520:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	0018      	movs	r0, r3
 8004526:	f7ff fc77 	bl	8003e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	46bd      	mov	sp, r7
 800452e:	b004      	add	sp, #16
 8004530:	bd80      	pop	{r7, pc}

08004532 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b086      	sub	sp, #24
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800453a:	f3ef 8310 	mrs	r3, PRIMASK
 800453e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004540:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	2301      	movs	r3, #1
 8004546:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f383 8810 	msr	PRIMASK, r3
}
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2140      	movs	r1, #64	; 0x40
 800455c:	438a      	bics	r2, r1
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f383 8810 	msr	PRIMASK, r3
}
 800456a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2220      	movs	r2, #32
 8004570:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	0018      	movs	r0, r3
 800457c:	f7ff fc44 	bl	8003e08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004580:	46c0      	nop			; (mov r8, r8)
 8004582:	46bd      	mov	sp, r7
 8004584:	b006      	add	sp, #24
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004590:	46c0      	nop			; (mov r8, r8)
 8004592:	46bd      	mov	sp, r7
 8004594:	b002      	add	sp, #8
 8004596:	bd80      	pop	{r7, pc}

08004598 <__errno>:
 8004598:	4b01      	ldr	r3, [pc, #4]	; (80045a0 <__errno+0x8>)
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	4770      	bx	lr
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	2000000c 	.word	0x2000000c

080045a4 <__libc_init_array>:
 80045a4:	b570      	push	{r4, r5, r6, lr}
 80045a6:	2600      	movs	r6, #0
 80045a8:	4d0c      	ldr	r5, [pc, #48]	; (80045dc <__libc_init_array+0x38>)
 80045aa:	4c0d      	ldr	r4, [pc, #52]	; (80045e0 <__libc_init_array+0x3c>)
 80045ac:	1b64      	subs	r4, r4, r5
 80045ae:	10a4      	asrs	r4, r4, #2
 80045b0:	42a6      	cmp	r6, r4
 80045b2:	d109      	bne.n	80045c8 <__libc_init_array+0x24>
 80045b4:	2600      	movs	r6, #0
 80045b6:	f000 fc8b 	bl	8004ed0 <_init>
 80045ba:	4d0a      	ldr	r5, [pc, #40]	; (80045e4 <__libc_init_array+0x40>)
 80045bc:	4c0a      	ldr	r4, [pc, #40]	; (80045e8 <__libc_init_array+0x44>)
 80045be:	1b64      	subs	r4, r4, r5
 80045c0:	10a4      	asrs	r4, r4, #2
 80045c2:	42a6      	cmp	r6, r4
 80045c4:	d105      	bne.n	80045d2 <__libc_init_array+0x2e>
 80045c6:	bd70      	pop	{r4, r5, r6, pc}
 80045c8:	00b3      	lsls	r3, r6, #2
 80045ca:	58eb      	ldr	r3, [r5, r3]
 80045cc:	4798      	blx	r3
 80045ce:	3601      	adds	r6, #1
 80045d0:	e7ee      	b.n	80045b0 <__libc_init_array+0xc>
 80045d2:	00b3      	lsls	r3, r6, #2
 80045d4:	58eb      	ldr	r3, [r5, r3]
 80045d6:	4798      	blx	r3
 80045d8:	3601      	adds	r6, #1
 80045da:	e7f2      	b.n	80045c2 <__libc_init_array+0x1e>
 80045dc:	08004f5c 	.word	0x08004f5c
 80045e0:	08004f5c 	.word	0x08004f5c
 80045e4:	08004f5c 	.word	0x08004f5c
 80045e8:	08004f60 	.word	0x08004f60

080045ec <memset>:
 80045ec:	0003      	movs	r3, r0
 80045ee:	1882      	adds	r2, r0, r2
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d100      	bne.n	80045f6 <memset+0xa>
 80045f4:	4770      	bx	lr
 80045f6:	7019      	strb	r1, [r3, #0]
 80045f8:	3301      	adds	r3, #1
 80045fa:	e7f9      	b.n	80045f0 <memset+0x4>

080045fc <siprintf>:
 80045fc:	b40e      	push	{r1, r2, r3}
 80045fe:	b500      	push	{lr}
 8004600:	490b      	ldr	r1, [pc, #44]	; (8004630 <siprintf+0x34>)
 8004602:	b09c      	sub	sp, #112	; 0x70
 8004604:	ab1d      	add	r3, sp, #116	; 0x74
 8004606:	9002      	str	r0, [sp, #8]
 8004608:	9006      	str	r0, [sp, #24]
 800460a:	9107      	str	r1, [sp, #28]
 800460c:	9104      	str	r1, [sp, #16]
 800460e:	4809      	ldr	r0, [pc, #36]	; (8004634 <siprintf+0x38>)
 8004610:	4909      	ldr	r1, [pc, #36]	; (8004638 <siprintf+0x3c>)
 8004612:	cb04      	ldmia	r3!, {r2}
 8004614:	9105      	str	r1, [sp, #20]
 8004616:	6800      	ldr	r0, [r0, #0]
 8004618:	a902      	add	r1, sp, #8
 800461a:	9301      	str	r3, [sp, #4]
 800461c:	f000 f870 	bl	8004700 <_svfiprintf_r>
 8004620:	2300      	movs	r3, #0
 8004622:	9a02      	ldr	r2, [sp, #8]
 8004624:	7013      	strb	r3, [r2, #0]
 8004626:	b01c      	add	sp, #112	; 0x70
 8004628:	bc08      	pop	{r3}
 800462a:	b003      	add	sp, #12
 800462c:	4718      	bx	r3
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	7fffffff 	.word	0x7fffffff
 8004634:	2000000c 	.word	0x2000000c
 8004638:	ffff0208 	.word	0xffff0208

0800463c <__ssputs_r>:
 800463c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800463e:	688e      	ldr	r6, [r1, #8]
 8004640:	b085      	sub	sp, #20
 8004642:	0007      	movs	r7, r0
 8004644:	000c      	movs	r4, r1
 8004646:	9203      	str	r2, [sp, #12]
 8004648:	9301      	str	r3, [sp, #4]
 800464a:	429e      	cmp	r6, r3
 800464c:	d83c      	bhi.n	80046c8 <__ssputs_r+0x8c>
 800464e:	2390      	movs	r3, #144	; 0x90
 8004650:	898a      	ldrh	r2, [r1, #12]
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	421a      	tst	r2, r3
 8004656:	d034      	beq.n	80046c2 <__ssputs_r+0x86>
 8004658:	6909      	ldr	r1, [r1, #16]
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	6960      	ldr	r0, [r4, #20]
 800465e:	1a5b      	subs	r3, r3, r1
 8004660:	9302      	str	r3, [sp, #8]
 8004662:	2303      	movs	r3, #3
 8004664:	4343      	muls	r3, r0
 8004666:	0fdd      	lsrs	r5, r3, #31
 8004668:	18ed      	adds	r5, r5, r3
 800466a:	9b01      	ldr	r3, [sp, #4]
 800466c:	9802      	ldr	r0, [sp, #8]
 800466e:	3301      	adds	r3, #1
 8004670:	181b      	adds	r3, r3, r0
 8004672:	106d      	asrs	r5, r5, #1
 8004674:	42ab      	cmp	r3, r5
 8004676:	d900      	bls.n	800467a <__ssputs_r+0x3e>
 8004678:	001d      	movs	r5, r3
 800467a:	0553      	lsls	r3, r2, #21
 800467c:	d532      	bpl.n	80046e4 <__ssputs_r+0xa8>
 800467e:	0029      	movs	r1, r5
 8004680:	0038      	movs	r0, r7
 8004682:	f000 fb53 	bl	8004d2c <_malloc_r>
 8004686:	1e06      	subs	r6, r0, #0
 8004688:	d109      	bne.n	800469e <__ssputs_r+0x62>
 800468a:	230c      	movs	r3, #12
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	2340      	movs	r3, #64	; 0x40
 8004690:	2001      	movs	r0, #1
 8004692:	89a2      	ldrh	r2, [r4, #12]
 8004694:	4240      	negs	r0, r0
 8004696:	4313      	orrs	r3, r2
 8004698:	81a3      	strh	r3, [r4, #12]
 800469a:	b005      	add	sp, #20
 800469c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800469e:	9a02      	ldr	r2, [sp, #8]
 80046a0:	6921      	ldr	r1, [r4, #16]
 80046a2:	f000 faba 	bl	8004c1a <memcpy>
 80046a6:	89a3      	ldrh	r3, [r4, #12]
 80046a8:	4a14      	ldr	r2, [pc, #80]	; (80046fc <__ssputs_r+0xc0>)
 80046aa:	401a      	ands	r2, r3
 80046ac:	2380      	movs	r3, #128	; 0x80
 80046ae:	4313      	orrs	r3, r2
 80046b0:	81a3      	strh	r3, [r4, #12]
 80046b2:	9b02      	ldr	r3, [sp, #8]
 80046b4:	6126      	str	r6, [r4, #16]
 80046b6:	18f6      	adds	r6, r6, r3
 80046b8:	6026      	str	r6, [r4, #0]
 80046ba:	6165      	str	r5, [r4, #20]
 80046bc:	9e01      	ldr	r6, [sp, #4]
 80046be:	1aed      	subs	r5, r5, r3
 80046c0:	60a5      	str	r5, [r4, #8]
 80046c2:	9b01      	ldr	r3, [sp, #4]
 80046c4:	429e      	cmp	r6, r3
 80046c6:	d900      	bls.n	80046ca <__ssputs_r+0x8e>
 80046c8:	9e01      	ldr	r6, [sp, #4]
 80046ca:	0032      	movs	r2, r6
 80046cc:	9903      	ldr	r1, [sp, #12]
 80046ce:	6820      	ldr	r0, [r4, #0]
 80046d0:	f000 faac 	bl	8004c2c <memmove>
 80046d4:	68a3      	ldr	r3, [r4, #8]
 80046d6:	2000      	movs	r0, #0
 80046d8:	1b9b      	subs	r3, r3, r6
 80046da:	60a3      	str	r3, [r4, #8]
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	199e      	adds	r6, r3, r6
 80046e0:	6026      	str	r6, [r4, #0]
 80046e2:	e7da      	b.n	800469a <__ssputs_r+0x5e>
 80046e4:	002a      	movs	r2, r5
 80046e6:	0038      	movs	r0, r7
 80046e8:	f000 fb96 	bl	8004e18 <_realloc_r>
 80046ec:	1e06      	subs	r6, r0, #0
 80046ee:	d1e0      	bne.n	80046b2 <__ssputs_r+0x76>
 80046f0:	0038      	movs	r0, r7
 80046f2:	6921      	ldr	r1, [r4, #16]
 80046f4:	f000 faae 	bl	8004c54 <_free_r>
 80046f8:	e7c7      	b.n	800468a <__ssputs_r+0x4e>
 80046fa:	46c0      	nop			; (mov r8, r8)
 80046fc:	fffffb7f 	.word	0xfffffb7f

08004700 <_svfiprintf_r>:
 8004700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004702:	b0a1      	sub	sp, #132	; 0x84
 8004704:	9003      	str	r0, [sp, #12]
 8004706:	001d      	movs	r5, r3
 8004708:	898b      	ldrh	r3, [r1, #12]
 800470a:	000f      	movs	r7, r1
 800470c:	0016      	movs	r6, r2
 800470e:	061b      	lsls	r3, r3, #24
 8004710:	d511      	bpl.n	8004736 <_svfiprintf_r+0x36>
 8004712:	690b      	ldr	r3, [r1, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10e      	bne.n	8004736 <_svfiprintf_r+0x36>
 8004718:	2140      	movs	r1, #64	; 0x40
 800471a:	f000 fb07 	bl	8004d2c <_malloc_r>
 800471e:	6038      	str	r0, [r7, #0]
 8004720:	6138      	str	r0, [r7, #16]
 8004722:	2800      	cmp	r0, #0
 8004724:	d105      	bne.n	8004732 <_svfiprintf_r+0x32>
 8004726:	230c      	movs	r3, #12
 8004728:	9a03      	ldr	r2, [sp, #12]
 800472a:	3801      	subs	r0, #1
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	b021      	add	sp, #132	; 0x84
 8004730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004732:	2340      	movs	r3, #64	; 0x40
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	2300      	movs	r3, #0
 8004738:	ac08      	add	r4, sp, #32
 800473a:	6163      	str	r3, [r4, #20]
 800473c:	3320      	adds	r3, #32
 800473e:	7663      	strb	r3, [r4, #25]
 8004740:	3310      	adds	r3, #16
 8004742:	76a3      	strb	r3, [r4, #26]
 8004744:	9507      	str	r5, [sp, #28]
 8004746:	0035      	movs	r5, r6
 8004748:	782b      	ldrb	r3, [r5, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <_svfiprintf_r+0x52>
 800474e:	2b25      	cmp	r3, #37	; 0x25
 8004750:	d147      	bne.n	80047e2 <_svfiprintf_r+0xe2>
 8004752:	1bab      	subs	r3, r5, r6
 8004754:	9305      	str	r3, [sp, #20]
 8004756:	42b5      	cmp	r5, r6
 8004758:	d00c      	beq.n	8004774 <_svfiprintf_r+0x74>
 800475a:	0032      	movs	r2, r6
 800475c:	0039      	movs	r1, r7
 800475e:	9803      	ldr	r0, [sp, #12]
 8004760:	f7ff ff6c 	bl	800463c <__ssputs_r>
 8004764:	1c43      	adds	r3, r0, #1
 8004766:	d100      	bne.n	800476a <_svfiprintf_r+0x6a>
 8004768:	e0ae      	b.n	80048c8 <_svfiprintf_r+0x1c8>
 800476a:	6962      	ldr	r2, [r4, #20]
 800476c:	9b05      	ldr	r3, [sp, #20]
 800476e:	4694      	mov	ip, r2
 8004770:	4463      	add	r3, ip
 8004772:	6163      	str	r3, [r4, #20]
 8004774:	782b      	ldrb	r3, [r5, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d100      	bne.n	800477c <_svfiprintf_r+0x7c>
 800477a:	e0a5      	b.n	80048c8 <_svfiprintf_r+0x1c8>
 800477c:	2201      	movs	r2, #1
 800477e:	2300      	movs	r3, #0
 8004780:	4252      	negs	r2, r2
 8004782:	6062      	str	r2, [r4, #4]
 8004784:	a904      	add	r1, sp, #16
 8004786:	3254      	adds	r2, #84	; 0x54
 8004788:	1852      	adds	r2, r2, r1
 800478a:	1c6e      	adds	r6, r5, #1
 800478c:	6023      	str	r3, [r4, #0]
 800478e:	60e3      	str	r3, [r4, #12]
 8004790:	60a3      	str	r3, [r4, #8]
 8004792:	7013      	strb	r3, [r2, #0]
 8004794:	65a3      	str	r3, [r4, #88]	; 0x58
 8004796:	2205      	movs	r2, #5
 8004798:	7831      	ldrb	r1, [r6, #0]
 800479a:	4854      	ldr	r0, [pc, #336]	; (80048ec <_svfiprintf_r+0x1ec>)
 800479c:	f000 fa32 	bl	8004c04 <memchr>
 80047a0:	1c75      	adds	r5, r6, #1
 80047a2:	2800      	cmp	r0, #0
 80047a4:	d11f      	bne.n	80047e6 <_svfiprintf_r+0xe6>
 80047a6:	6822      	ldr	r2, [r4, #0]
 80047a8:	06d3      	lsls	r3, r2, #27
 80047aa:	d504      	bpl.n	80047b6 <_svfiprintf_r+0xb6>
 80047ac:	2353      	movs	r3, #83	; 0x53
 80047ae:	a904      	add	r1, sp, #16
 80047b0:	185b      	adds	r3, r3, r1
 80047b2:	2120      	movs	r1, #32
 80047b4:	7019      	strb	r1, [r3, #0]
 80047b6:	0713      	lsls	r3, r2, #28
 80047b8:	d504      	bpl.n	80047c4 <_svfiprintf_r+0xc4>
 80047ba:	2353      	movs	r3, #83	; 0x53
 80047bc:	a904      	add	r1, sp, #16
 80047be:	185b      	adds	r3, r3, r1
 80047c0:	212b      	movs	r1, #43	; 0x2b
 80047c2:	7019      	strb	r1, [r3, #0]
 80047c4:	7833      	ldrb	r3, [r6, #0]
 80047c6:	2b2a      	cmp	r3, #42	; 0x2a
 80047c8:	d016      	beq.n	80047f8 <_svfiprintf_r+0xf8>
 80047ca:	0035      	movs	r5, r6
 80047cc:	2100      	movs	r1, #0
 80047ce:	200a      	movs	r0, #10
 80047d0:	68e3      	ldr	r3, [r4, #12]
 80047d2:	782a      	ldrb	r2, [r5, #0]
 80047d4:	1c6e      	adds	r6, r5, #1
 80047d6:	3a30      	subs	r2, #48	; 0x30
 80047d8:	2a09      	cmp	r2, #9
 80047da:	d94e      	bls.n	800487a <_svfiprintf_r+0x17a>
 80047dc:	2900      	cmp	r1, #0
 80047de:	d111      	bne.n	8004804 <_svfiprintf_r+0x104>
 80047e0:	e017      	b.n	8004812 <_svfiprintf_r+0x112>
 80047e2:	3501      	adds	r5, #1
 80047e4:	e7b0      	b.n	8004748 <_svfiprintf_r+0x48>
 80047e6:	4b41      	ldr	r3, [pc, #260]	; (80048ec <_svfiprintf_r+0x1ec>)
 80047e8:	6822      	ldr	r2, [r4, #0]
 80047ea:	1ac0      	subs	r0, r0, r3
 80047ec:	2301      	movs	r3, #1
 80047ee:	4083      	lsls	r3, r0
 80047f0:	4313      	orrs	r3, r2
 80047f2:	002e      	movs	r6, r5
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	e7ce      	b.n	8004796 <_svfiprintf_r+0x96>
 80047f8:	9b07      	ldr	r3, [sp, #28]
 80047fa:	1d19      	adds	r1, r3, #4
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	9107      	str	r1, [sp, #28]
 8004800:	2b00      	cmp	r3, #0
 8004802:	db01      	blt.n	8004808 <_svfiprintf_r+0x108>
 8004804:	930b      	str	r3, [sp, #44]	; 0x2c
 8004806:	e004      	b.n	8004812 <_svfiprintf_r+0x112>
 8004808:	425b      	negs	r3, r3
 800480a:	60e3      	str	r3, [r4, #12]
 800480c:	2302      	movs	r3, #2
 800480e:	4313      	orrs	r3, r2
 8004810:	6023      	str	r3, [r4, #0]
 8004812:	782b      	ldrb	r3, [r5, #0]
 8004814:	2b2e      	cmp	r3, #46	; 0x2e
 8004816:	d10a      	bne.n	800482e <_svfiprintf_r+0x12e>
 8004818:	786b      	ldrb	r3, [r5, #1]
 800481a:	2b2a      	cmp	r3, #42	; 0x2a
 800481c:	d135      	bne.n	800488a <_svfiprintf_r+0x18a>
 800481e:	9b07      	ldr	r3, [sp, #28]
 8004820:	3502      	adds	r5, #2
 8004822:	1d1a      	adds	r2, r3, #4
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	9207      	str	r2, [sp, #28]
 8004828:	2b00      	cmp	r3, #0
 800482a:	db2b      	blt.n	8004884 <_svfiprintf_r+0x184>
 800482c:	9309      	str	r3, [sp, #36]	; 0x24
 800482e:	4e30      	ldr	r6, [pc, #192]	; (80048f0 <_svfiprintf_r+0x1f0>)
 8004830:	2203      	movs	r2, #3
 8004832:	0030      	movs	r0, r6
 8004834:	7829      	ldrb	r1, [r5, #0]
 8004836:	f000 f9e5 	bl	8004c04 <memchr>
 800483a:	2800      	cmp	r0, #0
 800483c:	d006      	beq.n	800484c <_svfiprintf_r+0x14c>
 800483e:	2340      	movs	r3, #64	; 0x40
 8004840:	1b80      	subs	r0, r0, r6
 8004842:	4083      	lsls	r3, r0
 8004844:	6822      	ldr	r2, [r4, #0]
 8004846:	3501      	adds	r5, #1
 8004848:	4313      	orrs	r3, r2
 800484a:	6023      	str	r3, [r4, #0]
 800484c:	7829      	ldrb	r1, [r5, #0]
 800484e:	2206      	movs	r2, #6
 8004850:	4828      	ldr	r0, [pc, #160]	; (80048f4 <_svfiprintf_r+0x1f4>)
 8004852:	1c6e      	adds	r6, r5, #1
 8004854:	7621      	strb	r1, [r4, #24]
 8004856:	f000 f9d5 	bl	8004c04 <memchr>
 800485a:	2800      	cmp	r0, #0
 800485c:	d03c      	beq.n	80048d8 <_svfiprintf_r+0x1d8>
 800485e:	4b26      	ldr	r3, [pc, #152]	; (80048f8 <_svfiprintf_r+0x1f8>)
 8004860:	2b00      	cmp	r3, #0
 8004862:	d125      	bne.n	80048b0 <_svfiprintf_r+0x1b0>
 8004864:	2207      	movs	r2, #7
 8004866:	9b07      	ldr	r3, [sp, #28]
 8004868:	3307      	adds	r3, #7
 800486a:	4393      	bics	r3, r2
 800486c:	3308      	adds	r3, #8
 800486e:	9307      	str	r3, [sp, #28]
 8004870:	6963      	ldr	r3, [r4, #20]
 8004872:	9a04      	ldr	r2, [sp, #16]
 8004874:	189b      	adds	r3, r3, r2
 8004876:	6163      	str	r3, [r4, #20]
 8004878:	e765      	b.n	8004746 <_svfiprintf_r+0x46>
 800487a:	4343      	muls	r3, r0
 800487c:	0035      	movs	r5, r6
 800487e:	2101      	movs	r1, #1
 8004880:	189b      	adds	r3, r3, r2
 8004882:	e7a6      	b.n	80047d2 <_svfiprintf_r+0xd2>
 8004884:	2301      	movs	r3, #1
 8004886:	425b      	negs	r3, r3
 8004888:	e7d0      	b.n	800482c <_svfiprintf_r+0x12c>
 800488a:	2300      	movs	r3, #0
 800488c:	200a      	movs	r0, #10
 800488e:	001a      	movs	r2, r3
 8004890:	3501      	adds	r5, #1
 8004892:	6063      	str	r3, [r4, #4]
 8004894:	7829      	ldrb	r1, [r5, #0]
 8004896:	1c6e      	adds	r6, r5, #1
 8004898:	3930      	subs	r1, #48	; 0x30
 800489a:	2909      	cmp	r1, #9
 800489c:	d903      	bls.n	80048a6 <_svfiprintf_r+0x1a6>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0c5      	beq.n	800482e <_svfiprintf_r+0x12e>
 80048a2:	9209      	str	r2, [sp, #36]	; 0x24
 80048a4:	e7c3      	b.n	800482e <_svfiprintf_r+0x12e>
 80048a6:	4342      	muls	r2, r0
 80048a8:	0035      	movs	r5, r6
 80048aa:	2301      	movs	r3, #1
 80048ac:	1852      	adds	r2, r2, r1
 80048ae:	e7f1      	b.n	8004894 <_svfiprintf_r+0x194>
 80048b0:	ab07      	add	r3, sp, #28
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	003a      	movs	r2, r7
 80048b6:	0021      	movs	r1, r4
 80048b8:	4b10      	ldr	r3, [pc, #64]	; (80048fc <_svfiprintf_r+0x1fc>)
 80048ba:	9803      	ldr	r0, [sp, #12]
 80048bc:	e000      	b.n	80048c0 <_svfiprintf_r+0x1c0>
 80048be:	bf00      	nop
 80048c0:	9004      	str	r0, [sp, #16]
 80048c2:	9b04      	ldr	r3, [sp, #16]
 80048c4:	3301      	adds	r3, #1
 80048c6:	d1d3      	bne.n	8004870 <_svfiprintf_r+0x170>
 80048c8:	89bb      	ldrh	r3, [r7, #12]
 80048ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 80048cc:	065b      	lsls	r3, r3, #25
 80048ce:	d400      	bmi.n	80048d2 <_svfiprintf_r+0x1d2>
 80048d0:	e72d      	b.n	800472e <_svfiprintf_r+0x2e>
 80048d2:	2001      	movs	r0, #1
 80048d4:	4240      	negs	r0, r0
 80048d6:	e72a      	b.n	800472e <_svfiprintf_r+0x2e>
 80048d8:	ab07      	add	r3, sp, #28
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	003a      	movs	r2, r7
 80048de:	0021      	movs	r1, r4
 80048e0:	4b06      	ldr	r3, [pc, #24]	; (80048fc <_svfiprintf_r+0x1fc>)
 80048e2:	9803      	ldr	r0, [sp, #12]
 80048e4:	f000 f87c 	bl	80049e0 <_printf_i>
 80048e8:	e7ea      	b.n	80048c0 <_svfiprintf_r+0x1c0>
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	08004f28 	.word	0x08004f28
 80048f0:	08004f2e 	.word	0x08004f2e
 80048f4:	08004f32 	.word	0x08004f32
 80048f8:	00000000 	.word	0x00000000
 80048fc:	0800463d 	.word	0x0800463d

08004900 <_printf_common>:
 8004900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004902:	0015      	movs	r5, r2
 8004904:	9301      	str	r3, [sp, #4]
 8004906:	688a      	ldr	r2, [r1, #8]
 8004908:	690b      	ldr	r3, [r1, #16]
 800490a:	000c      	movs	r4, r1
 800490c:	9000      	str	r0, [sp, #0]
 800490e:	4293      	cmp	r3, r2
 8004910:	da00      	bge.n	8004914 <_printf_common+0x14>
 8004912:	0013      	movs	r3, r2
 8004914:	0022      	movs	r2, r4
 8004916:	602b      	str	r3, [r5, #0]
 8004918:	3243      	adds	r2, #67	; 0x43
 800491a:	7812      	ldrb	r2, [r2, #0]
 800491c:	2a00      	cmp	r2, #0
 800491e:	d001      	beq.n	8004924 <_printf_common+0x24>
 8004920:	3301      	adds	r3, #1
 8004922:	602b      	str	r3, [r5, #0]
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	069b      	lsls	r3, r3, #26
 8004928:	d502      	bpl.n	8004930 <_printf_common+0x30>
 800492a:	682b      	ldr	r3, [r5, #0]
 800492c:	3302      	adds	r3, #2
 800492e:	602b      	str	r3, [r5, #0]
 8004930:	6822      	ldr	r2, [r4, #0]
 8004932:	2306      	movs	r3, #6
 8004934:	0017      	movs	r7, r2
 8004936:	401f      	ands	r7, r3
 8004938:	421a      	tst	r2, r3
 800493a:	d027      	beq.n	800498c <_printf_common+0x8c>
 800493c:	0023      	movs	r3, r4
 800493e:	3343      	adds	r3, #67	; 0x43
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	1e5a      	subs	r2, r3, #1
 8004944:	4193      	sbcs	r3, r2
 8004946:	6822      	ldr	r2, [r4, #0]
 8004948:	0692      	lsls	r2, r2, #26
 800494a:	d430      	bmi.n	80049ae <_printf_common+0xae>
 800494c:	0022      	movs	r2, r4
 800494e:	9901      	ldr	r1, [sp, #4]
 8004950:	9800      	ldr	r0, [sp, #0]
 8004952:	9e08      	ldr	r6, [sp, #32]
 8004954:	3243      	adds	r2, #67	; 0x43
 8004956:	47b0      	blx	r6
 8004958:	1c43      	adds	r3, r0, #1
 800495a:	d025      	beq.n	80049a8 <_printf_common+0xa8>
 800495c:	2306      	movs	r3, #6
 800495e:	6820      	ldr	r0, [r4, #0]
 8004960:	682a      	ldr	r2, [r5, #0]
 8004962:	68e1      	ldr	r1, [r4, #12]
 8004964:	2500      	movs	r5, #0
 8004966:	4003      	ands	r3, r0
 8004968:	2b04      	cmp	r3, #4
 800496a:	d103      	bne.n	8004974 <_printf_common+0x74>
 800496c:	1a8d      	subs	r5, r1, r2
 800496e:	43eb      	mvns	r3, r5
 8004970:	17db      	asrs	r3, r3, #31
 8004972:	401d      	ands	r5, r3
 8004974:	68a3      	ldr	r3, [r4, #8]
 8004976:	6922      	ldr	r2, [r4, #16]
 8004978:	4293      	cmp	r3, r2
 800497a:	dd01      	ble.n	8004980 <_printf_common+0x80>
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	18ed      	adds	r5, r5, r3
 8004980:	2700      	movs	r7, #0
 8004982:	42bd      	cmp	r5, r7
 8004984:	d120      	bne.n	80049c8 <_printf_common+0xc8>
 8004986:	2000      	movs	r0, #0
 8004988:	e010      	b.n	80049ac <_printf_common+0xac>
 800498a:	3701      	adds	r7, #1
 800498c:	68e3      	ldr	r3, [r4, #12]
 800498e:	682a      	ldr	r2, [r5, #0]
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	42bb      	cmp	r3, r7
 8004994:	ddd2      	ble.n	800493c <_printf_common+0x3c>
 8004996:	0022      	movs	r2, r4
 8004998:	2301      	movs	r3, #1
 800499a:	9901      	ldr	r1, [sp, #4]
 800499c:	9800      	ldr	r0, [sp, #0]
 800499e:	9e08      	ldr	r6, [sp, #32]
 80049a0:	3219      	adds	r2, #25
 80049a2:	47b0      	blx	r6
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d1f0      	bne.n	800498a <_printf_common+0x8a>
 80049a8:	2001      	movs	r0, #1
 80049aa:	4240      	negs	r0, r0
 80049ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049ae:	2030      	movs	r0, #48	; 0x30
 80049b0:	18e1      	adds	r1, r4, r3
 80049b2:	3143      	adds	r1, #67	; 0x43
 80049b4:	7008      	strb	r0, [r1, #0]
 80049b6:	0021      	movs	r1, r4
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	3145      	adds	r1, #69	; 0x45
 80049bc:	7809      	ldrb	r1, [r1, #0]
 80049be:	18a2      	adds	r2, r4, r2
 80049c0:	3243      	adds	r2, #67	; 0x43
 80049c2:	3302      	adds	r3, #2
 80049c4:	7011      	strb	r1, [r2, #0]
 80049c6:	e7c1      	b.n	800494c <_printf_common+0x4c>
 80049c8:	0022      	movs	r2, r4
 80049ca:	2301      	movs	r3, #1
 80049cc:	9901      	ldr	r1, [sp, #4]
 80049ce:	9800      	ldr	r0, [sp, #0]
 80049d0:	9e08      	ldr	r6, [sp, #32]
 80049d2:	321a      	adds	r2, #26
 80049d4:	47b0      	blx	r6
 80049d6:	1c43      	adds	r3, r0, #1
 80049d8:	d0e6      	beq.n	80049a8 <_printf_common+0xa8>
 80049da:	3701      	adds	r7, #1
 80049dc:	e7d1      	b.n	8004982 <_printf_common+0x82>
	...

080049e0 <_printf_i>:
 80049e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e2:	b08b      	sub	sp, #44	; 0x2c
 80049e4:	9206      	str	r2, [sp, #24]
 80049e6:	000a      	movs	r2, r1
 80049e8:	3243      	adds	r2, #67	; 0x43
 80049ea:	9307      	str	r3, [sp, #28]
 80049ec:	9005      	str	r0, [sp, #20]
 80049ee:	9204      	str	r2, [sp, #16]
 80049f0:	7e0a      	ldrb	r2, [r1, #24]
 80049f2:	000c      	movs	r4, r1
 80049f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80049f6:	2a78      	cmp	r2, #120	; 0x78
 80049f8:	d807      	bhi.n	8004a0a <_printf_i+0x2a>
 80049fa:	2a62      	cmp	r2, #98	; 0x62
 80049fc:	d809      	bhi.n	8004a12 <_printf_i+0x32>
 80049fe:	2a00      	cmp	r2, #0
 8004a00:	d100      	bne.n	8004a04 <_printf_i+0x24>
 8004a02:	e0c1      	b.n	8004b88 <_printf_i+0x1a8>
 8004a04:	2a58      	cmp	r2, #88	; 0x58
 8004a06:	d100      	bne.n	8004a0a <_printf_i+0x2a>
 8004a08:	e08c      	b.n	8004b24 <_printf_i+0x144>
 8004a0a:	0026      	movs	r6, r4
 8004a0c:	3642      	adds	r6, #66	; 0x42
 8004a0e:	7032      	strb	r2, [r6, #0]
 8004a10:	e022      	b.n	8004a58 <_printf_i+0x78>
 8004a12:	0010      	movs	r0, r2
 8004a14:	3863      	subs	r0, #99	; 0x63
 8004a16:	2815      	cmp	r0, #21
 8004a18:	d8f7      	bhi.n	8004a0a <_printf_i+0x2a>
 8004a1a:	f7fb fb75 	bl	8000108 <__gnu_thumb1_case_shi>
 8004a1e:	0016      	.short	0x0016
 8004a20:	fff6001f 	.word	0xfff6001f
 8004a24:	fff6fff6 	.word	0xfff6fff6
 8004a28:	001ffff6 	.word	0x001ffff6
 8004a2c:	fff6fff6 	.word	0xfff6fff6
 8004a30:	fff6fff6 	.word	0xfff6fff6
 8004a34:	003600a8 	.word	0x003600a8
 8004a38:	fff6009a 	.word	0xfff6009a
 8004a3c:	00b9fff6 	.word	0x00b9fff6
 8004a40:	0036fff6 	.word	0x0036fff6
 8004a44:	fff6fff6 	.word	0xfff6fff6
 8004a48:	009e      	.short	0x009e
 8004a4a:	0026      	movs	r6, r4
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	3642      	adds	r6, #66	; 0x42
 8004a50:	1d11      	adds	r1, r2, #4
 8004a52:	6019      	str	r1, [r3, #0]
 8004a54:	6813      	ldr	r3, [r2, #0]
 8004a56:	7033      	strb	r3, [r6, #0]
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e0a7      	b.n	8004bac <_printf_i+0x1cc>
 8004a5c:	6808      	ldr	r0, [r1, #0]
 8004a5e:	6819      	ldr	r1, [r3, #0]
 8004a60:	1d0a      	adds	r2, r1, #4
 8004a62:	0605      	lsls	r5, r0, #24
 8004a64:	d50b      	bpl.n	8004a7e <_printf_i+0x9e>
 8004a66:	680d      	ldr	r5, [r1, #0]
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	2d00      	cmp	r5, #0
 8004a6c:	da03      	bge.n	8004a76 <_printf_i+0x96>
 8004a6e:	232d      	movs	r3, #45	; 0x2d
 8004a70:	9a04      	ldr	r2, [sp, #16]
 8004a72:	426d      	negs	r5, r5
 8004a74:	7013      	strb	r3, [r2, #0]
 8004a76:	4b61      	ldr	r3, [pc, #388]	; (8004bfc <_printf_i+0x21c>)
 8004a78:	270a      	movs	r7, #10
 8004a7a:	9303      	str	r3, [sp, #12]
 8004a7c:	e01b      	b.n	8004ab6 <_printf_i+0xd6>
 8004a7e:	680d      	ldr	r5, [r1, #0]
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	0641      	lsls	r1, r0, #25
 8004a84:	d5f1      	bpl.n	8004a6a <_printf_i+0x8a>
 8004a86:	b22d      	sxth	r5, r5
 8004a88:	e7ef      	b.n	8004a6a <_printf_i+0x8a>
 8004a8a:	680d      	ldr	r5, [r1, #0]
 8004a8c:	6819      	ldr	r1, [r3, #0]
 8004a8e:	1d08      	adds	r0, r1, #4
 8004a90:	6018      	str	r0, [r3, #0]
 8004a92:	062e      	lsls	r6, r5, #24
 8004a94:	d501      	bpl.n	8004a9a <_printf_i+0xba>
 8004a96:	680d      	ldr	r5, [r1, #0]
 8004a98:	e003      	b.n	8004aa2 <_printf_i+0xc2>
 8004a9a:	066d      	lsls	r5, r5, #25
 8004a9c:	d5fb      	bpl.n	8004a96 <_printf_i+0xb6>
 8004a9e:	680d      	ldr	r5, [r1, #0]
 8004aa0:	b2ad      	uxth	r5, r5
 8004aa2:	4b56      	ldr	r3, [pc, #344]	; (8004bfc <_printf_i+0x21c>)
 8004aa4:	2708      	movs	r7, #8
 8004aa6:	9303      	str	r3, [sp, #12]
 8004aa8:	2a6f      	cmp	r2, #111	; 0x6f
 8004aaa:	d000      	beq.n	8004aae <_printf_i+0xce>
 8004aac:	3702      	adds	r7, #2
 8004aae:	0023      	movs	r3, r4
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	3343      	adds	r3, #67	; 0x43
 8004ab4:	701a      	strb	r2, [r3, #0]
 8004ab6:	6863      	ldr	r3, [r4, #4]
 8004ab8:	60a3      	str	r3, [r4, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	db03      	blt.n	8004ac6 <_printf_i+0xe6>
 8004abe:	2204      	movs	r2, #4
 8004ac0:	6821      	ldr	r1, [r4, #0]
 8004ac2:	4391      	bics	r1, r2
 8004ac4:	6021      	str	r1, [r4, #0]
 8004ac6:	2d00      	cmp	r5, #0
 8004ac8:	d102      	bne.n	8004ad0 <_printf_i+0xf0>
 8004aca:	9e04      	ldr	r6, [sp, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00c      	beq.n	8004aea <_printf_i+0x10a>
 8004ad0:	9e04      	ldr	r6, [sp, #16]
 8004ad2:	0028      	movs	r0, r5
 8004ad4:	0039      	movs	r1, r7
 8004ad6:	f7fb fba7 	bl	8000228 <__aeabi_uidivmod>
 8004ada:	9b03      	ldr	r3, [sp, #12]
 8004adc:	3e01      	subs	r6, #1
 8004ade:	5c5b      	ldrb	r3, [r3, r1]
 8004ae0:	7033      	strb	r3, [r6, #0]
 8004ae2:	002b      	movs	r3, r5
 8004ae4:	0005      	movs	r5, r0
 8004ae6:	429f      	cmp	r7, r3
 8004ae8:	d9f3      	bls.n	8004ad2 <_printf_i+0xf2>
 8004aea:	2f08      	cmp	r7, #8
 8004aec:	d109      	bne.n	8004b02 <_printf_i+0x122>
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	07db      	lsls	r3, r3, #31
 8004af2:	d506      	bpl.n	8004b02 <_printf_i+0x122>
 8004af4:	6863      	ldr	r3, [r4, #4]
 8004af6:	6922      	ldr	r2, [r4, #16]
 8004af8:	4293      	cmp	r3, r2
 8004afa:	dc02      	bgt.n	8004b02 <_printf_i+0x122>
 8004afc:	2330      	movs	r3, #48	; 0x30
 8004afe:	3e01      	subs	r6, #1
 8004b00:	7033      	strb	r3, [r6, #0]
 8004b02:	9b04      	ldr	r3, [sp, #16]
 8004b04:	1b9b      	subs	r3, r3, r6
 8004b06:	6123      	str	r3, [r4, #16]
 8004b08:	9b07      	ldr	r3, [sp, #28]
 8004b0a:	0021      	movs	r1, r4
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	9805      	ldr	r0, [sp, #20]
 8004b10:	9b06      	ldr	r3, [sp, #24]
 8004b12:	aa09      	add	r2, sp, #36	; 0x24
 8004b14:	f7ff fef4 	bl	8004900 <_printf_common>
 8004b18:	1c43      	adds	r3, r0, #1
 8004b1a:	d14c      	bne.n	8004bb6 <_printf_i+0x1d6>
 8004b1c:	2001      	movs	r0, #1
 8004b1e:	4240      	negs	r0, r0
 8004b20:	b00b      	add	sp, #44	; 0x2c
 8004b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b24:	3145      	adds	r1, #69	; 0x45
 8004b26:	700a      	strb	r2, [r1, #0]
 8004b28:	4a34      	ldr	r2, [pc, #208]	; (8004bfc <_printf_i+0x21c>)
 8004b2a:	9203      	str	r2, [sp, #12]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	6821      	ldr	r1, [r4, #0]
 8004b30:	ca20      	ldmia	r2!, {r5}
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	0608      	lsls	r0, r1, #24
 8004b36:	d516      	bpl.n	8004b66 <_printf_i+0x186>
 8004b38:	07cb      	lsls	r3, r1, #31
 8004b3a:	d502      	bpl.n	8004b42 <_printf_i+0x162>
 8004b3c:	2320      	movs	r3, #32
 8004b3e:	4319      	orrs	r1, r3
 8004b40:	6021      	str	r1, [r4, #0]
 8004b42:	2710      	movs	r7, #16
 8004b44:	2d00      	cmp	r5, #0
 8004b46:	d1b2      	bne.n	8004aae <_printf_i+0xce>
 8004b48:	2320      	movs	r3, #32
 8004b4a:	6822      	ldr	r2, [r4, #0]
 8004b4c:	439a      	bics	r2, r3
 8004b4e:	6022      	str	r2, [r4, #0]
 8004b50:	e7ad      	b.n	8004aae <_printf_i+0xce>
 8004b52:	2220      	movs	r2, #32
 8004b54:	6809      	ldr	r1, [r1, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	6022      	str	r2, [r4, #0]
 8004b5a:	0022      	movs	r2, r4
 8004b5c:	2178      	movs	r1, #120	; 0x78
 8004b5e:	3245      	adds	r2, #69	; 0x45
 8004b60:	7011      	strb	r1, [r2, #0]
 8004b62:	4a27      	ldr	r2, [pc, #156]	; (8004c00 <_printf_i+0x220>)
 8004b64:	e7e1      	b.n	8004b2a <_printf_i+0x14a>
 8004b66:	0648      	lsls	r0, r1, #25
 8004b68:	d5e6      	bpl.n	8004b38 <_printf_i+0x158>
 8004b6a:	b2ad      	uxth	r5, r5
 8004b6c:	e7e4      	b.n	8004b38 <_printf_i+0x158>
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	680d      	ldr	r5, [r1, #0]
 8004b72:	1d10      	adds	r0, r2, #4
 8004b74:	6949      	ldr	r1, [r1, #20]
 8004b76:	6018      	str	r0, [r3, #0]
 8004b78:	6813      	ldr	r3, [r2, #0]
 8004b7a:	062e      	lsls	r6, r5, #24
 8004b7c:	d501      	bpl.n	8004b82 <_printf_i+0x1a2>
 8004b7e:	6019      	str	r1, [r3, #0]
 8004b80:	e002      	b.n	8004b88 <_printf_i+0x1a8>
 8004b82:	066d      	lsls	r5, r5, #25
 8004b84:	d5fb      	bpl.n	8004b7e <_printf_i+0x19e>
 8004b86:	8019      	strh	r1, [r3, #0]
 8004b88:	2300      	movs	r3, #0
 8004b8a:	9e04      	ldr	r6, [sp, #16]
 8004b8c:	6123      	str	r3, [r4, #16]
 8004b8e:	e7bb      	b.n	8004b08 <_printf_i+0x128>
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	1d11      	adds	r1, r2, #4
 8004b94:	6019      	str	r1, [r3, #0]
 8004b96:	6816      	ldr	r6, [r2, #0]
 8004b98:	2100      	movs	r1, #0
 8004b9a:	0030      	movs	r0, r6
 8004b9c:	6862      	ldr	r2, [r4, #4]
 8004b9e:	f000 f831 	bl	8004c04 <memchr>
 8004ba2:	2800      	cmp	r0, #0
 8004ba4:	d001      	beq.n	8004baa <_printf_i+0x1ca>
 8004ba6:	1b80      	subs	r0, r0, r6
 8004ba8:	6060      	str	r0, [r4, #4]
 8004baa:	6863      	ldr	r3, [r4, #4]
 8004bac:	6123      	str	r3, [r4, #16]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	9a04      	ldr	r2, [sp, #16]
 8004bb2:	7013      	strb	r3, [r2, #0]
 8004bb4:	e7a8      	b.n	8004b08 <_printf_i+0x128>
 8004bb6:	6923      	ldr	r3, [r4, #16]
 8004bb8:	0032      	movs	r2, r6
 8004bba:	9906      	ldr	r1, [sp, #24]
 8004bbc:	9805      	ldr	r0, [sp, #20]
 8004bbe:	9d07      	ldr	r5, [sp, #28]
 8004bc0:	47a8      	blx	r5
 8004bc2:	1c43      	adds	r3, r0, #1
 8004bc4:	d0aa      	beq.n	8004b1c <_printf_i+0x13c>
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	079b      	lsls	r3, r3, #30
 8004bca:	d415      	bmi.n	8004bf8 <_printf_i+0x218>
 8004bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bce:	68e0      	ldr	r0, [r4, #12]
 8004bd0:	4298      	cmp	r0, r3
 8004bd2:	daa5      	bge.n	8004b20 <_printf_i+0x140>
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	e7a3      	b.n	8004b20 <_printf_i+0x140>
 8004bd8:	0022      	movs	r2, r4
 8004bda:	2301      	movs	r3, #1
 8004bdc:	9906      	ldr	r1, [sp, #24]
 8004bde:	9805      	ldr	r0, [sp, #20]
 8004be0:	9e07      	ldr	r6, [sp, #28]
 8004be2:	3219      	adds	r2, #25
 8004be4:	47b0      	blx	r6
 8004be6:	1c43      	adds	r3, r0, #1
 8004be8:	d098      	beq.n	8004b1c <_printf_i+0x13c>
 8004bea:	3501      	adds	r5, #1
 8004bec:	68e3      	ldr	r3, [r4, #12]
 8004bee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	42ab      	cmp	r3, r5
 8004bf4:	dcf0      	bgt.n	8004bd8 <_printf_i+0x1f8>
 8004bf6:	e7e9      	b.n	8004bcc <_printf_i+0x1ec>
 8004bf8:	2500      	movs	r5, #0
 8004bfa:	e7f7      	b.n	8004bec <_printf_i+0x20c>
 8004bfc:	08004f39 	.word	0x08004f39
 8004c00:	08004f4a 	.word	0x08004f4a

08004c04 <memchr>:
 8004c04:	b2c9      	uxtb	r1, r1
 8004c06:	1882      	adds	r2, r0, r2
 8004c08:	4290      	cmp	r0, r2
 8004c0a:	d101      	bne.n	8004c10 <memchr+0xc>
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	4770      	bx	lr
 8004c10:	7803      	ldrb	r3, [r0, #0]
 8004c12:	428b      	cmp	r3, r1
 8004c14:	d0fb      	beq.n	8004c0e <memchr+0xa>
 8004c16:	3001      	adds	r0, #1
 8004c18:	e7f6      	b.n	8004c08 <memchr+0x4>

08004c1a <memcpy>:
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	b510      	push	{r4, lr}
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d100      	bne.n	8004c24 <memcpy+0xa>
 8004c22:	bd10      	pop	{r4, pc}
 8004c24:	5ccc      	ldrb	r4, [r1, r3]
 8004c26:	54c4      	strb	r4, [r0, r3]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	e7f8      	b.n	8004c1e <memcpy+0x4>

08004c2c <memmove>:
 8004c2c:	b510      	push	{r4, lr}
 8004c2e:	4288      	cmp	r0, r1
 8004c30:	d902      	bls.n	8004c38 <memmove+0xc>
 8004c32:	188b      	adds	r3, r1, r2
 8004c34:	4298      	cmp	r0, r3
 8004c36:	d303      	bcc.n	8004c40 <memmove+0x14>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	e007      	b.n	8004c4c <memmove+0x20>
 8004c3c:	5c8b      	ldrb	r3, [r1, r2]
 8004c3e:	5483      	strb	r3, [r0, r2]
 8004c40:	3a01      	subs	r2, #1
 8004c42:	d2fb      	bcs.n	8004c3c <memmove+0x10>
 8004c44:	bd10      	pop	{r4, pc}
 8004c46:	5ccc      	ldrb	r4, [r1, r3]
 8004c48:	54c4      	strb	r4, [r0, r3]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d1fa      	bne.n	8004c46 <memmove+0x1a>
 8004c50:	e7f8      	b.n	8004c44 <memmove+0x18>
	...

08004c54 <_free_r>:
 8004c54:	b570      	push	{r4, r5, r6, lr}
 8004c56:	0005      	movs	r5, r0
 8004c58:	2900      	cmp	r1, #0
 8004c5a:	d010      	beq.n	8004c7e <_free_r+0x2a>
 8004c5c:	1f0c      	subs	r4, r1, #4
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	da00      	bge.n	8004c66 <_free_r+0x12>
 8004c64:	18e4      	adds	r4, r4, r3
 8004c66:	0028      	movs	r0, r5
 8004c68:	f000 f918 	bl	8004e9c <__malloc_lock>
 8004c6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ce4 <_free_r+0x90>)
 8004c6e:	6813      	ldr	r3, [r2, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d105      	bne.n	8004c80 <_free_r+0x2c>
 8004c74:	6063      	str	r3, [r4, #4]
 8004c76:	6014      	str	r4, [r2, #0]
 8004c78:	0028      	movs	r0, r5
 8004c7a:	f000 f917 	bl	8004eac <__malloc_unlock>
 8004c7e:	bd70      	pop	{r4, r5, r6, pc}
 8004c80:	42a3      	cmp	r3, r4
 8004c82:	d908      	bls.n	8004c96 <_free_r+0x42>
 8004c84:	6821      	ldr	r1, [r4, #0]
 8004c86:	1860      	adds	r0, r4, r1
 8004c88:	4283      	cmp	r3, r0
 8004c8a:	d1f3      	bne.n	8004c74 <_free_r+0x20>
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	1841      	adds	r1, r0, r1
 8004c92:	6021      	str	r1, [r4, #0]
 8004c94:	e7ee      	b.n	8004c74 <_free_r+0x20>
 8004c96:	001a      	movs	r2, r3
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <_free_r+0x4e>
 8004c9e:	42a3      	cmp	r3, r4
 8004ca0:	d9f9      	bls.n	8004c96 <_free_r+0x42>
 8004ca2:	6811      	ldr	r1, [r2, #0]
 8004ca4:	1850      	adds	r0, r2, r1
 8004ca6:	42a0      	cmp	r0, r4
 8004ca8:	d10b      	bne.n	8004cc2 <_free_r+0x6e>
 8004caa:	6820      	ldr	r0, [r4, #0]
 8004cac:	1809      	adds	r1, r1, r0
 8004cae:	1850      	adds	r0, r2, r1
 8004cb0:	6011      	str	r1, [r2, #0]
 8004cb2:	4283      	cmp	r3, r0
 8004cb4:	d1e0      	bne.n	8004c78 <_free_r+0x24>
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	1841      	adds	r1, r0, r1
 8004cbc:	6011      	str	r1, [r2, #0]
 8004cbe:	6053      	str	r3, [r2, #4]
 8004cc0:	e7da      	b.n	8004c78 <_free_r+0x24>
 8004cc2:	42a0      	cmp	r0, r4
 8004cc4:	d902      	bls.n	8004ccc <_free_r+0x78>
 8004cc6:	230c      	movs	r3, #12
 8004cc8:	602b      	str	r3, [r5, #0]
 8004cca:	e7d5      	b.n	8004c78 <_free_r+0x24>
 8004ccc:	6821      	ldr	r1, [r4, #0]
 8004cce:	1860      	adds	r0, r4, r1
 8004cd0:	4283      	cmp	r3, r0
 8004cd2:	d103      	bne.n	8004cdc <_free_r+0x88>
 8004cd4:	6818      	ldr	r0, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	1841      	adds	r1, r0, r1
 8004cda:	6021      	str	r1, [r4, #0]
 8004cdc:	6063      	str	r3, [r4, #4]
 8004cde:	6054      	str	r4, [r2, #4]
 8004ce0:	e7ca      	b.n	8004c78 <_free_r+0x24>
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	20000234 	.word	0x20000234

08004ce8 <sbrk_aligned>:
 8004ce8:	b570      	push	{r4, r5, r6, lr}
 8004cea:	4e0f      	ldr	r6, [pc, #60]	; (8004d28 <sbrk_aligned+0x40>)
 8004cec:	000d      	movs	r5, r1
 8004cee:	6831      	ldr	r1, [r6, #0]
 8004cf0:	0004      	movs	r4, r0
 8004cf2:	2900      	cmp	r1, #0
 8004cf4:	d102      	bne.n	8004cfc <sbrk_aligned+0x14>
 8004cf6:	f000 f8bf 	bl	8004e78 <_sbrk_r>
 8004cfa:	6030      	str	r0, [r6, #0]
 8004cfc:	0029      	movs	r1, r5
 8004cfe:	0020      	movs	r0, r4
 8004d00:	f000 f8ba 	bl	8004e78 <_sbrk_r>
 8004d04:	1c43      	adds	r3, r0, #1
 8004d06:	d00a      	beq.n	8004d1e <sbrk_aligned+0x36>
 8004d08:	2303      	movs	r3, #3
 8004d0a:	1cc5      	adds	r5, r0, #3
 8004d0c:	439d      	bics	r5, r3
 8004d0e:	42a8      	cmp	r0, r5
 8004d10:	d007      	beq.n	8004d22 <sbrk_aligned+0x3a>
 8004d12:	1a29      	subs	r1, r5, r0
 8004d14:	0020      	movs	r0, r4
 8004d16:	f000 f8af 	bl	8004e78 <_sbrk_r>
 8004d1a:	1c43      	adds	r3, r0, #1
 8004d1c:	d101      	bne.n	8004d22 <sbrk_aligned+0x3a>
 8004d1e:	2501      	movs	r5, #1
 8004d20:	426d      	negs	r5, r5
 8004d22:	0028      	movs	r0, r5
 8004d24:	bd70      	pop	{r4, r5, r6, pc}
 8004d26:	46c0      	nop			; (mov r8, r8)
 8004d28:	20000238 	.word	0x20000238

08004d2c <_malloc_r>:
 8004d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d2e:	2203      	movs	r2, #3
 8004d30:	1ccb      	adds	r3, r1, #3
 8004d32:	4393      	bics	r3, r2
 8004d34:	3308      	adds	r3, #8
 8004d36:	0006      	movs	r6, r0
 8004d38:	001f      	movs	r7, r3
 8004d3a:	2b0c      	cmp	r3, #12
 8004d3c:	d232      	bcs.n	8004da4 <_malloc_r+0x78>
 8004d3e:	270c      	movs	r7, #12
 8004d40:	42b9      	cmp	r1, r7
 8004d42:	d831      	bhi.n	8004da8 <_malloc_r+0x7c>
 8004d44:	0030      	movs	r0, r6
 8004d46:	f000 f8a9 	bl	8004e9c <__malloc_lock>
 8004d4a:	4d32      	ldr	r5, [pc, #200]	; (8004e14 <_malloc_r+0xe8>)
 8004d4c:	682b      	ldr	r3, [r5, #0]
 8004d4e:	001c      	movs	r4, r3
 8004d50:	2c00      	cmp	r4, #0
 8004d52:	d12e      	bne.n	8004db2 <_malloc_r+0x86>
 8004d54:	0039      	movs	r1, r7
 8004d56:	0030      	movs	r0, r6
 8004d58:	f7ff ffc6 	bl	8004ce8 <sbrk_aligned>
 8004d5c:	0004      	movs	r4, r0
 8004d5e:	1c43      	adds	r3, r0, #1
 8004d60:	d11e      	bne.n	8004da0 <_malloc_r+0x74>
 8004d62:	682c      	ldr	r4, [r5, #0]
 8004d64:	0025      	movs	r5, r4
 8004d66:	2d00      	cmp	r5, #0
 8004d68:	d14a      	bne.n	8004e00 <_malloc_r+0xd4>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	0029      	movs	r1, r5
 8004d6e:	18e3      	adds	r3, r4, r3
 8004d70:	0030      	movs	r0, r6
 8004d72:	9301      	str	r3, [sp, #4]
 8004d74:	f000 f880 	bl	8004e78 <_sbrk_r>
 8004d78:	9b01      	ldr	r3, [sp, #4]
 8004d7a:	4283      	cmp	r3, r0
 8004d7c:	d143      	bne.n	8004e06 <_malloc_r+0xda>
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	3703      	adds	r7, #3
 8004d82:	1aff      	subs	r7, r7, r3
 8004d84:	2303      	movs	r3, #3
 8004d86:	439f      	bics	r7, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	2f0c      	cmp	r7, #12
 8004d8c:	d200      	bcs.n	8004d90 <_malloc_r+0x64>
 8004d8e:	270c      	movs	r7, #12
 8004d90:	0039      	movs	r1, r7
 8004d92:	0030      	movs	r0, r6
 8004d94:	f7ff ffa8 	bl	8004ce8 <sbrk_aligned>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	d034      	beq.n	8004e06 <_malloc_r+0xda>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	19df      	adds	r7, r3, r7
 8004da0:	6027      	str	r7, [r4, #0]
 8004da2:	e013      	b.n	8004dcc <_malloc_r+0xa0>
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	dacb      	bge.n	8004d40 <_malloc_r+0x14>
 8004da8:	230c      	movs	r3, #12
 8004daa:	2500      	movs	r5, #0
 8004dac:	6033      	str	r3, [r6, #0]
 8004dae:	0028      	movs	r0, r5
 8004db0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004db2:	6822      	ldr	r2, [r4, #0]
 8004db4:	1bd1      	subs	r1, r2, r7
 8004db6:	d420      	bmi.n	8004dfa <_malloc_r+0xce>
 8004db8:	290b      	cmp	r1, #11
 8004dba:	d917      	bls.n	8004dec <_malloc_r+0xc0>
 8004dbc:	19e2      	adds	r2, r4, r7
 8004dbe:	6027      	str	r7, [r4, #0]
 8004dc0:	42a3      	cmp	r3, r4
 8004dc2:	d111      	bne.n	8004de8 <_malloc_r+0xbc>
 8004dc4:	602a      	str	r2, [r5, #0]
 8004dc6:	6863      	ldr	r3, [r4, #4]
 8004dc8:	6011      	str	r1, [r2, #0]
 8004dca:	6053      	str	r3, [r2, #4]
 8004dcc:	0030      	movs	r0, r6
 8004dce:	0025      	movs	r5, r4
 8004dd0:	f000 f86c 	bl	8004eac <__malloc_unlock>
 8004dd4:	2207      	movs	r2, #7
 8004dd6:	350b      	adds	r5, #11
 8004dd8:	1d23      	adds	r3, r4, #4
 8004dda:	4395      	bics	r5, r2
 8004ddc:	1aea      	subs	r2, r5, r3
 8004dde:	429d      	cmp	r5, r3
 8004de0:	d0e5      	beq.n	8004dae <_malloc_r+0x82>
 8004de2:	1b5b      	subs	r3, r3, r5
 8004de4:	50a3      	str	r3, [r4, r2]
 8004de6:	e7e2      	b.n	8004dae <_malloc_r+0x82>
 8004de8:	605a      	str	r2, [r3, #4]
 8004dea:	e7ec      	b.n	8004dc6 <_malloc_r+0x9a>
 8004dec:	6862      	ldr	r2, [r4, #4]
 8004dee:	42a3      	cmp	r3, r4
 8004df0:	d101      	bne.n	8004df6 <_malloc_r+0xca>
 8004df2:	602a      	str	r2, [r5, #0]
 8004df4:	e7ea      	b.n	8004dcc <_malloc_r+0xa0>
 8004df6:	605a      	str	r2, [r3, #4]
 8004df8:	e7e8      	b.n	8004dcc <_malloc_r+0xa0>
 8004dfa:	0023      	movs	r3, r4
 8004dfc:	6864      	ldr	r4, [r4, #4]
 8004dfe:	e7a7      	b.n	8004d50 <_malloc_r+0x24>
 8004e00:	002c      	movs	r4, r5
 8004e02:	686d      	ldr	r5, [r5, #4]
 8004e04:	e7af      	b.n	8004d66 <_malloc_r+0x3a>
 8004e06:	230c      	movs	r3, #12
 8004e08:	0030      	movs	r0, r6
 8004e0a:	6033      	str	r3, [r6, #0]
 8004e0c:	f000 f84e 	bl	8004eac <__malloc_unlock>
 8004e10:	e7cd      	b.n	8004dae <_malloc_r+0x82>
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	20000234 	.word	0x20000234

08004e18 <_realloc_r>:
 8004e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e1a:	0007      	movs	r7, r0
 8004e1c:	000e      	movs	r6, r1
 8004e1e:	0014      	movs	r4, r2
 8004e20:	2900      	cmp	r1, #0
 8004e22:	d105      	bne.n	8004e30 <_realloc_r+0x18>
 8004e24:	0011      	movs	r1, r2
 8004e26:	f7ff ff81 	bl	8004d2c <_malloc_r>
 8004e2a:	0005      	movs	r5, r0
 8004e2c:	0028      	movs	r0, r5
 8004e2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e30:	2a00      	cmp	r2, #0
 8004e32:	d103      	bne.n	8004e3c <_realloc_r+0x24>
 8004e34:	f7ff ff0e 	bl	8004c54 <_free_r>
 8004e38:	0025      	movs	r5, r4
 8004e3a:	e7f7      	b.n	8004e2c <_realloc_r+0x14>
 8004e3c:	f000 f83e 	bl	8004ebc <_malloc_usable_size_r>
 8004e40:	9001      	str	r0, [sp, #4]
 8004e42:	4284      	cmp	r4, r0
 8004e44:	d803      	bhi.n	8004e4e <_realloc_r+0x36>
 8004e46:	0035      	movs	r5, r6
 8004e48:	0843      	lsrs	r3, r0, #1
 8004e4a:	42a3      	cmp	r3, r4
 8004e4c:	d3ee      	bcc.n	8004e2c <_realloc_r+0x14>
 8004e4e:	0021      	movs	r1, r4
 8004e50:	0038      	movs	r0, r7
 8004e52:	f7ff ff6b 	bl	8004d2c <_malloc_r>
 8004e56:	1e05      	subs	r5, r0, #0
 8004e58:	d0e8      	beq.n	8004e2c <_realloc_r+0x14>
 8004e5a:	9b01      	ldr	r3, [sp, #4]
 8004e5c:	0022      	movs	r2, r4
 8004e5e:	429c      	cmp	r4, r3
 8004e60:	d900      	bls.n	8004e64 <_realloc_r+0x4c>
 8004e62:	001a      	movs	r2, r3
 8004e64:	0031      	movs	r1, r6
 8004e66:	0028      	movs	r0, r5
 8004e68:	f7ff fed7 	bl	8004c1a <memcpy>
 8004e6c:	0031      	movs	r1, r6
 8004e6e:	0038      	movs	r0, r7
 8004e70:	f7ff fef0 	bl	8004c54 <_free_r>
 8004e74:	e7da      	b.n	8004e2c <_realloc_r+0x14>
	...

08004e78 <_sbrk_r>:
 8004e78:	2300      	movs	r3, #0
 8004e7a:	b570      	push	{r4, r5, r6, lr}
 8004e7c:	4d06      	ldr	r5, [pc, #24]	; (8004e98 <_sbrk_r+0x20>)
 8004e7e:	0004      	movs	r4, r0
 8004e80:	0008      	movs	r0, r1
 8004e82:	602b      	str	r3, [r5, #0]
 8004e84:	f7fb fe36 	bl	8000af4 <_sbrk>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d103      	bne.n	8004e94 <_sbrk_r+0x1c>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d000      	beq.n	8004e94 <_sbrk_r+0x1c>
 8004e92:	6023      	str	r3, [r4, #0]
 8004e94:	bd70      	pop	{r4, r5, r6, pc}
 8004e96:	46c0      	nop			; (mov r8, r8)
 8004e98:	2000023c 	.word	0x2000023c

08004e9c <__malloc_lock>:
 8004e9c:	b510      	push	{r4, lr}
 8004e9e:	4802      	ldr	r0, [pc, #8]	; (8004ea8 <__malloc_lock+0xc>)
 8004ea0:	f000 f814 	bl	8004ecc <__retarget_lock_acquire_recursive>
 8004ea4:	bd10      	pop	{r4, pc}
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	20000240 	.word	0x20000240

08004eac <__malloc_unlock>:
 8004eac:	b510      	push	{r4, lr}
 8004eae:	4802      	ldr	r0, [pc, #8]	; (8004eb8 <__malloc_unlock+0xc>)
 8004eb0:	f000 f80d 	bl	8004ece <__retarget_lock_release_recursive>
 8004eb4:	bd10      	pop	{r4, pc}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	20000240 	.word	0x20000240

08004ebc <_malloc_usable_size_r>:
 8004ebc:	1f0b      	subs	r3, r1, #4
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	1f18      	subs	r0, r3, #4
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	da01      	bge.n	8004eca <_malloc_usable_size_r+0xe>
 8004ec6:	580b      	ldr	r3, [r1, r0]
 8004ec8:	18c0      	adds	r0, r0, r3
 8004eca:	4770      	bx	lr

08004ecc <__retarget_lock_acquire_recursive>:
 8004ecc:	4770      	bx	lr

08004ece <__retarget_lock_release_recursive>:
 8004ece:	4770      	bx	lr

08004ed0 <_init>:
 8004ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed6:	bc08      	pop	{r3}
 8004ed8:	469e      	mov	lr, r3
 8004eda:	4770      	bx	lr

08004edc <_fini>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	46c0      	nop			; (mov r8, r8)
 8004ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee2:	bc08      	pop	{r3}
 8004ee4:	469e      	mov	lr, r3
 8004ee6:	4770      	bx	lr
